<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@jeqo</title>
    <link>https://jeqo.github.io/</link>
    <description>Recent content on @jeqo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright @jeqo</copyright>
    <lastBuildDate>Wed, 26 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jeqo.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kafka Streams abstracts access to multiple tasks state stores when reading</title>
      <link>https://jeqo.github.io/til/2022-01-26-kafka-streams-iq-composite/</link>
      <pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/til/2022-01-26-kafka-streams-iq-composite/</guid>
      <description>Kafka Streams applications could scale either horizontally (add more instances) or vertically (add more threads). When scaled vertically, multiple tasks store multiple partitions locally. An interesting question is whether Kafka Streams gives access when reading (i.e. Interactive Queries) to these stores, and how does it manage to abstract the access to different stores managed by multiple tasks.
The answer is yes, Kafka Streams abstracts away tasks and multiple stores. Internally it&amp;rsquo;s implemented by using CompositeReadOnly*Stores:</description>
    </item>
    
    <item>
      <title>reload4j as drop-in replacement for log4j 1.x</title>
      <link>https://jeqo.github.io/til/2022-01-25-reload4j/</link>
      <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/til/2022-01-25-reload4j/</guid>
      <description>TIL there is a drop-in replacement for log4j 1.x: Reload4j.
It continues fixing security issues, and doesn&amp;rsquo;t require changing application logic. Dropping JAR to the classpath, removing previous log4j-1.* JARs should be enough to get the latest patches.</description>
    </item>
    
    <item>
      <title>Ansible has a debug mode to pause and troubleshoot</title>
      <link>https://jeqo.github.io/til/2022-01-21-ansible-debug/</link>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/til/2022-01-21-ansible-debug/</guid>
      <description>I have been running Ansible for a while now. My usual/naive way of debugging has always been adding a debug module[1], and get the execution running til that point.
I figured that there are better ways to deal with this[2]. By using the debug mode, tasks will stop when failing (by default) and you&amp;rsquo;ll be able to introspect into the task, variables, and context when things failed. Even better, you&amp;rsquo;ll be able to re-execute if there was a transient error.</description>
    </item>
    
    <item>
      <title>Changing Kafka Broker&#39;s rack</title>
      <link>https://jeqo.github.io/til/2021-12-10-kafka-change-rack/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/til/2021-12-10-kafka-change-rack/</guid>
      <description>Kafka broker configuration includes a rack label to define the location of the broker. This is useful when placing replicas across the cluster to ensure replicas are spread across locations as evenly as possible.
This label may need to change for different reasons. One I found today is if you want to redefine locations to support Multi-Region clusters and Observers.
If there are existing topics, and previous rack labels were already used when creating the topics, then the placement may not match the new topology.</description>
    </item>
    
    <item>
      <title>Kafka data loss scenarios</title>
      <link>https://jeqo.github.io/posts/2021-12-10-kafka-data-loss/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2021-12-10-kafka-data-loss/</guid>
      <description>Kafka topic partitions are replicated across brokers. Data loss happens when the brokers where replicas are located are unavailable or have fully failed. The worst scenario — and where is no much to do — is when all the brokers fail; then no remediation is possible. Replication allows to increase redundancy so this scenarios is less likely to happen.
The following scenarios show different trade-offs that could increase the risk of lossing data:</description>
    </item>
    
    <item>
      <title>Kafka Producer idempotency is enabled by default since 3.0</title>
      <link>https://jeqo.github.io/til/2021-12-09-kafka-v3-idempotent-acks-all/</link>
      <pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/til/2021-12-09-kafka-v3-idempotent-acks-all/</guid>
      <description>Since Apache Kafka 3.0, Producers come with enable.idempotency=true which leads to acks=all, along with other changes enforced by idempotency.
This means by default Producers will be balanced between latency (no batching) and durability — different from previous versions where the main goal was to reduce latency even by risking durability with acks=1.</description>
    </item>
    
    <item>
      <title>Reducing `acks` doesn&#39;t help to reduce end-to-end latency</title>
      <link>https://jeqo.github.io/til/2021-12-09-kafka-reducing-acks-and-latency/</link>
      <pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/til/2021-12-09-kafka-reducing-acks-and-latency/</guid>
      <description>Kafka Producers enforce durability across replicas by setting acks=all (default since v3.0). As enforcing this guarantee requires waiting for replicas to sync, this increases latency; and reducing it tends to give the impression that latency gets reduced overall.
When looking at the end-to-end latency (including production and consumption) this ends up not being the case:
Records are only available for consumption once the replicas have been updated and the leader can increase the high watermark.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://jeqo.github.io/projects/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/projects/</guid>
      <description>hashtag-outline &amp;nbsp;Open-source hashtag-outline &amp;nbsp;Apache Kafka https://github.com/apache/kafka
Main contributions:
 Author of the following improvement proposals (KIP):  KIP-122: https://cwiki.apache.org/confluence/display/KAFKA/KIP-122%3A+Add+Reset+Consumer+Group+Offsets+tooling KIP-171: https://cwiki.apache.org/confluence/display/KAFKA/KIP-171+-+Extend+Consumer+Group+Reset+Offset+for+Stream+Application KIP-244: https://cwiki.apache.org/confluence/display/KAFKA/KIP-244%3A+Add+Record+Header+support+to+Kafka+Streams+Processor+API KIP-634: https://cwiki.apache.org/confluence/display/KAFKA/KIP-634%3A+Complementary+support+for+headers+and+record+metadata+in+Kafka+Streams+DSL KIP-666: https://cwiki.apache.org/confluence/display/KAFKA/KIP-666%3A+Add+Instant-based+methods+to+ReadOnlySessionStore KIP-667: https://cwiki.apache.org/confluence/display/KAFKA/KIP-667%3A+Remove+deprecated+methods+from+ReadOnlyWindowStore   Helped with the implementation of:  KIP-478:  https://cwiki.apache.org/confluence/display/KAFKA/KIP-478+-+Strongly+typed+Processor+API https://issues.apache.org/jira/browse/KAFKA-8410      hashtag-outline &amp;nbsp;Zipkin https://github.com/openzipkin/zipkin
Main contributions:
 Zipkin storage based on Kafka Streams: https://github.com/openzipkin-contrib/zipkin-storage-kafka Brave support for Kafka clients and streams: https://github.com/openzipkin/brave Maintaining Zipkin usage of Kafka as collector: https://github.</description>
    </item>
    
    <item>
      <title>Cioran books</title>
      <link>https://jeqo.github.io/notes/cioran-books/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/cioran-books/</guid>
      <description>&lt;p&gt;Including pictures from books:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Trouble With Being Born&lt;/li&gt;
&lt;li&gt;A Short History Of Decay&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Scale book</title>
      <link>https://jeqo.github.io/notes/scale-book/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/scale-book/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/31670196-scale&#34;&gt;Scale: The Universal Laws of Growth, Innovation, Sustainability, and the Pace of Life in Organisms, Cities, Economies, and Companies&lt;/a&gt; by Geoffrey B. West&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Age Of Surveillance Capitalism book</title>
      <link>https://jeqo.github.io/notes/the-age-of-surveillance-capitalism-book/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/the-age-of-surveillance-capitalism-book/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/26195941-the-age-of-surveillance-capitalism&#34;&gt;The Age Of Surveillance Capitalism&lt;/a&gt; by Shoshana Zuboff&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Use min.insync.replicas for fault-tolerance</title>
      <link>https://jeqo.github.io/til/2021-12-02-kafka-min-isr/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/til/2021-12-02-kafka-min-isr/</guid>
      <description>&lt;p&gt;Things to remember:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Topic replication factor is not enough to guarantee fault-tolerance. If &lt;code&gt;min.insync.replicas&lt;/code&gt; is not defined i.e. 1, then data could potentially be lost.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acks=all&lt;/code&gt; will force replica leader to wait for &lt;em&gt;all&lt;/em&gt; brokers in the ISR, not only the &lt;code&gt;min.insync.replicas&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If replicas available are equal to minimum ISR, then the topic partitions are at the edge of losing availability. If one broker becomes unavailable (e.g. restarting), then producers will fail to write data.&lt;/li&gt;
&lt;li&gt;Topic configuration is inherited from the server. If broker configuration changes, it affects the &lt;em&gt;existing&lt;/em&gt; topics. Keep the topic defaults, unless it needs to be different than broker default for easier maintenance.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>About TILs</title>
      <link>https://jeqo.github.io/til/2021-12-01-about-til/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/til/2021-12-01-about-til/</guid>
      <description>Today I learned about Today-I-Learned posts from Simon Willison: https://til.simonwillison.net/ and found it super cool, so I decided to try out, let&amp;rsquo;s see how it goes.</description>
    </item>
    
    <item>
      <title>KIP-634: Complementary support for headers in Kafka Streams</title>
      <link>https://jeqo.github.io/drafts/kip-634/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/drafts/kip-634/</guid>
      <description>hashtag-outline &amp;nbsp;Motivation Headers are transiently passed over a Kafka Streams topology. To act on them, Processor API has to be used since (KIP-244).
Although current support is useful for instrumentations that need to access headers, it becomes cumbersome for users to access headers on common Kafka Streams DSL operations (e.g filtering based on header value) as requires using a Transformer/Processor implementation.
hashtag-outline &amp;nbsp;Related JIRA issues  https://issues.apache.org/jira/browse/KAFKA-7718  hashtag-outline &amp;nbsp;Proposed Changes  Include a new type, to map value and headers.</description>
    </item>
    
    <item>
      <title>KIP-617: Allow Kafka Streams State Stores to be iterated backwards</title>
      <link>https://jeqo.github.io/drafts/kip-617/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/drafts/kip-617/</guid>
      <description>hashtag-outline &amp;nbsp;Motivation Fetching range of records from Kafka Streams state stores comes with an iterator to traverse elements from oldest to newest, e.g ReadOnlyWindowStore#fetch(K key, long fromTime, long toTime) mentions:
 For each key, the iterator guarantees ordering of windows, starting from the oldest/earliest&amp;quot;
 Similar guarantees are provided on other fetch and range operations. But in the case of key ranges, there are some nuances regarding order:
 The returned iterator must be safe from {@link java.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://jeqo.github.io/about/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/about/</guid>
      <description>hashtag-outline &amp;nbsp;Jorge Esteban Quilcate Otoya Peruvian, husband, software engineer, and immigrant in Norway and the UK.
Enjoying my journey working on distributed systems.
Started to contribute to Open-Source projects since 2016, including Apache Kafka and Zipkin.
Current interests:
 Log-based streaming platform (Apache Kafka), Stream processing (Kafka Streams), Distributed Tracing (OpenTracing), Metrics (Micrometer, Prometheus), Cluster Scheduling (Nomad, Kubernetes), Automation (Docker, Ansible)  hashtag-outline &amp;nbsp;Open-Source contributions   KIP-122: Add Reset Consumer Group Offsets tooling https://cwiki.</description>
    </item>
    
    <item>
      <title>Notes on Co-evolving Tracing and Fault Injection with Box of Pain</title>
      <link>https://jeqo.github.io/notes/2019-10-31-co-evolving-tracing-and-fault-injection/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/2019-10-31-co-evolving-tracing-and-fault-injection/</guid>
      <description>This paper explores how related tracing and fault injection systems are, and if they should be part of the same thing.
 The space of possible executions of a distributed system is exponential in the number of communicating precesses and the number of messages, [&amp;hellip;]
  [&amp;hellip;] some of the most pernicious bugs in distributed programs involve mistakes on how programs handle partial failure of remote components.
 In order to expose this failures, fault injection mechanisms are used to cause network partitions, or machine crashes.</description>
    </item>
    
    <item>
      <title>Making sense of Event-Driven Systems @ Oracle Code One 2019</title>
      <link>https://jeqo.github.io/talks/making-sense-event-driven-systems-codeone19/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/talks/making-sense-event-driven-systems-codeone19/</guid>
      <description>&lt;p&gt;Presented at &lt;a href=&#34;https://events.rainfocus.com/widget/oracle/oow19/catalogcodeone19?search=jorge&amp;amp;search.codeonetracks=15560568230440086BEm&#34;&gt;Oracle Code One 2019&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Making sense of Event-Driven Systems @ Kafka Summit 2019</title>
      <link>https://jeqo.github.io/talks/making-sense-event-driven-dataflows-kafkasummitnyc19/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/talks/making-sense-event-driven-dataflows-kafkasummitnyc19/</guid>
      <description>&lt;p&gt;Presented at &lt;a href=&#34;https://kafka-summit.org/sessions/tracing-kafka-based-applications-making-sense-event-driven-dataflows/&#34;&gt;Kafka Summit NYC 2019&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Importance of Distributed Tracing for Apache Kafka Based Applications</title>
      <link>https://jeqo.github.io/posts/2019-03-26-importance-of-distributed-tracing-for-apache-kafka-based-applications/</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2019-03-26-importance-of-distributed-tracing-for-apache-kafka-based-applications/</guid>
      <description>Originally posted in Confluent Blog
 Apache Kafka® based applications stand out for their ability to decouple producers and consumers using an event log as an intermediate layer.
One result of this is that producers and consumers don’t know about each other, as there is no direct communication between them.
This enables choreographed service collaborations, where many components can subscribe to events stored in the event log and react to them asynchronously.</description>
    </item>
    
    <item>
      <title>The Importance of Observability for Kafka-based applications with Zipkin @ Oslo Apache Kafka Meetup</title>
      <link>https://jeqo.github.io/talks/the-importance-of-observability-kafkausergroupnorway18/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/talks/the-importance-of-observability-kafkausergroupnorway18/</guid>
      <description>&lt;p&gt;Presented at &lt;a href=&#34;https://www.meetup.com/en-AU/Oslo-Kafka/events/254039906/&#34;&gt;Oslo Apache Kafka Meetup&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Notes on Kafka, Samza and the Unix Philosophy of Distributed Data</title>
      <link>https://jeqo.github.io/notes/2018-07-27-kafka-samza-and-the-unix-philosophy-of-distributed-data/</link>
      <pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/2018-07-27-kafka-samza-and-the-unix-philosophy-of-distributed-data/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data on the Outside vs Data on the Inside</title>
      <link>https://jeqo.github.io/notes/2018-01-08-data-on-the-outside-vs-data-on-the-inside/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/2018-01-08-data-on-the-outside-vs-data-on-the-inside/</guid>
      <description>&lt;p&gt;I found this paper as relevant and accurate today as it was in 2005, when it was published.
It is fascinating how even 12 years later and with new technologies in vogue,
same concepts keep applying.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Distributed Tracing with OpenTracing @ NoSlidesConf 2017</title>
      <link>https://jeqo.github.io/talks/distributed-tracing-with-opentracing-noslides18/</link>
      <pubDate>Sat, 25 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/talks/distributed-tracing-with-opentracing-noslides18/</guid>
      <description>&lt;p&gt;Presented at &lt;a href=&#34;http://www.noslidesconf.net/&#34;&gt;NoSlidesConf 2017&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tracing Kafka applications</title>
      <link>https://jeqo.github.io/posts/2017-09-28-kafka-opentracing/</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2017-09-28-kafka-opentracing/</guid>
      <description>for a more updated version, check https://jeqo.github.io/posts/2019-03-26-importance-of-distributed-tracing-for-apache-kafka-based-applications/
 Tracing is one of the hardest time in integration or microservice development: knowing how a request impact your different components, and if your components have behave as expected.
This could be fairly easy if we have monolith where we have one database and with some queries or checking one log file you can validate everything went well.
Once you introduce distributed components and asynchronous communication this starts to get more complex and tedious.</description>
    </item>
    
    <item>
      <title>From Messaging to Logs with Apache Kafka @ OUGN 2017</title>
      <link>https://jeqo.github.io/talks/from-messaging-to-logs-ougn17/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/talks/from-messaging-to-logs-ougn17/</guid>
      <description>&lt;p&gt;Presented at &lt;a href=&#34;http://ougn.no/varseminar-2017/&#34;&gt;OUGN 2017&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Scaling WebLogic, the Kubernetes way @ OUGN 2017</title>
      <link>https://jeqo.github.io/talks/scale-wls-the-k8s-way-ougn-17/</link>
      <pubDate>Thu, 09 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/talks/scale-wls-the-k8s-way-ougn-17/</guid>
      <description>&lt;p&gt;Presented at &lt;a href=&#34;http://ougn.no/varseminar-2017/&#34;&gt;OUGN 2017&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rewind Kafka Consumer Offsets</title>
      <link>https://jeqo.github.io/posts/2017-01-31-kafka-rewind-consumers-offset/</link>
      <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2017-01-31-kafka-rewind-consumers-offset/</guid>
      <description>&lt;p&gt;One of the most important features from &lt;em&gt;Apache Kafka&lt;/em&gt; is how it manages
Multiple Consumers. Each &lt;code&gt;consumer group&lt;/code&gt; has a current &lt;code&gt;offset&lt;/code&gt;, that
determine at what point in a &lt;code&gt;topic&lt;/code&gt; this &lt;code&gt;consumer group&lt;/code&gt; has consume
messages. So, each &lt;code&gt;consumer group&lt;/code&gt; can manage its &lt;code&gt;offset&lt;/code&gt; independently,
by &lt;code&gt;partition&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This offers the possibility to rollback in time and reprocess messages from
the beginning of a &lt;code&gt;topic&lt;/code&gt; and regenerate the current status of the system.&lt;/p&gt;
&lt;p&gt;But how to do it (programmatically)?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Scaling Kafka with Docker Containers</title>
      <link>https://jeqo.github.io/posts/2017-01-15-scale-kafka-containers/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2017-01-15-scale-kafka-containers/</guid>
      <description>&lt;p&gt;In this post I will show how to use Docker containers to create and scale
a Kafka cluster, and also how to create, scale and move &lt;code&gt;topics&lt;/code&gt; inside
the cluster.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Speed up your Oracle Database provisioning with Docker and Ansible</title>
      <link>https://jeqo.github.io/posts/2016-05-26-speed-up-oracle-database-provisioning-ansible-docker/</link>
      <pubDate>Thu, 26 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2016-05-26-speed-up-oracle-database-provisioning-ansible-docker/</guid>
      <description>&lt;p&gt;Warming up before &lt;a href=&#34;http://www.amis-conference.com/Program&#34;&gt;AMIS 25th Conference&lt;/a&gt;
event where I will be presenting with my friend
and colleague Arturo Viveros (@gugalnikov)
&lt;a href=&#34;http://www.amis-conference.com/Session-Catalog#session1168&#34;&gt;about Oracle SOA Suite provisioning&lt;/a&gt;,
I want to share some practices that help us to provide Oracle Database instances
between developers and improve our productivity.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lightning Quick Provisioning and DevOps for Oracle SOA Suite 12c @ AMIS 25</title>
      <link>https://jeqo.github.io/talks/lighning-provisioning-oracle-soa-suite-amis25/</link>
      <pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/talks/lighning-provisioning-oracle-soa-suite-amis25/</guid>
      <description>&lt;p&gt;Presented at &lt;a href=&#34;http://www.amis.nl/en/events-eng/jubileumconferentie/&#34;&gt;AMIS25 2016&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ansible - an agentless provisioning</title>
      <link>https://jeqo.github.io/posts/2016-03-30-ansible-agentless-provisioning/</link>
      <pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2016-03-30-ansible-agentless-provisioning/</guid>
      <description>&lt;p&gt;Ansible is an automation tool that is recognized for be simple and
powerful at the same time. From my experience, I can say this is mainly
because of its scripting language: YAML, and its agentless architecture.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Oracle SOA Suite 12c Docker Image</title>
      <link>https://jeqo.github.io/posts/2015-09-04-oracle-soa-12c-packer-docker-hub/</link>
      <pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2015-09-04-oracle-soa-12c-packer-docker-hub/</guid>
      <description>&lt;p&gt;After find some limitations on building SOA Docker image using Dockerfile
(as volume access, default size image) I researched on how to improve
building process and I found &lt;a href=&#34;https://packer.io/&#34;&gt;Packer&lt;/a&gt;
(from the same guy that creates Vagrant).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Integrate Java EE 7 and Kafka using Avro and RxJava</title>
      <link>https://jeqo.github.io/posts/2015-07-31-java-ee-rxjava-kafka-avro/</link>
      <pubDate>Fri, 31 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2015-07-31-java-ee-rxjava-kafka-avro/</guid>
      <description>&lt;p&gt;I decided to implement a naive integration between Java EE applications and
RxJava/Kafka/Avro, to publish and subscribe to events.&lt;/p&gt;
&lt;p&gt;You can go directly to that &lt;a href=&#34;https://github.com/jeqo/java-ee-rxjava-kafka-avro&#34;&gt;code&lt;/a&gt;, or check my approach:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Oracle Fusion Middleware Chef Cookbook - New Release!</title>
      <link>https://jeqo.github.io/posts/2015-07-21-chef-cookbook-oracle-fmw-0-2-0/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2015-07-21-chef-cookbook-oracle-fmw-0-2-0/</guid>
      <description>&lt;p&gt;Yesterday, I released a new version (0.2.0) of my Oracle Fusion Middleware Cookbook
hosted on &lt;a href=&#34;https://supermarket.chef.io/cookbooks/oracle-fmw&#34;&gt;Chef Supermarket&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>What is Adaptive Case Management? @ OUGN 15</title>
      <link>https://jeqo.github.io/talks/what-is-adaptive-case-management-ougn15/</link>
      <pubDate>Sat, 02 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/talks/what-is-adaptive-case-management-ougn15/</guid>
      <description>&lt;p&gt;Presented at &lt;a href=&#34;http://www.amis.nl/en/events-eng/jubileumconferentie/&#34;&gt;AMIS25 2016&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker image for Oracle SOA Suite 12c</title>
      <link>https://jeqo.github.io/posts/2015-04-01-docker-image-oracle-soa/</link>
      <pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2015-04-01-docker-image-oracle-soa/</guid>
      <description>&lt;p&gt;Cool news came from Oracle a couple of weeks ago: &lt;a href=&#34;https://blogs.oracle.com/WebLogicServer/entry/oracle_weblogic_server_now_running&#34;&gt;Oracle WebLogic Server is now supported on Docker!&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Running Oracle BPM 12c on AWS using Vagrant and Chef</title>
      <link>https://jeqo.github.io/posts/2014-12-11-run-bpm-12c-aws/</link>
      <pubDate>Thu, 11 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2014-12-11-run-bpm-12c-aws/</guid>
      <description>&lt;p&gt;In this post, I will show how to create an AWS EC2 Instance with an Oracle BPM 12c Quickstart Domain created. And I will use previous post for related tasks.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chef Cookbook for Oracle Fusion Middleware 12c</title>
      <link>https://jeqo.github.io/posts/2014-12-09-chef-cookbook-oracle-fmw-12c/</link>
      <pubDate>Tue, 09 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2014-12-09-chef-cookbook-oracle-fmw-12c/</guid>
      <description>&lt;p&gt;Provisioning tools have change the way we create software environments: How much time we spend installing OS, databases, configuring platforms, applications? Now you can translate this steps into code, getting the software development benefits and challenges into infrastructure: versioning, reuse, continuous improvement.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Create a NFS instance on AWS using Vagrant and Chef</title>
      <link>https://jeqo.github.io/posts/2014-11-30-create-nfs-instance-aws/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2014-11-30-create-nfs-instance-aws/</guid>
      <description>&lt;p&gt;I was creating AWS EC2 instances to install Oracle Fusion Middleware products, and I found an issue: How to download Oracle&amp;rsquo;s installers if I want to use installers on several instances? This could consume a lot of network bandwith and I want to make this process repeatable, so I don&amp;rsquo;t want to wait 1 hour each installation only downloading files.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Book Review - Applied SOA Patterns on the Oracle Platform</title>
      <link>https://jeqo.github.io/posts/2014-11-28-review-soa-patterns-oracle-platform/</link>
      <pubDate>Fri, 28 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2014-11-28-review-soa-patterns-oracle-platform/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve had the opportunity to present a review of this book &lt;a href=&#34;https://www.packtpub.com/application-development/applied-soa-patterns-oracle-platform&#34;&gt;Applied SOA Patterns on the Oracle Platform&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vagrant and Chef Quickstart</title>
      <link>https://jeqo.github.io/posts/2014-11-26-vagrant-quickstart/</link>
      <pubDate>Wed, 26 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/posts/2014-11-26-vagrant-quickstart/</guid>
      <description>&lt;p&gt;I have some months working with Vagrant and I think it&amp;rsquo;s owesome! Integration with almost all kind of virtualization platforms: VirtalBox, VMware, Docker, AWS EC2, Hyper-V and so on. Also it&amp;rsquo;s able to use differente Provisioners: Chef, Puppet, bash, Docker, Ansible. I really like it.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
