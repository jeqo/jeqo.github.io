<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0">
    <channel>
        <title>Jorge Quilcate Otoya on @jeqo</title>
        <generator uri="https://gohugo.io">Hugo</generator>
        <link>https://jeqo.github.io/categories/integration/index.xml</link>
        <language>en-us</language>
        <author>Jorge Quilcate Otoya</author>
        
        <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
        
        <item>
            <title>From Messaging to Logs with Apache Kafka - OUGN17</title>
            <link>https://jeqo.github.io/talk/from-messaging-to-logs-ougn17/</link>
            <pubDate>Fri, 10 Mar 2017 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/talk/from-messaging-to-logs-ougn17/</guid>
            <description>&lt;p&gt;Presented at OUGN 2017 (&lt;a href=&#34;http://ougn.no/varseminar-2017/&#34;&gt;http://ougn.no/varseminar-2017/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;slides&#34;&gt;Slides&lt;/h1&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;b57a55a2c9c14049a8503e281d13959c&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;source-code&#34;&gt;Source-Code&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jeqo/talk-kafka-messaging-logs&#34;&gt;https://github.com/jeqo/talk-kafka-messaging-logs&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Kafka - Rewind Consumer Offsets</title>
            <link>https://jeqo.github.io/post/2017-01-31-kafka-rewind-consumers-offset/</link>
            <pubDate>Tue, 31 Jan 2017 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2017-01-31-kafka-rewind-consumers-offset/</guid>
            <description>&lt;p&gt;One of the most important features from &lt;em&gt;Apache Kafka&lt;/em&gt; is how it manages
Multiple Consumers. Each &lt;code&gt;consumer group&lt;/code&gt; has a current &lt;code&gt;offset&lt;/code&gt;, that
determine at what point in a &lt;code&gt;topic&lt;/code&gt; this &lt;code&gt;consumer group&lt;/code&gt; has consume
messages. So, each &lt;code&gt;consumer group&lt;/code&gt; can manage its &lt;code&gt;offset&lt;/code&gt; independently,
by &lt;code&gt;partition&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This offers the possibility to rollback in time and reprocess messages from
the beginning of a &lt;code&gt;topic&lt;/code&gt; and regenerate the current status of the system.&lt;/p&gt;

&lt;p&gt;But how to do it (programmatically)?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Source code: &lt;a href=&#34;https://github.com/jeqo/post-kafka-rewind-consumer-offset&#34;&gt;https://github.com/jeqo/post-kafka-rewind-consumer-offset&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;basic-concepts&#34;&gt;Basic Concepts&lt;/h2&gt;

&lt;h3 id=&#34;topics-and-offsets&#34;&gt;Topics and Offsets&lt;/h3&gt;

&lt;p&gt;First thing to understand to achieve Consumer Rewind, is: rewind over what?
Because &lt;code&gt;topics&lt;/code&gt; are divided into &lt;code&gt;partitions&lt;/code&gt;. Records sent from &lt;code&gt;Producers&lt;/code&gt;
are balanced between them, so each partition has its own &lt;code&gt;offset&lt;/code&gt; index.&lt;/p&gt;

&lt;p&gt;Each &lt;code&gt;record&lt;/code&gt; has its own &lt;code&gt;offset&lt;/code&gt; that will be used by &lt;code&gt;consumers&lt;/code&gt; to define
which messages has been consumed from the &lt;strong&gt;log&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;consumers-and-consumer-groups&#34;&gt;Consumers and Consumer Groups&lt;/h3&gt;

&lt;p&gt;Once we understand that &lt;code&gt;topics&lt;/code&gt; have &lt;code&gt;partitions&lt;/code&gt; and &lt;code&gt;offsets&lt;/code&gt; by &lt;code&gt;partition&lt;/code&gt;
we can now understand how &lt;code&gt;consumers&lt;/code&gt; and &lt;code&gt;consumer groups&lt;/code&gt; work.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Consumers&lt;/code&gt; are grouped by &lt;code&gt;group.id&lt;/code&gt;. This property identify you as a
&lt;code&gt;consumer group&lt;/code&gt;, so the &lt;code&gt;broker&lt;/code&gt; knows which was the last &lt;code&gt;record&lt;/code&gt; you have
consumed by &lt;code&gt;offset&lt;/code&gt;, by &lt;code&gt;partition&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This partitions allows &lt;em&gt;parallelism&lt;/em&gt;, because members from a &lt;code&gt;consumer group&lt;/code&gt;
can consume &lt;code&gt;records&lt;/code&gt; from &lt;code&gt;partitions&lt;/code&gt; independently, in parallel.&lt;/p&gt;

&lt;p&gt;Before continue, let&amp;rsquo;s check a simple Kafka Producer implemented with Java:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;KafkaSimpleProducer.java&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
    Properties properties &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Properties&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    properties&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ProducerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;BOOTSTRAP_SERVERS_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; bootstrapServers&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    properties&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ProducerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;KEY_SERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; StringSerializer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
    properties&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ProducerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;VALUE_SERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; StringSerializer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;

    Producer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; producer &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; KafkaProducer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;properties&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    IntStream&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;rangeClosed&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(1,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100)&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;boxed&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;number &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; ProducerRecord&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;topic-1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                    number&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt;
                    number&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()))&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;record &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; producer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;send&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;record&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;forEach&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;result &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; printMetadata&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;result&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
    producer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create 100 &lt;code&gt;records&lt;/code&gt; in topic &lt;code&gt;topic-1&lt;/code&gt;, with &lt;code&gt;offsets&lt;/code&gt; from 0-99&lt;/p&gt;

&lt;h2 id=&#34;from-command-line&#34;&gt;From Command-Line&lt;/h2&gt;

&lt;p&gt;In this first scenario, we will see how to manage offsets from &lt;em&gt;command-line&lt;/em&gt;
so it will give us an idea of how to implement it in our application.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re working from the terminal, you can use &lt;code&gt;kafka-console-consumer&lt;/code&gt; without
&lt;code&gt;group.id&lt;/code&gt;, a new &lt;code&gt;group.id&lt;/code&gt; is generated using:
&lt;code&gt;console-consumer-${new Random().nextInt(100000)}&lt;/code&gt;.
So unless you use the same &lt;code&gt;group.id&lt;/code&gt; afterwards, it would be as you create a
new consumer group each time.&lt;/p&gt;

&lt;p&gt;By default, when you connect to a &lt;code&gt;topic&lt;/code&gt; as a &lt;code&gt;consumer&lt;/code&gt;, you
go to the &lt;em&gt;latest&lt;/em&gt; &lt;code&gt;offset&lt;/code&gt;, so you won&amp;rsquo;t see any new message until new records
arrive after you connect.&lt;/p&gt;

&lt;p&gt;In this case, going back to the beginning of the topic will as easy as add
&lt;code&gt;--from-beginning&lt;/code&gt; option to the command line:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/101246.js&#34; id=&#34;asciicast-101246&#34; async&gt;&lt;/script&gt;

&lt;p&gt;But, what happen if you use &lt;code&gt;group.id&lt;/code&gt; property, it will only work the first time,
but &lt;code&gt;offset&lt;/code&gt; gets commited to cluster:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/101248.js&#34; id=&#34;asciicast-101248&#34; async&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/101250.js&#34; id=&#34;asciicast-101250&#34; async&gt;&lt;/script&gt;

&lt;p&gt;So, how to go back to the beginning?&lt;/p&gt;

&lt;p&gt;We can use &lt;code&gt;--offset&lt;/code&gt; option to with three alternatives:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--offset &amp;lt;String: consume offset&amp;gt;        The offset id to consume from (a non-  
                                           negative number), or &#39;earliest&#39;      
                                           which means from beginning, or       
                                           &#39;latest&#39; which means from end        
                                           (default: latest)
&lt;/code&gt;&lt;/pre&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/101252.js&#34; id=&#34;asciicast-101252&#34; async&gt;&lt;/script&gt;

&lt;h2 id=&#34;from-java-clients&#34;&gt;From Java Clients&lt;/h2&gt;

&lt;p&gt;So, from &lt;code&gt;command-line&lt;/code&gt; is pretty easy to go back in time in the log. But
how to do it from your application?&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using Kafka Consumers in your applications, you have to options
(with Java):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kafka.apache.org/documentation/#consumerapi&#34;&gt;Kafka Consumer API&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kafka.apache.org/documentation/#streamsapi&#34;&gt;Kafka Streams API&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Long story short: If you need stateful and stream processing capabilities,
go with Kafka Streams.
If you need simple one-by-one consumption of messages by topics, go with
Kafka Consumer.&lt;/p&gt;

&lt;p&gt;At this moment this are the options to rewind offsets with these APIs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Kafka Consumer API support go back to the beginning of the topic, go back
to a specific offset, and go back to a specific offset by timestamps.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kafka Streams API only support to go back to the earliest offset of the
&lt;code&gt;input topics&lt;/code&gt;, and is well explained by &lt;a href=&#34;https://github.com/mjsax&#34;&gt;Matthias J. Sax&lt;/a&gt;
in his post
&lt;a href=&#34;https://www.confluent.io/blog/data-reprocessing-with-kafka-streams-resetting-a-streams-application/&#34;&gt;[1]&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I will focus in options available in &lt;code&gt;Kafka Consumer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A simple Consumer will look something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    Properties props &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Properties&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    props&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;BOOTSTRAP_SERVERS_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; bootstrapServers&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    props&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;GROUP_ID_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    props&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;ENABLE_AUTO_COMMIT_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    props&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;KEY_DESERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;org.apache.kafka.common.serialization.StringDeserializer&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    props&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;VALUE_DESERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;org.apache.kafka.common.serialization.StringDeserializer&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    KafkaConsumer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; consumer &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; KafkaConsumer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;props&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;subscribe&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Arrays&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;asList&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;topic-1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        ConsumerRecords&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; records &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;poll&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(100);&lt;/span&gt;

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; records&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
            System&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;offset = %d, key = %s, value = %s%n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will poll by &lt;code&gt;100ms&lt;/code&gt; for records and print them out.  In this case
it should print 100 records.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s check how to rewind &lt;code&gt;offsets&lt;/code&gt; in different scenarios. Consumer API has
add &lt;code&gt;#seek&lt;/code&gt; operations to achieve this behavior. I will show a naive way to use
these operations using flags but it shows the point:&lt;/p&gt;

&lt;h3 id=&#34;rewind-to-earliest-offset&#34;&gt;Rewind to earliest &lt;code&gt;offset&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The most common options is to go back to the beginning of the topic, that not
always will be &lt;code&gt;offset=0&lt;/code&gt;. This will depends on the &lt;code&gt;retention&lt;/code&gt; policy
option that will be clean up old records based on time or size; but
this also deserves its own post.&lt;/p&gt;

&lt;p&gt;To go to the beginning we can use &lt;code&gt;#seekToBeginning(topicPartition)&lt;/code&gt;
operation to go back to earliest offset:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;boolean&lt;/span&gt; flag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    ConsumerRecords&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; records &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;poll&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(100);&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;flag&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;seekToBeginning&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
            Stream&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; TopicPartition&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;topic-1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0)).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;toList&lt;span style=&#34;color: #666666&#34;&gt;()));&lt;/span&gt;
        flag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; records&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//Consume record&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the seek to beginnning is done, it will reprocess all records from
&lt;code&gt;topic=topic-1&lt;/code&gt; and &lt;code&gt;partition=0&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;rewind-to-specific-offset&#34;&gt;Rewind to specific &lt;code&gt;offset&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;If we can recognized the specific &lt;code&gt;record&lt;/code&gt; (by &lt;code&gt;partition&lt;/code&gt;)
from where we need to reprocess all the log,
we can use &lt;code&gt;#seek(topicPartition, offset)&lt;/code&gt; directly.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;boolean&lt;/span&gt; flag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    ConsumerRecords&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; records &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;poll&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(100);&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;flag&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;seek&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; TopicPartition&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;topic-1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0),&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;90);&lt;/span&gt;
        flag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; records&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
        System&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;offset = %d, key = %s, value = %s%n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, we will consume from &lt;code&gt;record&lt;/code&gt; with &lt;code&gt;offset=90&lt;/code&gt;from
&lt;code&gt;topic=topic-1&lt;/code&gt; and &lt;code&gt;partition=0&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;NOTE: It could be cumbersome to map all offsets in case that you have
several partitions. Thats why addition of timestamps helps a lot with this.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;rewind-to-offset-by-timestamps&#34;&gt;Rewind to offset by timestamps&lt;/h3&gt;

&lt;p&gt;What if you don&amp;rsquo;t know exactly the &lt;code&gt;offset id&lt;/code&gt; to go back to, but you know
you want to go back 1 hour or 10 min?&lt;/p&gt;

&lt;p&gt;For these, since release &lt;code&gt;0.10.1.0&lt;/code&gt;, there are a couple of
improvements &lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-32+-+Add+timestamps+to+Kafka+message&#34;&gt;[2]&lt;/a&gt;
&lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-33+-+Add+a+time+based+log+index&#34;&gt;[3]&lt;/a&gt;
were added and a new operation was added to &lt;code&gt;Kafka Consumer API&lt;/code&gt;: &lt;code&gt;#offsetsForTimes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is how to use it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;boolean&lt;/span&gt; flag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    ConsumerRecords&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; records &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;poll&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(100);&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;flag&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        Map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;TopicPartition&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Long&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; query &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        query&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; TopicPartition&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;simple-topic-1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0),&lt;/span&gt;
                Instant&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;minus&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(10,&lt;/span&gt; MINUTES&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;toEpochMilli&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;

        Map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;TopicPartition&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; OffsetAndTimestamp&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;offsetsForTimes&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;query&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

        result&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;entrySet&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;forEach&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;entry &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;seek&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;entry&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getKey&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; entry&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()));&lt;/span&gt;

        flag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; records&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
        System&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;offset = %d, key = %s, value = %s%n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, we are using a query first to get the offset inside a timestamp (10 minutes ago)
and then using that offset to go back with &lt;code&gt;#seek&lt;/code&gt; operation.&lt;/p&gt;

&lt;p&gt;As you can see, for each operation I have to define the specific &lt;code&gt;topic partition&lt;/code&gt;
to go back to, so this can get tricky if you have more than one partition, so I
would recommend to use &lt;code&gt;#offsetsForTimes&lt;/code&gt; in those cases to get an aligned result
and avoid inconsistencies in your consumers.&lt;/p&gt;

&lt;p&gt;In the source code, I&amp;rsquo;ve added the steps to get partitions by topic that will
help us to reproduce this steps when you have several topics.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.confluent.io/blog/data-reprocessing-with-kafka-streams-resetting-a-streams-application/&#34;&gt;https://www.confluent.io/blog/data-reprocessing-with-kafka-streams-resetting-a-streams-application/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-32+-+Add+timestamps+to+Kafka+message&#34;&gt;https://cwiki.apache.org/confluence/display/KAFKA/KIP-32+-+Add+timestamps+to+Kafka+message&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-33+-+Add+a+time+based+log+index&#34;&gt;https://cwiki.apache.org/confluence/display/KAFKA/KIP-33+-+Add+a+time+based+log+index&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/FAQ#FAQ-HowcanIrewindtheoffsetintheconsumer&#34;&gt;https://cwiki.apache.org/confluence/display/KAFKA/FAQ#FAQ-HowcanIrewindtheoffsetintheconsumer&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;</description>
        </item>
        
        <item>
            <title>Scaling Kafka with Docker Containers</title>
            <link>https://jeqo.github.io/post/2017-01-15-scale-kafka-containers/</link>
            <pubDate>Sun, 15 Jan 2017 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2017-01-15-scale-kafka-containers/</guid>
            <description>&lt;p&gt;In this post I will show how to use Docker containers to create and scale
a Kafka cluster, and also how to create, scale and move &lt;code&gt;topics&lt;/code&gt; inside
the cluster.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Repository: &lt;a href=&#34;https://github.com/jeqo/post-scale-kafka-containers&#34;&gt;https://github.com/jeqo/post-scale-kafka-containers&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;single-node-cluster&#34;&gt;Single-Node Cluster&lt;/h1&gt;

&lt;p&gt;First of all, let&amp;rsquo;s start with the most simple way to run Docker, that
could be useful for some development scenarios: &lt;strong&gt;Single-Node Cluster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apache Kafka architecture is based in 2 main components: The &lt;em&gt;Apache
Kafka server&lt;/em&gt; itself, and the &lt;em&gt;Apache Zookeeper server&lt;/em&gt; used for internal
coordination.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why a Kafka single-node cluster requires at least a
couple of processes.&lt;/p&gt;

&lt;p&gt;If we talk in Container terms and practices, these processes should be
run in 2 different containers.&lt;/p&gt;

&lt;p&gt;The easiest way to do this is defining these processes as
Docker Compose services is a &lt;code&gt;kafka-cluster/docker-compose.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I will use a couple of Docker images. These are fairly simple
and you can find their source code here:
&lt;a href=&#34;https://github.com/jeqo/docker-image-apache-kafka&#34;&gt;Apache Kafka&lt;/a&gt;,
&lt;a href=&#34;https://github.com/jeqo/docker-image-apache-zookeeper&#34;&gt;Apache Zookeeper&lt;/a&gt;, and
&lt;a href=&#34;https://github.com/jeqo/docker-image-confluent-platform&#34;&gt;Confluent Platform&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;version: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;2.1&amp;quot;&lt;/span&gt;
services:
  kafka:
    image: jeqo/apache-kafka:0.10.1.0-2.11
    links:
      - zookeeper
  zookeeper:
    image: jeqo/apache-zookeeper:3.4.8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This configuration defines 2 services: &lt;code&gt;kafka&lt;/code&gt; and &lt;code&gt;zookeeper&lt;/code&gt;. The &lt;code&gt;kafka&lt;/code&gt;
service &lt;code&gt;link&lt;/code&gt; and environment variable &lt;code&gt;ZOOKEEPER_CONNECT&lt;/code&gt; configure the access
from &lt;code&gt;kafka&lt;/code&gt; to &lt;code&gt;zookeeper&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;If we try to start these configuration with &lt;code&gt;docker-compose up -d&lt;/code&gt;,
Docker Compose will create a &lt;code&gt;network&lt;/code&gt; where these service can communicate.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;jeqo@jeqo-Oryx-Pro:.../single-node-kafka-cluster$ docker-compose up -d
Creating network &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;kafkacluster_default&amp;quot;&lt;/span&gt; with the default driver
Creating kafkacluster_zookeeper_1
Creating kafkacluster_kafka_1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to communicate with the cluster from your application&amp;rsquo;s
docker-compose configuration, you can do it as follows:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;version: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;2.1&amp;quot;&lt;/span&gt;
services:
  kafka:
    image: jeqo/apache-kafka-client:0.10.1.0-2.11
    command: sleep infinity
    networks:
      - default
      - kafkacluster_default &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;#(2)&lt;/span&gt;
networks: &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;#(1)&lt;/span&gt;
  kafkacluster_default:
    external: true
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we define first an &lt;code&gt;external network&lt;/code&gt; called &lt;code&gt;singlenodekafkacluster_default&lt;/code&gt;
that will give us access to the kafka cluster network. Then we add this network
to the service network.&lt;/p&gt;

&lt;p&gt;To test our client, start it up running &lt;code&gt;docker-compose up -d&lt;/code&gt; and then connect
to the cluster with the following command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose &lt;span style=&#34;color: #008000&#34;&gt;exec&lt;/span&gt; kafka bash
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# bin/kafka-console-producer.sh --broker-list kafka:9092 --topic topic1&lt;/span&gt;
&lt;span style=&#34;color: #008000&#34;&gt;test&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# bin/kafka-topics.sh --zookeeper zookeeper:2181 --list      &lt;/span&gt;
topic1
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;multi-node-cluster&#34;&gt;Multi-Node Cluster&lt;/h1&gt;

&lt;p&gt;To scale a container using Docker Compose is as simple as using the &lt;code&gt;scale&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;docker-compose scale &lt;span style=&#34;color: #19177C&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create 2 more containers:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose scale &lt;span style=&#34;color: #19177C&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;3
Creating and starting kafkacluster_kafka_2 ... &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;done&lt;/span&gt;
Creating and starting kafkacluster_kafka_3 ... &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You, as an application developer, only need to know one of the &lt;code&gt;broker&lt;/code&gt; IPs, or use the service
name to connect to the cluster. As the documentation specifies, the client (eg. producer or consumer)
will use it only once to get the Kafka &lt;code&gt;broker&lt;/code&gt; IPs from the same cluster. This means that
Kafka scaling will be transparent to your application.&lt;/p&gt;

&lt;p&gt;To validate that all brokers are part of the cluster let&amp;rsquo;s use Zookeeper client to check. From
client container:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ docker-compose &lt;span style=&#34;color: #008000&#34;&gt;exec&lt;/span&gt; kafka bash
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# bin/zookeeper-shell.sh zookeeper:2181&lt;/span&gt;
ls /brokers/ids
&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;1003, 1002, 1001&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;scaling-topics&#34;&gt;Scaling Topics&lt;/h1&gt;

&lt;p&gt;In Kafka, &lt;code&gt;Topics&lt;/code&gt; are distributed in &lt;code&gt;Partitions&lt;/code&gt;. &lt;code&gt;Partitions&lt;/code&gt; allows &lt;strong&gt;scalability&lt;/strong&gt;, enabling &lt;code&gt;Topics&lt;/code&gt;
to fit in several nodes, and &lt;strong&gt;parallelism&lt;/strong&gt;, allowing different instances from the same &lt;code&gt;Consumer Group&lt;/code&gt; to
consume messages in parallel.&lt;/p&gt;

&lt;p&gt;Apart from this, Kafka manage how this &lt;code&gt;Partitions&lt;/code&gt; are replicated, to achieve high availability. In
this case, if you have many &lt;code&gt;replicas&lt;/code&gt; from one &lt;code&gt;partition&lt;/code&gt;, one will be the &lt;code&gt;leader&lt;/code&gt; and there will
be zero o more &lt;code&gt;followers&lt;/code&gt; spread on different nodes.&lt;/p&gt;

&lt;p&gt;How do we configure this using this simple container configuration? Let&amp;rsquo;s evaluate some scenarios:&lt;/p&gt;

&lt;h2 id=&#34;adding-new-topics-to-the-cluster&#34;&gt;Adding new topics to the cluster&lt;/h2&gt;

&lt;p&gt;Once you scale your cluster, Kafka won&amp;rsquo;t use these new nodes unless new &lt;code&gt;topics&lt;/code&gt; are created.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s test it following these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start a single node cluster&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/9xzqgicktaqhzp1fofjk9ejgm.js&#34; id=&#34;asciicast-9xzqgicktaqhzp1fofjk9ejgm&#34; async&gt;&lt;/script&gt;

&lt;ol&gt;
&lt;li&gt;Then start client, create a topic &lt;code&gt;topic1&lt;/code&gt;, and describe the topic to check the broker&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/2schnuetb24mjx6txopew51hc.js&#34; id=&#34;asciicast-2schnuetb24mjx6txopew51hc&#34; async&gt;&lt;/script&gt;

&lt;ol&gt;
&lt;li&gt;Scale your cluster to 3 nodes&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/ahibdzz7xt67q53sc5ert6qdp.js&#34; id=&#34;asciicast-ahibdzz7xt67q53sc5ert6qdp&#34; async&gt;&lt;/script&gt;

&lt;ol&gt;
&lt;li&gt;Add topics to occupy other brokers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using multiple partitions:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/enq2czkpgdf0tbf3u6fwir3ml.js&#34; id=&#34;asciicast-enq2czkpgdf0tbf3u6fwir3ml&#34; async&gt;&lt;/script&gt;

&lt;p&gt;Or using a replication factor:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/f0u67h5ufiz4zkup84a1t8t5g.js&#34; id=&#34;asciicast-f0u67h5ufiz4zkup84a1t8t5g&#34; async&gt;&lt;/script&gt;

&lt;p&gt;To decide what &lt;code&gt;replication factor&lt;/code&gt; or how many &lt;code&gt;partitions&lt;/code&gt; to use, depends
on your use case. This deserves its own blog post.&lt;/p&gt;

&lt;h2 id=&#34;expanding-topics-in-your-cluster&#34;&gt;Expanding topics in your cluster&lt;/h2&gt;

&lt;p&gt;Expanding topics in your cluster means move &lt;code&gt;topics&lt;/code&gt; and &lt;code&gt;partitions&lt;/code&gt; once
you have more &lt;code&gt;brokers&lt;/code&gt; in your &lt;code&gt;cluster&lt;/code&gt;, because, as show before,
your new &lt;code&gt;brokers&lt;/code&gt; won&amp;rsquo;t store any data, once they are created, unless
you create new &lt;code&gt;topics&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can do this 3 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Identify which topics do you want to move.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate a candidate reassignment. This could be done automatically, or
you can decide how to redistribute your topics.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Execute your reassignment plan.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can do this following the documentation here: &lt;a href=&#34;http://kafka.apache.org/documentation/#basic_ops_cluster_expansion&#34;&gt;http://kafka.apache.org/documentation/#basic_ops_cluster_expansion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The steps described in the documentation are automated a bit with Ansible:&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;playbooks/prepare-reassignment.yml&lt;/code&gt; file you have 2 variables:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;vars:
  topics:
    - topic1
  broker_list: 1003
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will prepare a recipe to move your topic &lt;code&gt;topic1&lt;/code&gt; to &lt;code&gt;broker&lt;/code&gt; with id &lt;code&gt;1003&lt;/code&gt;.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/c6332x8t7yumpj65ie4qudgem.js&#34; id=&#34;asciicast-c6332x8t7yumpj65ie4qudgem&#34; async&gt;&lt;/script&gt;

&lt;p&gt;You can paste the JSON file generated into &lt;code&gt;playbooks/reassign-topic-plan.json&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;partitions&amp;quot;&lt;/span&gt;:[{&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;topic&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;topic1&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;partition&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;replicas&amp;quot;&lt;/span&gt;:[&lt;span style=&#34;color: #666666&#34;&gt;1003&lt;/span&gt;]}]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then run this plan with the another playbook: &lt;code&gt;playbooks/execute-reassignment.yml&lt;/code&gt;&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/99308.js&#34; id=&#34;asciicast-99308&#34; async&gt;&lt;/script&gt;

&lt;h1 id=&#34;confluent-platform-images&#34;&gt;Confluent Platform images&lt;/h1&gt;

&lt;p&gt;All these could be done in the same way with &lt;a href=&#34;https://www.confluent.io/&#34;&gt;Confluent Platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is a couple of directories &lt;code&gt;confluent-cluster&lt;/code&gt; and &lt;code&gt;confluent-client&lt;/code&gt; to test this out:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/a446bixdfn3l8xqoiolmsmlqg.js&#34; id=&#34;asciicast-a446bixdfn3l8xqoiolmsmlqg&#34; async&gt;&lt;/script&gt;

&lt;p&gt;Hope this post help you to understand Kafka &lt;code&gt;topics&lt;/code&gt; and how &lt;code&gt;containers&lt;/code&gt; can
help you to run clusters in seconds :)&lt;/p&gt;

&lt;p&gt;And, you know, run &amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;es&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;.&lt;a href=&#34;https://twitter.com/apachekafka&#34;&gt;@apachekafka&lt;/a&gt; everywhere :) &lt;a href=&#34;https://t.co/AcEmkRBCpv&#34;&gt;pic.twitter.com/AcEmkRBCpv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gwen (Chen) Shapira (@gwenshap) &lt;a href=&#34;https://twitter.com/gwenshap/status/777660752626851840&#34;&gt;19 de septiembre de 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Integrate Java EE 7 and Kafka using Avro and RxJava</title>
            <link>https://jeqo.github.io/post/2015-07-31-java-ee-rxjava-kafka-avro/</link>
            <pubDate>Fri, 31 Jul 2015 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2015-07-31-java-ee-rxjava-kafka-avro/</guid>
            <description>&lt;p&gt;I decided to implement a naive integration between Java EE applications and
RxJava/Kafka/Avro, to publish and subscribe to events.&lt;/p&gt;

&lt;p&gt;You can go directly to that &lt;a href=&#34;https://github.com/jeqo/java-ee-rxjava-kafka-avro&#34;&gt;code&lt;/a&gt;, or check my approach:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;I have been playing with &lt;a href=&#34;http://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt; recently, seduced by its benefits (fast, scalable,
and durable event source) to spread event using Publish/Subscribe pattern.&lt;/p&gt;

&lt;p&gt;I realized that Kafka APIs are still evolving and getting better, and it was not
easy to find an easy introduction related with the current released version.
I am using &lt;strong&gt;0.8.2.1 release&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I tested its APIs to &lt;em&gt;produce&lt;/em&gt; and &lt;em&gt;subscribe&lt;/em&gt; to messages using this &lt;a href=&#34;https://github.com/mdkhanga/my-blog-code&#34;&gt;tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kafka support 2 types of messages: &lt;em&gt;Strings&lt;/em&gt; and &lt;em&gt;byte[]&lt;/em&gt;. So, after testing sample
String messages, I required to send POJO as messages. I came out with
another interesting Apache project: &lt;a href=&#34;https://avro.apache.org&#34;&gt;Avro&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using Avro tutorials (&lt;a href=&#34;https://avro.apache.org/docs/current/gettingstartedjava.html&#34;&gt;https://avro.apache.org/docs/current/gettingstartedjava.html&lt;/a&gt;) and
another sources (&lt;a href=&#34;https://github.com/wpm/AvroExample&#34;&gt;https://github.com/wpm/AvroExample&lt;/a&gt;) I found how to Serialize/Deserialize POJO, but without
persisting files on disk, just keeping them as ByteStreams. So, now I have
Events, defined by &lt;a href=&#34;https://avro.apache.org/docs/current/spec.html#schema_record&#34;&gt;Avro schemas&lt;/a&gt;, and Kafka APIs ready to publish and subscribe
to these events.&lt;/p&gt;

&lt;p&gt;Finally, I wanted to add these cool features to my Java EE 7 apps. First,
using CDI was simple to inject Producer and publish messages when your application
produces events, but when it comes to consume events the approach is different.
You are no longer producing events, but working with &amp;ldquo;streams&amp;rdquo; of data. So, I
decided to use &lt;a href=&#34;https://github.com/ReactiveX/RxJava&#34;&gt;RxJava&lt;/a&gt; that applies concepts as
&lt;a href=&#34;http://reactivex.io/documentation/observable.html&#34;&gt;&lt;strong&gt;Observables&lt;/strong&gt;&lt;/a&gt; and &lt;strong&gt;Subscribers&lt;/strong&gt; that
fits smoothly with my requirements: each Kafka topic will be &amp;ldquo;observable&amp;rdquo; stream and each
Consumer will subscribe to that &amp;ldquo;observable&amp;rdquo;. Let&amp;rsquo;s check the code:&lt;/p&gt;

&lt;h2 id=&#34;sample-java-ee-app&#34;&gt;Sample Java EE App&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jeqo/java-ee-rxjava-kafka-avro/releases/tag/v0.0.1&#34;&gt;Tag: v0.0.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First step is just having a couple of RESTful services, implemented with JAX-RS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clients Resource: List (GET) and Add (POST) Clients&lt;/li&gt;
&lt;li&gt;Events Resource: List (GET) Client Added Events&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Path&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;clients&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ClientsResource&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; clients &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@GET&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Produces&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;MediaType&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;getClients&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; clients&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@POST&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;addClient&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String client&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        clients&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;client&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, Clients Resource is implemented. So, how can I do to propagate
ClientAddedEvent and list them on Events resource?&lt;/p&gt;

&lt;h2 id=&#34;serializing-and-deserializing-events&#34;&gt;Serializing and Deserializing Events&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jeqo/java-ee-rxjava-kafka-avro/releases/tag/v0.0.2&#34;&gt;Tag: v0.0.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I decided to use Kafka, I realized that I can only send String and Byte
Array messages, so Avro is able to serialize POJO into byte[] and vice versa:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    ClientAddedEvent event &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ClientAddedEvent&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;newBuilder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;jeqo&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setCreated&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getTime&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; eventSerialized &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; serializer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;serialize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;event&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    ClientAddedEvent eventDeserialized &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; deserializer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;deserialize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;eventSerialized&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    assertEquals&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;event&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; eventDeserialized&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ClientAddedEvent event is defined using Avro JSON format:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;namespace&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;com.jeqo.samples.eventsource.event&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;record&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;ClientAddedEvent&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;fields&amp;quot;&lt;/span&gt;: [
        {&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;},
        {&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;created&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;long&amp;quot;&lt;/span&gt;}
    ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adding a Maven Plugin, you will generate &lt;em&gt;ClientAddedEvent&lt;/em&gt; each time you build
your project:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.avro&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;avro-maven-plugin&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.7.7&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;generate-sources&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;schema&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;sourceDirectory&amp;gt;&lt;/span&gt;${project.basedir}/src/main/avro/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/sourceDirectory&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;outputDirectory&amp;gt;&lt;/span&gt;${project.basedir}/src/main/java/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To serialize Avro records, from POJO to Byte Array:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;EventSerializer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; SpecificRecordBase&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;serialize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;T record&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ByteArrayOutputStream out &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; ByteArrayOutputStream&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            Encoder encoder &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; EncoderFactory&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;binaryEncoder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;out&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SpecificDatumWriter&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSchema&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;record&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; encoder&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
            encoder&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;flush&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; out&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;toByteArray&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;IOException ex&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Error serializing event&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; ex&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And to deserialize:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;EventDeserializer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; SpecificRecordBase&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Class&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; type&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EventDeserializer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Class&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; type&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; type&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; T &lt;span style=&#34;color: #0000FF&#34;&gt;deserialize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; recordSerialized&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SpecificDatumReader&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;read&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                    DecoderFactory&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
                    &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;binaryDecoder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;recordSerialized&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;IOException ex&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Error deserializing event&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; ex&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;publishing-and-consuming-events-from-kafka-rxjava&#34;&gt;Publishing and Consuming Events from Kafka/RxJava&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jeqo/java-ee-rxjava-kafka-avro/releases/tag/v0.0.3&#34;&gt;Tag: v0.0.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that Event serialization is done with Avro, let&amp;rsquo;s publish and subscribe
those events on Kafka:&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s define a couple of interfaces, EventServer:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;EventServer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; Observable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;consume&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and EventProducer:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;EventProducer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;publish&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;T message&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, let&amp;rsquo;s implement them with Kafka. I will focus on main functionality first:&lt;/p&gt;

&lt;p&gt;To publish messages:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;publish&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;T message&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Produce a new Kafka record&lt;/span&gt;
    ProducerRecord&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; ProducerRecord&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
            message&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSimpleName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt;
            serializer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;serialize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;message&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Publish this new record, waiting for acknowledge from Kafka&lt;/span&gt;
    Future&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;RecordMetadata&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; rs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; producerProvider&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;producer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;send&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;RecordMetadata recordMetadata&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Exception e&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                LOGGER&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Level&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Received ack for partition={0} offset = {1}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Object&lt;span style=&#34;color: #666666&#34;&gt;[]{&lt;/span&gt;recordMetadata&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;partition&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; recordMetadata&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()});&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        RecordMetadata rm &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; rs&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

        LOGGER&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Level&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Kafka Record Metadata: partition = {0} offset ={1}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Object&lt;span style=&#34;color: #666666&#34;&gt;[]{&lt;/span&gt;rm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;partition&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; rm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()});&lt;/span&gt;

    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;InterruptedException &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; ExecutionException e&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And on KafkaEventServer, to instantiate an RxJava observable:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; Observable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;consume&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Observable&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;subscriber &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            LOGGER&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Level&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Preparing Server for Event {0}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; type&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// It will observe one Topic&lt;/span&gt;
            Map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Integer&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; topicCountMap &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            topicCountMap&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSimpleName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1);&lt;/span&gt;

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// consumerProvider will instantiate a consumer that will create a KafkaStream&lt;/span&gt;
            Map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;KafkaStream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[],&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; consumerMap
                    &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; consumerProvider&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;consumer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
                    &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;createMessageStreams&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;topicCountMap&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// then I will ask for the Stream from my topic, defined by Avro Record Class name&lt;/span&gt;
            List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;KafkaStream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[],&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&amp;gt;&amp;gt;&lt;/span&gt; streams &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; consumerMap
                    &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSimpleName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;

            KafkaStream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[],&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&amp;gt;&lt;/span&gt; stream &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; streams&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(0);&lt;/span&gt;

            ConsumerIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[],&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&amp;gt;&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; stream&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;iterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// on each message published on topic, I will let the subscriber receive the new message&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;it&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;hasNext&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                subscriber&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onNext&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
                        deserializer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;deserialize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;it&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Exception ex&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            subscriber&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onError&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ex&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could check *Provider class to validate how to generate a connection to Kafka
for both Publisher and Subscriber.&lt;/p&gt;

&lt;p&gt;On tag v0.0.3, you could run each class (KafkaEventServer and KafkaEventProducer)
to check that it&amp;rsquo;s working Ok with your Kafka server.&lt;/p&gt;

&lt;h2 id=&#34;putting-all-together&#34;&gt;Putting all together&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jeqo/java-ee-rxjava-kafka-avro/releases/tag/v0.1.0&#34;&gt;Tag: v0.1.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, let&amp;rsquo;s integrate this Event Sourcing engine with our Java EE app:&lt;/p&gt;

&lt;p&gt;First, create instantiate a publisher and a subscriber:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@ApplicationScoped&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ClientAddedEventProducer&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; KafkaEventProducer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ClientAddedEvent&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This means that ClientAddedEventProducer will be a &lt;em&gt;&amp;ldquo;singleton&amp;rdquo;&lt;/em&gt; and I could inject it
on my service that generates events:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ClientsResource&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Inject&lt;/span&gt;
    ClientAddedEventProducer eventProducer&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//code&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@POST&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;addClient&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String client&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        clients&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;client&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//Publishing events&lt;/span&gt;
        eventProducer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;publish&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
                ClientAddedEvent&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;newBuilder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;client&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setCreated&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getTime&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, instantiate a Subscriber (I think this is the most interesting part:
  how we will &lt;strong&gt;react&lt;/strong&gt; to events? ):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Extending Subscriber RxJava class to listen Observables&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF&#34;&gt;@ApplicationScoped&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ClientAddedEventSubscriber&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; Subscriber&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ClientAddedEvent&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Logger LOGGER &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Logger&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getLogger&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ClientAddedEventSubscriber&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// This will add a new thread to our pool, to subscribe to our Observable&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Resource&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;DefaultManagedExecutorService&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; ManagedExecutorService executor&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Inject&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; KafkaConsumerProvider consumerProvider&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; Subscription subscription&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Run this on server startup, using CDI annotations&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Observes&lt;/span&gt; &lt;span style=&#34;color: #AA22FF&#34;&gt;@Initialized&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ApplicationScoped&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; Object init&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        LOGGER&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Level&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Starting subscription&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        subscription &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; KafkaEventServer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
                ClientAddedEvent&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                consumerProvider&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                executor
        &lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;consume&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;subscribe&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;destroy&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Observes&lt;/span&gt; &lt;span style=&#34;color: #AA22FF&#34;&gt;@Destroyed&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ApplicationScoped&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; Object init&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        subscription&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;unsubscribe&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onCompleted&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Not supported yet.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onError&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Throwable e&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Not supported yet.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onNext&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ClientAddedEvent t&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        LOGGER&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Level&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Event received {0}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; t&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// How we will react to events:&lt;/span&gt;
        EventsResource&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;events&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Client Added: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; t&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot; at &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;t&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getCreated&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
        <item>
            <title>Book Review - Applied SOA Patterns on the Oracle Platform</title>
            <link>https://jeqo.github.io/post/2014-11-28-review-soa-patterns-oracle-platform/</link>
            <pubDate>Fri, 28 Nov 2014 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2014-11-28-review-soa-patterns-oracle-platform/</guid>
            <description>&lt;p&gt;I&amp;rsquo;ve had the opportunity to present a review of this book &lt;a href=&#34;https://www.packtpub.com/application-development/applied-soa-patterns-oracle-platform&#34;&gt;Applied SOA Patterns on the Oracle Platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Once I started to read the chapters, I found it quite interesting because of these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Great introduction to SOA  principles, and Oracle SOA Suite evolution&lt;/li&gt;
&lt;li&gt;Align AIA Concepts with SOA patterns&lt;/li&gt;
&lt;li&gt;A key topic for SOA success: Service Repository&lt;/li&gt;
&lt;li&gt;An extensive and complete description of Security and Error Handling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It looks like a really long book (572 pages), and it is. But this is justified because it takes a great approach from concepts to examples combined with experiences and source code. This could help you to feel more confident about your SOA design decisions.&lt;/p&gt;

&lt;h2 id=&#34;must-read-parts&#34;&gt;&amp;ldquo;Must Read&amp;rdquo; parts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 1 - SOA Frameworks&lt;/strong&gt;: I think these frameworks are quite important to apply on SOA design, for example: &lt;em&gt;Object and XML Modeling&lt;/em&gt;, if they are not designed well, could generate an implementation hell: huge and heavy data types, rare and indescribable names. Also gives an introduction to AIA that can give you a easy-to-learn guide about SOA layers, components, and common terms (Application Business Connector Services, Enterprise Business Flows and Services, and so on).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 2 - Oracle SOA Roadmap&lt;/strong&gt;: Owesome timeline about SOA Suite and related technologies. First time I found this information really well summarized. In general, this chapter makes a great technical specification about Oracle SOA Foundation: artifacts, technologies, code examples, specifications.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 3 - Oracle Enterprise Business Flow SOA Patterns&lt;/strong&gt;: Great distinction between BPEL and Mediator use cases, and I share the idea that telecommunications is a great industry to take examples about service orchestration.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 4&lt;/strong&gt;: This chapter contains really well explained tutorial: Implementing a basic Proxy on OSB is one of them, a Oracle E-Business Suite case turning a Message Broker into a Service Broker applying &amp;ldquo;Receive-Transform-Deliver&amp;rdquo; implementation pattern, and great examples about &amp;ldquo;VETRO&amp;rdquo; (or &amp;ldquo;VETO&amp;rdquo;) pattern on OSB: &lt;em&gt;Validate, Enrich, Transform and Operate&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 5&lt;/strong&gt;: A great &amp;ldquo;Getting-started&amp;rdquo; with SOA Governance using Oracle Enterprise Repository. &lt;em&gt;&amp;ldquo;Open standards for the SOA Taxonomy&amp;rdquo;, &amp;ldquo;Entity Types&amp;rdquo;&lt;/em&gt;, and &lt;em&gt;&amp;ldquo;Creating a lightweight taxonomy for dynamic service invocations&amp;rdquo;&lt;/em&gt; are definitely &lt;em&gt;must read&lt;/em&gt; parts: they include Service Discovery taxonomy, Entity relationships and how they impact in your architecture.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 6&lt;/strong&gt;: There is a note, on &amp;ldquo;Optimizing the Adapter Framework&amp;rdquo;, about SOAP and REST that you could find very interested, and I&amp;rsquo;m agree with it: &amp;ldquo;SOAP versus REST is a pointless discussion&amp;rdquo;. This is followed by a technical description of how to use different technologies like REST, JSON, EJB, DB Adapter, PL-SQL and Oracle XDK. &lt;em&gt;&amp;ldquo;After all, it doesn&amp;rsquo;t matter if it is modern or not, all that matters is if it works according to our principles or not. The color of the cat does not matter, as long as it catches the mice.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 7&lt;/strong&gt;:  &lt;em&gt;&amp;ldquo;Initial Analysis&amp;rdquo;&lt;/em&gt; including common SOA vulnerabilities and risks, and &lt;em&gt;&amp;ldquo;Risk mitigation design rules&amp;rdquo;&lt;/em&gt;, are all recommendations well explained and quite important in SOA projects.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 8&lt;/strong&gt; - Error-handling design rules is also a &amp;ldquo;must-read&amp;rdquo;: 15 rules related with OSB, BPEL, Enterprise Manager,  to follow and apply a right exception handling on your project. Follower by a technical approach first with JMX and SOA Composites.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 9&lt;/strong&gt;: This chapter includes an nice summary about Event Processing followed by a practitioner approach to implement CEP with Oracle Event Processing. Also includes 3 more important topics: High Availability with Coherence (How to integrated with OSB and CEP),  Monitoring Business Services with Oracle BAM ( How to use it from BPEL, JMS and Web Service API), and finally SOA as a Cloud Foundation (that&amp;rsquo;s where 12&amp;rdquo;c&amp;rdquo; comes from).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In conclusion you will find in this book a bunch of real experience aligned with SOA patterns and a mix of principles, frameworks, technical issues and product mapping. I believe you will find it very useful. You can find it &lt;a href=&#34;http://bit.ly/1uqK9dq&#34;&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;For me, this book will be my new handbook for comming SOA projects (with &lt;a href=&#34;http://www.oracle.com/technetwork/topics/entarch/itso-165161.html&#34;&gt;IT Strategies from Oracle&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you have comments about this book, please share! :)&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
