<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on @jeqo</title>
    <link>https://jeqo.github.io/notes/</link>
    <description>Recent content in Notes on @jeqo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright @jeqo</copyright>
    <lastBuildDate>Thu, 31 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jeqo.github.io/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Co-evolving Tracing and Fault Injection with Box of Pain</title>
      <link>https://jeqo.github.io/notes/co-evolving-tracing-and-fault-injection/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/co-evolving-tracing-and-fault-injection/</guid>
      <description>This paper explores how related tracing and fault injection systems are, and if they should be part of the same thing.
 The space of possible executions of a distributed system is exponential in the number of communicating precesses and the number of messages, [&amp;hellip;]
  [&amp;hellip;] some of the most pernicious bugs in distributed programs involve mistakes on how programs handle partial failure of remote components.
 In order to expose this failures, fault injection mechanisms are used to cause network partitions, or machine crashes.</description>
    </item>
    
    <item>
      <title>Kafka, Samza and the Unix Philosophy of Distributed Data</title>
      <link>https://jeqo.github.io/notes/kafka-samza-and-the-unix-philosophy-of-distributed-data/</link>
      <pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/kafka-samza-and-the-unix-philosophy-of-distributed-data/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Designing Data-Intensive Applications</title>
      <link>https://jeqo.github.io/notes/designing-data-intensive-application/</link>
      <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/designing-data-intensive-application/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Distributed Systems</title>
      <link>https://jeqo.github.io/notes/distributed-systems/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/distributed-systems/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Event-Driven Architecture</title>
      <link>https://jeqo.github.io/notes/event-driven-architecture/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/event-driven-architecture/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data on the Outside vs Data on the Inside</title>
      <link>https://jeqo.github.io/notes/data-on-the-outside-vs-data-on-the-inside/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/data-on-the-outside-vs-data-on-the-inside/</guid>
      <description>&lt;p&gt;I found this paper as relevant and accurate today as it was in 2005, when it was published.
It is fascinating how even 12 years later and with new technologies in vogue,
same concepts keep applying.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Apache Kafka</title>
      <link>https://jeqo.github.io/notes/apache-kafka/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/apache-kafka/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Apache Kafka</title>
      <link>https://jeqo.github.io/notes/reactive-streams/</link>
      <pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/reactive-streams/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Observability</title>
      <link>https://jeqo.github.io/notes/observability/</link>
      <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/observability/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jeqo.github.io/notes/one-size-fits-all-an-idea-whose-time-has-come-and-gone-es/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/one-size-fits-all-an-idea-whose-time-has-come-and-gone-es/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://jeqo.github.io/notes/one-size-fits-all-an-idea-whose-time-has-come-and-gone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/one-size-fits-all-an-idea-whose-time-has-come-and-gone/</guid>
      <description>[1] ‘One Size Fits All’: An Idea Whose Time Has Come and Gone - April 2005
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.68.9136&amp;amp;rep=rep1&amp;amp;type=pdf
Initial Database players: DB2 and INGRESS (around 1980&amp;rsquo;s), following vendors: Sybase, Oracle and Informix.
The initial DBMS model: store relational tables row-by-row, uses B-trees for indexing, uses a cost-based optimized, and provides ACID transaction properties.
 It is a well known homily that warehouse applications run much better using bit-map indexes while OLTP users prefer B-tree indexes.</description>
    </item>
    
  </channel>
</rss>