<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drafts on @jeqo</title>
    <link>https://jeqo.github.io/drafts/</link>
    <description>Recent content in Drafts on @jeqo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright @jeqo</copyright>
    <lastBuildDate>Mon, 18 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jeqo.github.io/drafts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>KIP: Allow Kafka Streams State Stores to iterate backwards</title>
      <link>https://jeqo.github.io/drafts/kip-allow-state-stores-to-iterate-backwards/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/drafts/kip-allow-state-stores-to-iterate-backwards/</guid>
      <description>Motivation Fetching range of results from Kafka Streams state stores comes with a default iterator to traverse elements from oldest to newest, e.g ReadOnlyWindowStore#fetch(K key, long fromTime, long toTime) mentions:
 For each key, the iterator guarantees ordering of windows, starting from the oldest/earliest&amp;rdquo;
 Similar guarantees are provided on other fetch and range operations.
This constraints the usage of local state store on some use cases:
When storing windows of records, and an operation wants to return the last N values inserted withing a time range with M records: currently there is no option other than iterating from oldest to newest, traversing M records; where M &amp;raquo; N.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jeqo.github.io/drafts/kip-move-streams-resetter-to-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/drafts/kip-move-streams-resetter-to-tools/</guid>
      <description>KIP: Move Streams Resetter Tool from core to tools module Motivation Proposed Changes Compatibilily, Deprecation, and Migration Plan </description>
    </item>
    
  </channel>
</rss>