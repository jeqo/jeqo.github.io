<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0">
    <channel>
        <title>Jorge Quilcate Otoya on @jeqo</title>
        <generator uri="https://gohugo.io">Hugo</generator>
        <link>https://jeqo.github.io/tags/ansible/index.xml</link>
        <language>en-us</language>
        <author>Jorge Quilcate Otoya</author>
        
        <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
        
        <item>
            <title>Speed up your Oracle Database provisioning with Docker and Ansible</title>
            <link>https://jeqo.github.io/post/2016-05-26-speed-up-oracle-database-provisioning-ansible-docker/</link>
            <pubDate>Thu, 26 May 2016 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2016-05-26-speed-up-oracle-database-provisioning-ansible-docker/</guid>
            <description>&lt;p&gt;Warming up before &lt;a href=&#34;http://www.amis-conference.com/Program&#34;&gt;AMIS 25th Conference&lt;/a&gt;
event where I will be presenting with my friend
and colleague Arturo Viveros (@gugalnikov)
&lt;a href=&#34;http://www.amis-conference.com/Session-Catalog#session1168&#34;&gt;about Oracle SOA Suite provisioning&lt;/a&gt;,
I want to share some practices that help us to provide Oracle Database instances
between developers and improve our productivity.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Since I started working with Oracle technologies, almost 7 years ago, provide
Oracle Database instances has been always a &lt;em&gt;not so easy&lt;/em&gt; process. It demands
configuring the operating system with the right packages and kernel params,
then prepare user and groups, and after that install the Database engine.
Once you have your engine installed, you can start creating database instances.&lt;/p&gt;

&lt;p&gt;Now that you have a running Database instance, you are able to
start your database development: creating schemas, running SQL scripts,
and connect your applications to store data.&lt;/p&gt;

&lt;p&gt;So, should I repeat this process on each developer workstation?&lt;/p&gt;

&lt;p&gt;There are several options to improve this process: share one database between
all developers, creating and share a VM image between developers, or
actually use an automation tool like Vagrant and Packer to create images,
or just provide the installation automated a tool like Puppet/Chef.&lt;/p&gt;

&lt;p&gt;I will share how we are doing it now in a current project using Docker
as Container platform, and Ansible as our automation tool.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get started&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;defining-the-process&#34;&gt;Defining the process&lt;/h1&gt;

&lt;p&gt;After several months working with automation tools, I understand a key principle
about automate provisioning: &lt;strong&gt;&amp;ldquo;divide and conquer&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Because provision some type of systems is not always a simple process as:
&lt;em&gt;download, unzip and run&lt;/em&gt;, in some cases you need to define your
provisioning process in steps, so you can define this steps as checkpoints,
and don&amp;rsquo;t get bored re-running process from scratch. I mean: from configuring
your OS for running Oracle Database to actually run your SQL scripts is a
long way right? Even if you automate it or do it manually.&lt;/p&gt;

&lt;p&gt;In this case, as I explained before, we have 3 major steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prepare your OS and install database software&lt;/li&gt;
&lt;li&gt;Create database instance&lt;/li&gt;
&lt;li&gt;Run scripts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And each step will become a checkpoint, i.e. a Docker image.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t go into every detail about installing Oracle Database, because there
are plenty information about this. At Sysco, we have developed several
Ansible roles to automate installation and configuration of Oracle software:
&lt;a href=&#34;http://github.com/sysco-middleware&#34;&gt;http://github.com/sysco-middleware&lt;/a&gt;. Therefore, I will cover only how do we
separate this process into steps using Docker and Ansible.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you need to check more about how Docker integrates with Ansible,
take a lot to my previous post:
&lt;a href=&#34;http://jeqo.github.io/blog/devops/ansible-agentless-provisioning/&#34;&gt;http://jeqo.github.io/blog/devops/ansible-agentless-provisioning/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;step-1-install-oracle-database&#34;&gt;Step 1: Install Oracle Database&lt;/h1&gt;

&lt;p&gt;Go to the first repository called: docker-image-oracle-database
&lt;a href=&#34;http://github.com/sysco-middleware/docker-image-oracle-database&#34;&gt;http://github.com/sysco-middleware/docker-image-oracle-database&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is how we create an image with Oracle Database 11g (or 12c) installed
using Ansible:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;- hosts: 127.0.0.1 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# &amp;gt;&amp;gt;&amp;gt; (1)&lt;/span&gt;
  connection: local
  vars_files:
    - vars/main.yml
  tasks:
    - name: create container
      docker:
        name: tmp-oracle-database
        image: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{{&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;base_image&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;}}&amp;quot;&lt;/span&gt;
        command: sleep infinity
        volumes:
          - &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/installers/oracle/db/11.2/database/11.2.0.4:/srv/files&amp;quot;&lt;/span&gt;
        state: started

    - add_host:
        name: tmp-oracle-database
        groups: docker
        ansible_connection: docker

- hosts: tmp-oracle-database &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# &amp;gt;&amp;gt;&amp;gt; (2)&lt;/span&gt;
  connection: docker
  roles:
    - role: sysco-middleware.oracle-database
      oracle_database_version: 11g
      oracle_database_edition: SE
      oracle_database_installer: /srv/files/database/runInstaller

- hosts: 127.0.0.1 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# &amp;gt;&amp;gt;&amp;gt; (3)&lt;/span&gt;
  connection: local
  vars_files:
    - vars/main.yml
  tasks:
    - name: docker commit
      command: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;docker&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;commit&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;tmp-oracle-database&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;image_name&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;}}:{{&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;}}&amp;quot;&lt;/span&gt;
      with_items: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{{&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;tags&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;}}&amp;quot;&lt;/span&gt;

    - name: docker kill
      command: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;docker&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;kill&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;tmp-oracle-database&amp;quot;&lt;/span&gt;

    - name: docker rm
      command: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;docker&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;rm&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;tmp-oracle-database&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have 3 main steps here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First we create the containers using a variable that contains the base
image: &amp;ldquo;syscomiddleware/oraclelinux:6.7&amp;rdquo; that is based in Oracle Linux official
image, with some packages installed. And then we add the running docker container
as an Ansible host.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Second, we connect to the running docker container, and run our
Oracle Database role (&lt;a href=&#34;https://github.com/sysco-middleware/ansible-role-oracle-database&#34;&gt;https://github.com/sysco-middleware/ansible-role-oracle-database&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally, after installing Oracle database software, I create a checkpoint:
commit container as an image, kill and remove running container, and
optionally (and if you have a private repository) push your image.
(check this issue about sharing
Oracle software inside container images:
&lt;a href=&#34;https://github.com/oracle/docker-images/issues/97)&#34;&gt;https://github.com/oracle/docker-images/issues/97)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To run this process you just need:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ansible-playbook main.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To check that our &amp;ldquo;oracle-database&amp;rdquo; image is created successfully, just run&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ docker images
REPOSITORY                        TAG                    IMAGE ID            CREATED             SIZE
syscomiddleware/oracle-database   oraclelinux-11.2.0.4   15eb5554debd        &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; hours ago         6.301 GB
syscomiddleware/oracle-database   latest                 ab59ccd81cba        &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; hours ago         6.301 GB 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The main goal here is that we have a checkpoint that represents a container
with Database engine installed. This is a unique image that can be reused to
move forward.&lt;/p&gt;

&lt;h1 id=&#34;step-2-create-database-instance&#34;&gt;Step 2: Create database instance&lt;/h1&gt;

&lt;p&gt;Once we have the Oracle Database image, we won&amp;rsquo;t have to reinstall it again! :)
&amp;hellip;as far as we keep using Docker and at least until we find out how to
improve the installation process.&lt;/p&gt;

&lt;p&gt;So, we can move forward from this point up to the next stage: create a database
instance.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s go and checkout this repository:
&lt;a href=&#34;https://github.com/sysco-middleware/docker-image-oracle-database-instance&#34;&gt;https://github.com/sysco-middleware/docker-image-oracle-database-instance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we follow the same approach as previous step: prepare temporal containers,
run Ansible roles and commit image.&lt;/p&gt;

&lt;p&gt;You can check the main.yml file here: &lt;a href=&#34;https://github.com/sysco-middleware/docker-image-oracle-database-instance/blob/master/main.yml&#34;&gt;https://github.com/sysco-middleware/docker-image-oracle-database-instance/blob/master/main.yml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And as you see, we are using another Ansible role called &amp;ldquo;oracle-database-instance&amp;rdquo;
that is used to create an instance and prepare listener:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;- hosts: tmp-oracle-db-instance
  connection: docker
  roles:
    - role: sysco-middleware.oracle-database-instance
      oracle_database_version: 11g
      oracle_database_sid: orcl
      oracle_database_global_name: orcl
      oracle_database_template_name: General_Purpose.dbc
      oracle_database_admin_password: welcome1
      oracle_database_auto_memory_mgnt: TRUE
      oracle_database_memory_percentage: 80
      oracle_database_memory_total: 1024
      oracle_database_type: MULTIPURPOSE
      oracle_database_listener_name: LISTENER
      oracle_database_listener_port: 1521
      oracle_database_init_params: JAVA_JIT_ENABLED=FALSE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After running this Ansible playbook, we will have a new image called:
&lt;em&gt;oracle-database-instance&lt;/em&gt; tagged with its corresponding OS and version.&lt;/p&gt;

&lt;p&gt;But this process is a little bit different from previous case:
As you can see in this main.yml file, there is an additional step:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;- name: build image
  command: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;docker&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;-t&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;image_name&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;docker&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is an important step, because it involves the usage of Dockerfile to
prepare a Docker image.&lt;/p&gt;

&lt;p&gt;To give a small background about this: Docker is prepared to isolate
process and files, and by convention you should run only 1 process by
container. To define this process, you will use a Dockerfile to specify
which command should be run, and this process should persist over time, because
if it ends, your container will be stopped.&lt;/p&gt;

&lt;p&gt;In our case, we need to start our database instance. And to do this we will use a
Dockerfile. But, as you know, we don&amp;rsquo;t have a out-of-the-box script that starts
the instance and keep this process alive and printing logging messages.
But we can create something similar:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;LISTENERS_ORA&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$ORACLE_HOME&lt;/span&gt;/network/admin/listener.ora

cp &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;LISTENERS_ORA&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;.tmpl&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$LISTENERS_ORA&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
sed -i &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;s/%hostname%/&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$HOSTNAME&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;/g&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;LISTENERS_ORA&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
sed -i &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;s/%port%/1521/g&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;LISTENERS_ORA&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
bin/lsnrctl start &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
bin/dbstart &lt;span style=&#34;color: #19177C&#34;&gt;$ORACLE_HOME&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Thanks to GitHub user &amp;ldquo;wnameless&amp;rdquo; that share how to do this in its Docke Image
for Oracle XE: &lt;a href=&#34;https://github.com/wnameless/docker-oracle-xe-11g&#34;&gt;https://github.com/wnameless/docker-oracle-xe-11g&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here, we not only start and read a log file, but update our listener file. Why?
Because, also by convention, every time a container starts, container&amp;rsquo;s hostname
gets updated.
So, to keep our database instance consistent, we have to update our listener.ora accordingly.&lt;/p&gt;

&lt;p&gt;Here is our Dockerfile:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;FROM tmp&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;oracle&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;db&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;instance

MAINTAINER Jorge Quilcate &amp;lt;jorge.quilcate&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;@&lt;/span&gt;sysco.no&amp;gt;

USER oracle

ENV ORACLE_HOME &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;home&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;oracle&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;product&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;oracle_home
ENV ORACLE_SID orcl

WORKDIR &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;ORACLE_HOME

ADD listener.ora.tmpl network&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;admin&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;listener.ora.tmpl
ADD startup.sh .

CMD sh startup.sh &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tail &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;f startup.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, I start the process and tail the startup log file to keep our
container running.&lt;/p&gt;

&lt;p&gt;And each time we want to run this image, this process will be executed, unless
you override it in your &lt;em&gt;&amp;ldquo;docker run&amp;rdquo;&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;You can test this image by running:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ docker run -it syscomiddleware/oracle-database-instance:oraclelinux-11.2.0.4 
LSNRCTL &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; Linux: Version 11.2.0.4.0 - Production on 25-MAY-2016 17:00:37

Copyright &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;c&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; 1991, 2013, Oracle.  All rights reserved.

Starting /home/oracle/product/oracle_home/bin/tnslsnr: please wait...

TNSLSNR &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; Linux: Version 11.2.0.4.0 - Production
System parameter file is /home/oracle/product/oracle_home/network/admin/listener.ora
Log messages written to /home/oracle/product/diag/tnslsnr/02b9ae1e3ab1/listener/alert/log.xml
Listening on: &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;ADDRESS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;PROTOCOL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;ipc&lt;span style=&#34;color: #666666&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;KEY&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;EXTPROC1521&lt;span style=&#34;color: #666666&#34;&gt;)))&lt;/span&gt;
Listening on: &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;ADDRESS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;PROTOCOL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;tcp&lt;span style=&#34;color: #666666&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;HOST&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;02b9ae1e3ab1&lt;span style=&#34;color: #666666&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;PORT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;1521&lt;span style=&#34;color: #666666&#34;&gt;)))&lt;/span&gt;

Connecting to &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;ADDRESS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;PROTOCOL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;IPC&lt;span style=&#34;color: #666666&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;KEY&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;EXTPROC1521&lt;span style=&#34;color: #666666&#34;&gt;)))&lt;/span&gt;
STATUS of the LISTENER
------------------------
Alias                     LISTENER
Version                   TNSLSNR &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; Linux: Version 11.2.0.4.0 - Production
Start Date                25-MAY-2016 17:00:42
Uptime                    &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; days &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; hr. &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; min. &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; sec
Trace Level               off
Security                  ON: Local OS Authentication
SNMP                      OFF
Listener Parameter File   /home/oracle/product/oracle_home/network/admin/listener.ora
Listener Log File         /home/oracle/product/diag/tnslsnr/02b9ae1e3ab1/listener/alert/log.xml
Listening Endpoints Summary...
  &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;ADDRESS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;PROTOCOL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;ipc&lt;span style=&#34;color: #666666&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;KEY&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;EXTPROC1521&lt;span style=&#34;color: #666666&#34;&gt;)))&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;ADDRESS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;PROTOCOL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;tcp&lt;span style=&#34;color: #666666&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;HOST&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;02b9ae1e3ab1&lt;span style=&#34;color: #666666&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;PORT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;1521&lt;span style=&#34;color: #666666&#34;&gt;)))&lt;/span&gt;
The listener supports no services
The &lt;span style=&#34;color: #008000&#34;&gt;command&lt;/span&gt; completed successfully
Processing Database instance &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;orcl&amp;quot;&lt;/span&gt;: log file /home/oracle/product/oracle_home/startup.log
Total System Global Area  &lt;span style=&#34;color: #666666&#34;&gt;801701888&lt;/span&gt; bytes
Fixed Size		    &lt;span style=&#34;color: #666666&#34;&gt;2257520&lt;/span&gt; bytes
Variable Size		  &lt;span style=&#34;color: #666666&#34;&gt;276827536&lt;/span&gt; bytes
Database Buffers	  &lt;span style=&#34;color: #666666&#34;&gt;515899392&lt;/span&gt; bytes
Redo Buffers		    &lt;span style=&#34;color: #666666&#34;&gt;6717440&lt;/span&gt; bytes
Database mounted.
Database opened.
SQL&amp;gt; Disconnected from Oracle Database 11g Release 11.2.0.4.0 - 64bit Production

bin/dbstart: Database instance &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;orcl&amp;quot;&lt;/span&gt; warm started.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From other terminal you can check container name and inspect for its IP address:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ docker ps
CONTAINER ID        IMAGE                                      COMMAND                  CREATED              STATUS              PORTS               NAMES
21713e2f2c59        syscomiddleware/oracle-database-instance   &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/bin/sh -c &amp;#39;sh start&amp;quot;&lt;/span&gt;   About a minute ago   Up About a minute                       adoring_yalow
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a minute to understand the process: We will have images by steps
from our provisioning process, and each step can be tagged by version and OS
(and any other relevant information). This will create a group of images that
will be reusable, and if we have issues, we can identify and solve specific
tasks, instead of re-run everything from scratch.&lt;/p&gt;

&lt;p&gt;As learning any other technology, this will take some time at the beginning
of the process, but as we understand and collaborate to improve this images,
it will worth our effort.&lt;/p&gt;

&lt;p&gt;First, you can see that a container name is assigned randomly: &amp;ldquo;adoring_yalow&amp;rdquo;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ docker inspect adoring_yalow
...
&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Networks&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;bridge&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;IPAMConfig&amp;quot;&lt;/span&gt;: null,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Links&amp;quot;&lt;/span&gt;: null,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Aliases&amp;quot;&lt;/span&gt;: null,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;NetworkID&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;c72c01d764b3aa7f30ffa220ed91a15aa1bb2f7c3396008601cc0137512612cb&amp;quot;&lt;/span&gt;,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;EndpointID&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;ea1e3277916bcebaa6fbba42ab6cdea6ebd597a2ce20c274b415f4ad89f05bee&amp;quot;&lt;/span&gt;,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Gateway&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;172.17.0.1&amp;quot;&lt;/span&gt;,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;172.17.0.2&amp;quot;&lt;/span&gt;,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;IPPrefixLen&amp;quot;&lt;/span&gt;: 16,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;IPv6Gateway&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;GlobalIPv6Address&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;GlobalIPv6PrefixLen&amp;quot;&lt;/span&gt;: 0,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;MacAddress&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;02:42:ac:11:00:02&amp;quot;&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And test to connect from your favorite IDE using a JDBC URL like:&lt;/p&gt;

&lt;p&gt;jdbc:oracle:thin:@172.17.0.2:1521:orcl&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jeqo.github.io/images/2016-05-24-speed-up-oracle-database-provisioning-ansible-docker/jdbc-test.png&#34; alt=&#34;NetBeans JDBC Connection&#34; title=&#34;NetBeans JDBC Connection&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;step-3-run-sql-scripts&#34;&gt;Step 3: Run SQL scripts&lt;/h1&gt;

&lt;p&gt;This is a more &amp;ldquo;custom&amp;rdquo; step as you can use now use this images for different
purposes (e.g: create a schema, run SQL scripts, add more configurations, or
if you are working with Fusion Middleware products, you can create RCU schemas).&lt;/p&gt;

&lt;p&gt;Depending on your use-case it will be easier, or more efective, to use
Dockerfile than Ansible playbooks.&lt;/p&gt;

&lt;p&gt;In this case, I will show you how to create an schema to start your Java
application development, for instance.&lt;/p&gt;

&lt;p&gt;I will recommend you to use Docker Compose (&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;https://docs.docker.com/compose/&lt;/a&gt;)
just to simplify the execution of Docker command, and link containers together.&lt;/p&gt;

&lt;p&gt;I have created a repository (&lt;a href=&#34;https://github.com/jeqo/post-oracle-database-docker&#34;&gt;https://github.com/jeqo/post-oracle-database-docker&lt;/a&gt;)
to host this sample.&lt;/p&gt;

&lt;p&gt;You can check that there is a directory called &amp;ldquo;sample&amp;rdquo; that will be assumed as
the &lt;em&gt;project name&lt;/em&gt; by Docker Compose.&lt;/p&gt;

&lt;p&gt;Inside is a file called &amp;ldquo;docker-compose.yml&amp;rdquo; that defines &lt;em&gt;container services&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;version: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  db:
    build: db
    ports:
      - &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;10521:1521&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, it defines a service (a container), that will be built from
a Dockerfile inside a &amp;ldquo;db&amp;rdquo; directory, and will forward its 1521 port
to your hosts port 10521, so you can use it from a local application.&lt;/p&gt;

&lt;p&gt;This Dockerfile contains instructions to create an schema called &amp;ldquo;test&amp;rdquo;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;FROM syscomiddleware&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;oracle&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;database&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;instance:oraclelinux&lt;span style=&#34;color: #666666&#34;&gt;-11.2.0.4&lt;/span&gt;

MAINTAINER Jorge Quilcate &amp;lt;jorge.quilcate&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;@&lt;/span&gt;sysco.no&amp;gt;

ADD create&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;schema.sql .

RUN sh startup.sh &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    while ! grep &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;bin/dbstart: Database instance \&amp;quot;orcl\&amp;quot; warm started.&amp;quot;&lt;/span&gt; startup.log; do sleep &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; done &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    echo exit | bin&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;sqlplus system&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;welcome1 &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;@&lt;/span&gt;create&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;schema.sql

CMD sh startup.sh &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    tail &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;f startup.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, just execute &amp;ldquo;docker-compose up -d&amp;rdquo; and this container will be built and
started.&lt;/p&gt;

&lt;p&gt;To check its execution, run &amp;ldquo;docker-compose logs -f&amp;rdquo; and that&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;You can customize your Docker Compose file, or just start building more layers on
top of the database instance image.&lt;/p&gt;

&lt;p&gt;At AMIS25, we will show how to use this instance to build a SOA Suite database
and then provide customs SOA Suite Domains, but also show different experiences
with different &amp;ldquo;DevOps&amp;rdquo; technologies. Hope to see you there!&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Ansible - an agentless provisioning</title>
            <link>https://jeqo.github.io/post/2016-03-30-ansible-agentless-provisioning/</link>
            <pubDate>Wed, 30 Mar 2016 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2016-03-30-ansible-agentless-provisioning/</guid>
            <description>&lt;p&gt;Ansible is an automation tool that is recognized for be simple and
powerful at the same time. From my experience, I can say this is mainly
because of its scripting language: YAML, and its agentless architecture.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;yaml-and-ansible-components&#34;&gt;YAML and Ansible components&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;YAML is a human friendly data serialization standard for all programming
  languages&amp;rdquo; (Source: &lt;a href=&#34;http://yaml.org/&#34;&gt;http://yaml.org/&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that is actually really easy to understand and start working
with it. For example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;- hosts: webserver
  tasks:
    - package: apache
        state: latest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This &lt;strong&gt;&amp;ldquo;playbook&amp;rdquo;&lt;/strong&gt; says that a &lt;em&gt;webserver&lt;/em&gt; host have 1 task: install latest
Apache package, using a package &lt;strong&gt;&amp;ldquo;module&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Pretty simple eh?&lt;/p&gt;

&lt;p&gt;To check how powerful Ansible can be, take a look on their Module Index:
&lt;a href=&#34;http://docs.ansible.com/ansible/modules_by_category.html&#34;&gt;http://docs.ansible.com/ansible/modules_by_category.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To achieve reusability: These tasks can be grouped
as &lt;strong&gt;&amp;ldquo;roles&amp;rdquo;&lt;/strong&gt;, that are a compilation of tasks
to execute a common goal. e.g: a Java role to install Java SDK on your
node.&lt;/p&gt;

&lt;p&gt;Those are the main components of Ansible: Playbooks, Modules, and Roles.&lt;/p&gt;

&lt;h2 id=&#34;agentless-architecture&#34;&gt;Agentless architecture&lt;/h2&gt;

&lt;p&gt;This means that you don&amp;rsquo;t need a &amp;ldquo;ansible-client&amp;rdquo; in your node to run
tasks, you can have a master that says what you need to run on your nodes.
This is an important feature compared to other tools where
you need a &amp;ldquo;***-client&amp;rdquo; to make your node translate and run commands:
&lt;a href=&#34;https://www.ansible.com/benefits-of-agentless-architecture&#34;&gt;https://www.ansible.com/benefits-of-agentless-architecture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t need a client but you need some packages. But this packages
are ssh and python-related and they are very common:
&lt;a href=&#34;http://docs.ansible.com/ansible/intro_installation.html#managed-node-requirements&#34;&gt;http://docs.ansible.com/ansible/intro_installation.html#managed-node-requirements&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ansible also have a default &amp;ldquo;push&amp;rdquo; approach, where a master sends commands
to your nodes. This is also different from other tools that are based on a
&amp;ldquo;pull&amp;rdquo; approach, where the node asks for commands, although this is also
possible with Ansible:
&lt;a href=&#34;http://docs.ansible.com/ansible/playbooks_intro.html#ansible-pull&#34;&gt;http://docs.ansible.com/ansible/playbooks_intro.html#ansible-pull&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a final feature I would like to mention: Connection Type.
By default Ansible relies on SSH to send commands to your nodes, but
there are cases where SSH is not an option or you don&amp;rsquo;t need it:
local commands, Windows, Docker.&lt;/p&gt;

&lt;p&gt;In these cases, connection type option enables your playbook to run
commands using WinRM in the case of Windows,
or Docker execute commands on Docker containers, or just run local
commands in your workstation.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check some code:&lt;/p&gt;

&lt;p&gt;I have implemented a Ansible Role to install Java some time ago:
&lt;a href=&#34;https://github.com/jeqo/ansible-role-java&#34;&gt;https://github.com/jeqo/ansible-role-java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just to explain what it does, let&amp;rsquo;s check the main task file:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  - debug:
      msg: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;This&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;Java&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;Provider&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;will&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;be&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;installed:&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;java_provider&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;}}&amp;quot;&lt;/span&gt;

  - include: install-{{ java_provider }}.yml

  - include: set-java-home.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will show a message, include a task depending on &amp;ldquo;java_provider&amp;rdquo;
variable and finally set JAVA_HOME variable.&lt;/p&gt;

&lt;p&gt;Also this role has a &amp;ldquo;tests&amp;rdquo; directory where you can add playbooks
to test your role:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;- name: test install openjdk jdk 8 on centos 7
  hosts: test01
  roles:
    - role: java
      java_provider: openjdk
      java_version: 8
      java_type: jdk
- name: test install openjdk jre 8 on centos 7
  hosts: test02
  roles:
    - role: java
      java_provider: openjdk
      java_version: 8
      java_type: jre
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# more tests...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And I test this playbooks using Vagrant and VirtualBox:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #880000&#34;&gt;Vagrant&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;configure(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;config&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;

  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;provision &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;ansible&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;ansible&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
    ansible&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;playbook &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;test.yml&amp;quot;&lt;/span&gt;
    ansible&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;galaxy_role_file &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;roles.yml&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;

  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;define &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;test01&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;node&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
    node&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;box &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;jeqo/ansible-centos7&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;

  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;define &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;test02&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;node&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
    node&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;box &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;jeqo/ansible-centos7&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# more test nodes...&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, lets test that OpenJDK 8 is running OK in Centos:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;vagrant up test01
...

PLAY &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;test&lt;/span&gt; install openjdk jdk &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt; on centos 7&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; **********************************

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;setup&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; *******************************************************************
ok: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;test01&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : debug&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; ************************************************************
ok: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;test01&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;This Java Provider will be installed: openjdk&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : include&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; **********************************************************
included: /home/jeqo/dev/jeqo/ansible-role-java/tests/roles/java/tasks/install-openjdk.yml &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; test01

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : set_fact&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; *********************************************************
skipping: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;test01&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : set_fact&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; *********************************************************
ok: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;test01&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : set_fact&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; *********************************************************
skipping: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;test01&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : set_fact&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; *********************************************************
ok: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;test01&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : install openjdk &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;debian&lt;span style=&#34;color: #666666&#34;&gt;)]&lt;/span&gt; *****************************************
skipping: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;test01&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : install openjdk &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;redhat&lt;span style=&#34;color: #666666&#34;&gt;)]&lt;/span&gt; *****************************************
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But one thing I always want is to reuse this roles on Docker containers,
without prepare a Container with SSH, that is recognized as an
anti-pattern: &lt;a href=&#34;https://jpetazzo.github.io/2014/06/23/docker-ssh-considered-evil/&#34;&gt;https://jpetazzo.github.io/2014/06/23/docker-ssh-considered-evil/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, since Ansible 2.0 a Docker connection type is included OOTB, and
I give it a try: &lt;a href=&#34;https://github.com/jeqo/poc-ansible-docker&#34;&gt;https://github.com/jeqo/poc-ansible-docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I added a playbook to create a container:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;- hosts: 127.0.0.1
  connection: local
  tasks:
    - name: my container
      docker:
        name: poccontainer
        image: centos
        command: sleep infinity
        state: started
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I&amp;rsquo;m using &amp;ldquo;connection: local&amp;rdquo; to execute commands locally.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
a5e49bd032be        centos              &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;sleep infinity&amp;quot;&lt;/span&gt;    About an hour ago   Up About an hour                        poccontainer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And once I have a container running, I can run this playbook:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;- hosts: poccontainer
  connection: docker
  pre_tasks:
    - package: name=sudo
    - command: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;sed&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;-i&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;-e&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;\&amp;quot;s/Defaults&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;requiretty.*/&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;#Defaults&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;requiretty/g\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;/etc/sudoers&amp;quot;&lt;/span&gt;
  roles:
    - role: java
      java_provider: openjdk
      java_type: jdk
      java_version: 8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pre-tasks are required to install sudo package and configure tty. And
then run role as usual:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ansible-playbook provisioning.yml -vvvv
Using /home/jeqo/dev/jeqo/poc-ansible-docker/ansible.cfg as config file
Loaded callback default of &lt;span style=&#34;color: #008000&#34;&gt;type&lt;/span&gt; stdout, v2.0
&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; plays in provisioning.yml

PLAY ***************************************************************************

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;setup&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; *******************************************************************
ESTABLISH DOCKER CONNECTION FOR USER: None
&amp;lt;poccontainer&amp;gt; EXEC &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;/usr/bin/docker&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;-i&amp;#39;&lt;/span&gt;, u&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;poccontainer&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;/bin/sh&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;/bin/sh -c \&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;umask&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
mkdir -p &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;` echo &lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$HOME&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;/.ansible/tmp/ansible-tmp-1459355431.02-32251179247729 `&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
&lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;` echo &lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$HOME&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;/.ansible/tmp/ansible-tmp-1459355431.02-32251179247729 `&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;]&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;lt;poccontainer&amp;gt; PUT /tmp/tmpNCOaxi TO /root/.ansible/tmp/ansible-tmp-1459355431.02-32251179247729/setup&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;lt;poccontainer&amp;gt; EXEC [&amp;#39;&lt;/span&gt;/usr/bin/docker&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;exec&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;-i&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;, u&amp;#39;&lt;/span&gt;poccontainer&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/bin/sh&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;-c&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;, u&amp;#39;&lt;/span&gt;/bin/sh -c &lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;LANG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;en_US.UTF-8 
&lt;span style=&#34;color: #19177C&#34;&gt;LC_ALL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;en_US.UTF-8 &lt;span style=&#34;color: #19177C&#34;&gt;LC_MESSAGES&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;en_US.UTF-8 /usr/bin/python /root/.ansible/tmp/ansible-tmp-1459355431.02-32251179247729/setup; 
rm -rf &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/root/.ansible/tmp/ansible-tmp-1459355431.02-32251179247729/&amp;quot;&lt;/span&gt; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
ok: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;poccontainer&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This samples show how versatile Ansible is, using roles and connection
type. But there are more platforms where Ansible can fit, as with AWS:
&lt;a href=&#34;https://aws.amazon.com/blogs/apn/getting-started-with-ansible-and-dynamic-amazon-ec2-inventory-management/&#34;&gt;https://aws.amazon.com/blogs/apn/getting-started-with-ansible-and-dynamic-amazon-ec2-inventory-management/&lt;/a&gt;
and other Cloud platforms: &lt;a href=&#34;http://docs.ansible.com/ansible/list_of_cloud_modules.html&#34;&gt;http://docs.ansible.com/ansible/list_of_cloud_modules.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;One question can be: Is this a replacement of Dockerfile? Maybe,
depends on you. Dockerfile are very simple and only works with Docker.
Dockerfile also has a nice feature to create an image each step, so
you can distribute images easily. This is missing in Ansible, where
you execute commands on a running Docker container. Also Ansible
is missing commit and push tasks to put containers on Docker Hub,
but you can replace it with local commands as here:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;- hosts: 127.0.0.1
  connection: local
  tasks:
    - name: commit
      command: docker commit poccontainer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Although Ansible also have a module to run Dockerfiles: &lt;a href=&#34;http://docs.ansible.com/ansible/docker_image_module.html&#34;&gt;http://docs.ansible.com/ansible/docker_image_module.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this helps you to get started with Ansible and Docker.&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
