<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on @jeqo</title>
    <link>https://jeqo.github.io/tags/security/</link>
    <description>Recent content in security on @jeqo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright @jeqo</copyright>
    <lastBuildDate>Tue, 16 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jeqo.github.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Notes on Apache Kafka and Confluent Platform Security</title>
      <link>https://jeqo.github.io/notes/kafka-security/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/kafka-security/</guid>
      <description>Authentication SASL/PLAIN  Further reading   Kafka docs: https://kafka.apache.org/documentation/#security_sasl_plain
    SASL/SCRAM  Support: - SCRAM-SHA-256 - SCRAM-SHA-512
 Considerations  For each SCRAM mechanism enabled, credentials must be created by adding a config with the mechanism name. Credentials for inter-broker communication must be created before Kafka brokers are started.
   Further reading   Kafka docs: https://kafka.apache.org/documentation/#security_sasl_scram
       Authentication   Authorization Apache Kafka Access Control Lists    </description>
    </item>
    
    <item>
      <title>Notes on Apache Zookeeper Security</title>
      <link>https://jeqo.github.io/notes/zookeeper-security/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/zookeeper-security/</guid>
      <description>Authentication Examples   https://github.com/jeqo/docker-composes/tree/master/zookeeper-security
   Client/Server Authentication SASL Authentication SASL Authentication alone does not deny access to anonymous users. Beware of this as it gives a false sense of security, and can take some time to realize. Reference: https://issues.apache.org/jira/browse/ZOOKEEPER-1736
 This can be solved by forcing an Authentication Scheme:
 requireClientAuthScheme=sasl    Futher reading   https://cwiki.apache.org/confluence/display/ZOOKEEPER/Client-Server+mutual+authentication ---
     Server/Server Authentication  Futher reading   https://cwiki.</description>
    </item>
    
    <item>
      <title>Notes on Java Security</title>
      <link>https://jeqo.github.io/notes/security/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/notes/security/</guid>
      <description>Security Standards Hashing Hash Functions Cryptographic Hash Functions What makes a hash function a Cryptographic Hash Function (CHF) is that is a one-way function: practically infeasible to invert.
  MD5 From Wikipedia:
  The MD5 message-digest algorithm is a widely used hash function producing a 128-bit hash value. Although MD5 was initially designed to be used as a cryptographic hash function, it has been found to suffer from extensive vulnerabilities.</description>
    </item>
    
  </channel>
</rss>