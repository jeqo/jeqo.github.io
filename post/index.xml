<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0">
    <channel>
        <title>Jorge Quilcate Otoya on @jeqo</title>
        <generator uri="https://gohugo.io">Hugo</generator>
        <link>https://jeqo.github.io/post/</link>
        <language>en-us</language>
        <author>Jorge Quilcate Otoya</author>
        
        <updated>Fri, 13 Oct 2017 00:00:00 UTC</updated>
        
        <item>
            <title>Data on the Outside vs Data on the Inside</title>
            <link>https://jeqo.github.io/post/2017-10-13-data-on-the-outside-vs-data-on-the-inside/</link>
            <pubDate>Fri, 13 Oct 2017 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2017-10-13-data-on-the-outside-vs-data-on-the-inside/</guid>
            <description>&lt;p&gt;The relevance of this paper today is as it was in 2005.
It is fascinating how technologies have changed these 12 years
and if we just change terms like XML to JSON, SOA to Micro-Services
or Relational Database to NoSQL Data Stores, the concepts will be
still accurate.&lt;/p&gt;

&lt;p&gt;Pat Helland explains the dichotomy (as Ben Stopford called in his &lt;a href=&#34;https://www.confluent.io/blog/data-dichotomy-rethinking-the-way-we-treat-data-and-services/&#34;&gt;post&lt;/a&gt;)
between data behind a Service boundary and data on the outside when
you follow a service-oriented architecture.&lt;/p&gt;

&lt;p&gt;He highlight key challenges that will be need to be embraced if
the decision to follow this path is taken, like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;[In SOA] atomic transactions with two-phase commit &lt;strong&gt;do not occur&lt;/strong&gt; accross multiple services.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Data owned by a service is, in general, &lt;strong&gt;never allowed out of it&lt;/strong&gt; unless it is
processed by application logic&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But this is just the beginning. Here is one quote I found amazing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Going to SOA is like going from Newton&amp;rsquo;s physics to Einstein&amp;rsquo;s physics&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Newton&amp;rsquo;s time marched forward uniformly with instant knowledge at a distance.&lt;/p&gt;

&lt;p&gt;Before SOA, distributed computing strove to make many systems look like one with RPC, 2PC, etc.&lt;/p&gt;

&lt;p&gt;In Einstein&amp;rsquo;s universe, everything is relative to one&amp;rsquo;s perspective.&lt;/p&gt;

&lt;p&gt;SOA has &amp;ldquo;now&amp;rdquo; inside and the &amp;ldquo;past&amp;rdquo; arriving in messages&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Everyone that is thinking to break a monolith system into a bunch of services
shall read this and ensure that the benefits worth taking these challenges.&lt;/p&gt;

&lt;p&gt;As Adrian Colyer call it in its review here: &lt;a href=&#34;https://blog.acolyer.org/2016/09/13/data-on-the-outside-versus-data-on-the-inside/&#34;&gt;https://blog.acolyer.org/2016/09/13/data-on-the-outside-versus-data-on-the-inside/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Perhaps we should rename the “extract microservice” refactoring operation to “change model of time and space” ;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The service developer that is aware of this challenge will have present that
the application logic will have to reconcile the &amp;ldquo;now&amp;rdquo; inside a service and
the &amp;ldquo;then&amp;rdquo; arriving as messages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The world is no longer flat!!&lt;/strong&gt; SOA is recognizing that there is more than
one computer working together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From this first part we can conclude 2 main issues that have to be embrace in a SOA:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ACID transaction won&amp;rsquo;t be part of your toolbox&lt;/li&gt;
&lt;li&gt;Reconcile &amp;ldquo;now&amp;rdquo; and &amp;ldquo;then&amp;rdquo; is part of the application logic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then this paper describes Data on the Ouside and Data on the Inside characteristics.
On one side, data on the outside:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Data on the outside must be immutable and/or versioned data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Time-stamping, versioning, and not reusing important identifier, Helland says, are
excellent techniques to keep you messages immutable.&lt;/p&gt;

&lt;p&gt;Two concepts are stablished when talking about data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Operators: action information that is part of a message. (e.g. Order amount, items)&lt;/li&gt;
&lt;li&gt;Operands: reference data, that gives context to the Operators. (e.g. Dapartment information linked to an Order)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And about Reference Data, Helland says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Each piece of reference data has both a &lt;em&gt;version independent identifier&lt;/em&gt; and
multiple versions, each of which is labeled iwth a &lt;em&gt;version dependent identifier&lt;/em&gt;.
For each piece, there is exactly one publishing service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This concept of Reference Data is one key concept that in my experience creates
the most difficult scenarios in a SOA. Sharing data is a key feature and implement it
correctly is usually difficult: how much data should be shared? how do we control the access
to sensitive data on the consumer sides? Which approach should be taken to implement this
funcionality, request/response, messaging, log-oriented?&lt;/p&gt;

&lt;p&gt;Nowadays I would say that Apache Kafka is a good fit to express and propagate&lt;code&gt;Reference Data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On the other side, to work with Data on the Inside we should take some considerations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transactionality is ensured inside a service.&lt;/li&gt;
&lt;li&gt;Incoming Data is usually kept stored as a binary copy for auditing and non-repudiation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;XML and SQL are discussed as a way to represent data. Where XML extensibility and SQL
relational capabilities are key depending on the context (i.e. inside or outside data).
XML is unbounded vs Relational bounded representations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jeqo.github.io/images/2017-10-13-data-on-the-outside-vs-data-on-the-inside/outside-vs-inside.png&#34; alt=&#34;outside vs inside&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And finally compare the benefits and weakness of the 3 ways to represent data: XML, SQL and Objects:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jeqo.github.io/images/2017-10-13-data-on-the-outside-vs-data-on-the-inside/sql-xml-object.png&#34; alt=&#34;xml vs sql vs objects&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Concluding:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We simply need all three of these representations and we need to use them in a fashion that plays to their respective strenghts!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href=&#34;cidrdb.org/cidr2005/papers/P12.pdf&#34;&gt;cidrdb.org/cidr2005/papers/P12.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Author: Pat Helland&lt;/li&gt;
&lt;li&gt;Year: 2005&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>Tracing Kafka applications</title>
            <link>https://jeqo.github.io/post/2017-09-28-kafka-opentracing/</link>
            <pubDate>Thu, 28 Sep 2017 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2017-09-28-kafka-opentracing/</guid>
            <description>

&lt;p&gt;Tracing is one of the hardest time in integration or microservice development:
knowing how a request impact your different components, and if your components
have behave as expected.&lt;/p&gt;

&lt;p&gt;This could be fairly easy if we have monolith where we have one database and
with some queries or checking one log file you can validate everything went
well.&lt;/p&gt;

&lt;p&gt;Once you introduce distributed components and asynchronous communication
this starts to get more complex and tedious.&lt;/p&gt;

&lt;p&gt;OpenTracing (&lt;a href=&#34;http://opentracing.io/&#34;&gt;http://opentracing.io/&lt;/a&gt;) offers a way to solve this bringing a
vendor neutral API to be able to create &lt;code&gt;spans&lt;/code&gt; that represent the meaningful
tasks that form part of a &lt;code&gt;trace&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;use-case&#34;&gt;Use-Case&lt;/h1&gt;

&lt;p&gt;In this post we will see how to instrument Java applications that communicates
using Apache Kafka as Event Log, and how visualize traces and analyze latency.&lt;/p&gt;

&lt;p&gt;The scenario will be a simple Hello World Producer/Consumer. The producer
side will send a &amp;ldquo;greeting&amp;rdquo; event to &amp;ldquo;greetings-topic&amp;rdquo;, and the consumer
side will poll events and print out to console.&lt;/p&gt;

&lt;h1 id=&#34;technologies&#34;&gt;Technologies&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dropwizard&lt;/strong&gt;: Framework to run Web Services.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;: Event Log.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;OpenTracing and Jaeger&lt;/strong&gt;: API and instrumentation for distributed tracing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;implementation&#34;&gt;Implementation&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s assume we have a simple application that produce &lt;code&gt;greetings&lt;/code&gt; events
and another application that consumes and print those events.&lt;/p&gt;

&lt;p&gt;To execute this applications let&amp;rsquo;s first start a local version of Kafka:&lt;/p&gt;

&lt;h2 id=&#34;install-and-run-kafka&#34;&gt;Install and Run Kafka&lt;/h2&gt;

&lt;p&gt;First, execute the script to install Kafka:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd kafka/
./install-kafka.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it is installed, start Zookeeper and then one Kafka broker:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./start-zookeeper.sh
...
[2017-09-27 22:09:26,634] INFO binding to port 0.0.0.0/0.0.0.0:2181 (org.apache.zookeeper.server.NIOServerCnxnFactory)
...

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./start-broker.sh
...
[2017-09-27 22:09:33,814] INFO Registered broker 0 at path /brokers/ids/0 with addresses: EndPoint(jeqo-Oryx-Pro,9092,ListenerName(PLAINTEXT),PLAINTEXT) (kafka.utils.ZkUtils)
...
[2017-09-27 22:09:33,817] INFO [Kafka Server 0], started (kafka.server.KafkaServer)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;run-applications&#34;&gt;Run Applications&lt;/h2&gt;

&lt;h3 id=&#34;start-producer-side&#34;&gt;Start Producer Side&lt;/h3&gt;

&lt;p&gt;To get started, let&amp;rsquo;s start the producer side and test it.&lt;/p&gt;

&lt;p&gt;Build the whole project: &lt;code&gt;./mvnw clean install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And start the producer application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd hello-world-producer/
java -jar target/hello-world-producer.jar server config.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will start a web server listening on port 8080.&lt;/p&gt;

&lt;p&gt;We have a resource listening on context &lt;code&gt;/hello&lt;/code&gt; and an operation
&lt;code&gt;GET /hello/{name}&lt;/code&gt; that will call the &lt;code&gt;KafkaHelloWorldProducer&lt;/code&gt;
that sends the record to Kafka.&lt;/p&gt;

&lt;p&gt;Once the applications is started, we can call the operation with curl:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -XGET http://localhost:8080/hello/jeqo
done.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;start-consumer-side&#34;&gt;Start Consumer Side&lt;/h3&gt;

&lt;p&gt;Once producer side is started and running, we can start consumer side
to print out the events:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar target/hello-world-consumer.jar server config.yml
...
Hi jeqo
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far these are common Kafka producer/consumer applications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Source code on branch: steps/step-01&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;opentracing-instrumentation&#34;&gt;OpenTracing Instrumentation&lt;/h2&gt;

&lt;p&gt;OpenTracing has enrich its integration throw projects that we can
contribute: &lt;a href=&#34;https://github.com/opentracing-contrib/&#34;&gt;https://github.com/opentracing-contrib/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will follow the next steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Instrument Dropwizard&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Instrument Kafka Producer&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Instrument Kafka Consumer&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Test complete Traces&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;instrument-dropwizard&#34;&gt;Instrument Dropwizard&lt;/h3&gt;

&lt;p&gt;We are following this step to have a complete view since request is
received.&lt;/p&gt;

&lt;p&gt;Firsts let&amp;rsquo;s add Maven dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.opentracing&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;opentracing-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.30.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.opentracing.contrib.dropwizard&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;dropwizard-opentracing&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.2.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.uber.jaeger&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jaeger-core&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, the &lt;code&gt;opentracing-api&lt;/code&gt; dependency.&lt;/p&gt;

&lt;p&gt;Then &lt;code&gt;dropwizard-opentracing&lt;/code&gt; that is the instrumentation for
DropWizard applications
that handles traces for all of your JAX-RS resource&amp;rsquo;s operations by default.&lt;/p&gt;

&lt;p&gt;And &lt;code&gt;jaeger-core&lt;/code&gt; that implements OpenTracing API and
adds the Jaeger Java Client to connect to Jaeger Agent.&lt;/p&gt;

&lt;p&gt;Then, we need to instantiate and register the Tracer on the Application
class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    final Tracer tracer = //(1)
        new com.uber.jaeger.Configuration(
            getName(),
            new com.uber.jaeger.Configuration.SamplerConfiguration(&amp;quot;const&amp;quot;, 1),
            new com.uber.jaeger.Configuration.ReporterConfiguration(
                true,  // logSpans
                &amp;quot;localhost&amp;quot;,
                6831,
                1000,   // flush interval in milliseconds
                10000)  /*max buffered Spans*/)
            .getTracer();
    GlobalTracer.register(tracer); //(2)
    final DropWizardTracer dropWizardTracer = new DropWizardTracer(tracer); //(3)
    environment.jersey()
        .register(
            new ServerTracingFeature.Builder(dropWizardTracer)
                .withTraceAnnotations()
                .build());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the first operation, we are instantiating a &lt;code&gt;Tracer&lt;/code&gt; object with
Jaeger. Jaeger Agent should be running on port &lt;code&gt;localhost:6831&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we are registering the &lt;code&gt;tracer&lt;/code&gt; on the &lt;code&gt;GlobalTracer&lt;/code&gt; helper, to
reference it from other layers.&lt;/p&gt;

&lt;p&gt;And in the third step, we are integrating the tracer with DropWizard.
We are configuring this integration to only trace operations with
&lt;code&gt;@Trace&lt;/code&gt; annotation: &lt;code&gt;.withTraceAnnotations()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So, your resource class, should looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  @GET
  @Path(&amp;quot;{name}&amp;quot;)
  @Trace
  public Response sayHi(@PathParam(&amp;quot;name&amp;quot;) final String name) {
    producer.send(name);
    return Response.accepted(&amp;quot;done.&amp;quot;).build();
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s install and start Jaeger, in its standalone version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd jaeger/
./install-jaeger.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./start-standalone.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it is started, you can go to: &lt;a href=&#34;http://localhost:16686/search&#34;&gt;http://localhost:16686/search&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And check its UI.&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s run a first request to check if a trace is created:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:8080/hello/jorge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And refresh the Jaeger UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../static/images/2017-09-28-kafka-opentracing/first-trace.png&#34; alt=&#34;first trace&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Source code on branch: steps/step-02&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;instrument-kafka-producer-api&#34;&gt;Instrument Kafka Producer API&lt;/h3&gt;

&lt;p&gt;Cool! Now we have how long it takes to return a response on the
producer side :)&lt;/p&gt;

&lt;p&gt;From here we can start asking:&lt;/p&gt;

&lt;p&gt;How long it takes to execute the &lt;code&gt;send&lt;/code&gt; operation by the Kafka
Producer? How long it takes to receive metadata from broker?
How long it takes to receive the record on the consumer side?
Did the consumer side receive the message?&lt;/p&gt;

&lt;p&gt;This are the question we should be able to solve using OpenTracing.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s add instrumentation for Kafka Clients:&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s add another dependency:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.opentracing.contrib&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;opentracing-kafka-client&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.0.4&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/opentracing-contrib/java-kafka-client&#34;&gt;https://github.com/opentracing-contrib/java-kafka-client&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And let&amp;rsquo;s wrap the tracer on a &lt;code&gt;TracingKafkaProducer&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    final KafkaProducer&amp;lt;String, String&amp;gt; kafkaProducer =
        new KafkaProducer&amp;lt;&amp;gt;(producerProperties, new StringSerializer(), new StringSerializer());
    final TracingKafkaProducer&amp;lt;String, String&amp;gt; tracingKafkaProducer =
        new TracingKafkaProducer&amp;lt;&amp;gt;(kafkaProducer, tracer);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main difference, is that &lt;code&gt;TracingKafkaProducer&lt;/code&gt; will inject
tracing context on Kafka Headers (supported since v0.11.0).&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it, let&amp;rsquo;s redeploy and test again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../static/images/2017-09-28-kafka-opentracing/second-traces-not-linked.png&#34; alt=&#34;Traces not linked&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Wait!!! but we only run one request, why do we have 2 traces???&lt;/p&gt;

&lt;p&gt;The thing is that to create &lt;code&gt;spans&lt;/code&gt; that are related, we need to create
a reference.&lt;/p&gt;

&lt;p&gt;How do we do this?&lt;/p&gt;

&lt;p&gt;First, we need to obtain the span from the request, and then create an
&lt;code&gt;ActiveSpan&lt;/code&gt; that will wrap the execution of Kafka Client. Let&amp;rsquo;s see
how this looks:&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s go to the resource operation and add a parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public Response sayHi(@Context final Request request,
                        @PathParam(&amp;quot;name&amp;quot;) final String name) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can use it to get the span using the DropwizardTracer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Path(&amp;quot;hello&amp;quot;)
public class HelloWorldResource {
  private final DropWizardTracer dropWizardTracer; //(1)
  private final KafkaHelloWorldProducer producer;

  public HelloWorldResource(final DropWizardTracer dropWizardTracer,
                            final KafkaHelloWorldProducer producer) {
    this.dropWizardTracer = dropWizardTracer;
    this.producer = producer;
  }

  @GET
  @Path(&amp;quot;{name}&amp;quot;)
  @Trace
  public Response sayHi(@Context final Request request,  //(2)
                        @PathParam(&amp;quot;name&amp;quot;) final String name) {
    final Span span = dropWizardTracer.getSpan(request);  //(3)

    try (ActiveSpan activeSpan =
             dropWizardTracer.getTracer()
                 .buildSpan(&amp;quot;sayHi&amp;quot;)
                 .asChildOf(span)
                 .startActive()) {  //(4)
      producer.send(name);
      return Response.accepted(&amp;quot;done.&amp;quot;).build();
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First we inject the Tracer, then we get the span from Request,
and finally we create an ActiveSpan that wraps the producer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../static/images/2017-09-28-kafka-opentracing/third-traces-together.png&#34; alt=&#34;Traces together&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And if we go to the detail we can get more insight from the execution:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../static/images/2017-09-28-kafka-opentracing/trace-details.png&#34; alt=&#34;Trace details&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can get a more deep understanding about the trace execution,
how the callback works on the producer side, processing the metadata
asynchronously, and so on.&lt;/p&gt;

&lt;h3 id=&#34;instrument-kafka-consumer-api&#34;&gt;Instrument Kafka Consumer API&lt;/h3&gt;

&lt;p&gt;Ok, so far so good. We have a complete visibility over the execution on
the producer side. But what happen next? How the consumer side reacts?&lt;/p&gt;

&lt;p&gt;To know that using OpenTracing instrumentation we will using the same
integration of OpenTracing with Kafka, but it is a bit different.&lt;/p&gt;

&lt;p&gt;Again, let&amp;rsquo;s start adding dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.opentracing&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;opentracing-api&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.30.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.uber.jaeger&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jaeger-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.20.6&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.opentracing.contrib&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;opentracing-kafka-client&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.0.4&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;opentracing-api&lt;/code&gt; and &lt;code&gt;jaeger-core&lt;/code&gt; for instrumentation and &lt;code&gt;opentracing-kafka-client&lt;/code&gt;
for integration with Kafka Clients.&lt;/p&gt;

&lt;p&gt;Then, we need to instantiate the &lt;code&gt;Tracer&lt;/code&gt;, but without the &lt;code&gt;DropwizardTracer&lt;/code&gt;
given that we don&amp;rsquo;t need to trace HTTP endpoints:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    //Instantiate and register Tracer
    final Tracer tracer =
        new com.uber.jaeger.Configuration(
            getName(),
            new com.uber.jaeger.Configuration.SamplerConfiguration(&amp;quot;const&amp;quot;, 1),
            new com.uber.jaeger.Configuration.ReporterConfiguration(
                true,  // logSpans
                &amp;quot;localhost&amp;quot;,
                6831,
                1000,   // flush interval in milliseconds
                10000)  /*max buffered Spans*/)
            .getTracer();
    GlobalTracer.register(tracer);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then, instantiate the &lt;code&gt;TracingKafkaConsumer&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    final TracingKafkaConsumer&amp;lt;String, String&amp;gt; tracingKafkaConsumer =
        new TracingKafkaConsumer&amp;lt;&amp;gt;(kafkaConsumer, tracer);

    //Define Runnable Handler
    final KafkaGreetingsHandler greetingsHandler =
        new KafkaGreetingsHandler(tracingKafkaConsumer)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Should be enough. Let&amp;rsquo;s try it out:&lt;/p&gt;

&lt;p&gt;(build and run your consumer side)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./mvnw clean install
 java -jar target/hello-world-consumer.jar server config.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt; curl http://localhost:8080/hello/jorge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../../static/images/2017-09-28-kafka-opentracing/trace-with-consumer.png&#34; alt=&#34;Trace with Consumer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s great! Now we have how long it takes to receive a record on the
consumer side.&lt;/p&gt;

&lt;p&gt;But, what if we want to measure the complete execution, since we get
the message until we commit it?&lt;/p&gt;

&lt;p&gt;To do this, we can add an &lt;code&gt;ActiveSpan&lt;/code&gt; on the consumption side:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;        for (ConsumerRecord&amp;lt;String, String&amp;gt; consumerRecord : consumerRecords) {
          try (ActiveSpan activeSpan =
                   GlobalTracer.get()
                       .buildSpan(&amp;quot;consumption&amp;quot;)
                       //.asChildOf(context)
                       .startActive()) {
            System.out.println(consumerRecord.value());

            kafkaConsumer.commitSync();
          }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But where is the context coming from?&lt;/p&gt;

&lt;p&gt;Well, as &lt;code&gt;TracingKafkaProducer&lt;/code&gt; inject tracing contexts on Headers,
we can use &lt;code&gt;TracingKafkaUtils&lt;/code&gt; to extract it, and reference it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;        for (ConsumerRecord&amp;lt;String, String&amp;gt; consumerRecord : consumerRecords) {
          final SpanContext context =
              TracingKafkaUtils.extractSpanContext(consumerRecord.headers(), tracer);
          try (ActiveSpan activeSpan =
                   tracer.buildSpan(&amp;quot;consumption&amp;quot;)
                       .asChildOf(context)
                       .startActive()) {
            System.out.println(consumerRecord.value());

            kafkaConsumer.commitSync();
          }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;../../static/images/2017-09-28-kafka-opentracing/complete-trace.png&#34; alt=&#34;Complete trace&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Source code on branch: steps/step-03&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;recommendations&#34;&gt;Recommendations&lt;/h1&gt;

&lt;h2 id=&#34;trace-tags&#34;&gt;Trace Tags&lt;/h2&gt;

&lt;p&gt;One important feature of OpenTracing API is supporting &lt;code&gt;tags&lt;/code&gt;. These
help to reference metadata that enables reference to business data
that can be use to map your trace with a transaction.&lt;/p&gt;

&lt;p&gt;Also don&amp;rsquo;t try to overuse &lt;code&gt;tags&lt;/code&gt; and use something like the Elastic Stack
or Splunk to store your logging messages, and use &lt;code&gt;tags&lt;/code&gt; just to reference
the transaction ID, the entity ID or user ID.&lt;/p&gt;

&lt;p&gt;For instance, in this case, we can add a tag to track the name:&lt;/p&gt;

&lt;p&gt;On the producer side:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    try (ActiveSpan ignored =
             dropWizardTracer.getTracer()
                 .buildSpan(&amp;quot;sayHi&amp;quot;)
                 .asChildOf(span)
                 .withTag(&amp;quot;user&amp;quot;, name)
                 .startActive()) {
      producer.send(name);
      return Response.accepted(&amp;quot;done.&amp;quot;).build();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in the consumer side, the same story:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;          try (ActiveSpan ignored =
                   tracer.buildSpan(&amp;quot;consumption&amp;quot;)
                       .withTag(&amp;quot;user&amp;quot;, consumerRecord.key())
                       .asChildOf(context)
                       .startActive()) {
            System.out.println(consumerRecord.value());

            kafkaConsumer.commitSync();
          }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can filter now from the UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../static/images/2017-09-28-kafka-opentracing/tags.png&#34; alt=&#34;Complete trace&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;dropwizard-helpers&#34;&gt;Dropwizard Helpers&lt;/h2&gt;

&lt;p&gt;I have developed some Dropwizard modules to help to instantiate
Kafka Clients, create Topics, instantiate Traces, and so on. I&amp;rsquo;m working
on Documentation but you can find it on Maven Central already:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jeqo/dropwizard-modules/&#34;&gt;https://github.com/jeqo/dropwizard-modules/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/io.github.jeqo.dropwizard&#34;&gt;https://mvnrepository.com/artifact/io.github.jeqo.dropwizard&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Rewind Kafka Consumer Offsets</title>
            <link>https://jeqo.github.io/post/2017-01-31-kafka-rewind-consumers-offset/</link>
            <pubDate>Tue, 31 Jan 2017 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2017-01-31-kafka-rewind-consumers-offset/</guid>
            <description>&lt;p&gt;One of the most important features from &lt;em&gt;Apache Kafka&lt;/em&gt; is how it manages
Multiple Consumers. Each &lt;code&gt;consumer group&lt;/code&gt; has a current &lt;code&gt;offset&lt;/code&gt;, that
determine at what point in a &lt;code&gt;topic&lt;/code&gt; this &lt;code&gt;consumer group&lt;/code&gt; has consume
messages. So, each &lt;code&gt;consumer group&lt;/code&gt; can manage its &lt;code&gt;offset&lt;/code&gt; independently,
by &lt;code&gt;partition&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This offers the possibility to rollback in time and reprocess messages from
the beginning of a &lt;code&gt;topic&lt;/code&gt; and regenerate the current status of the system.&lt;/p&gt;

&lt;p&gt;But how to do it (programmatically)?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Source code: &lt;a href=&#34;https://github.com/jeqo/post-kafka-rewind-consumer-offset&#34;&gt;https://github.com/jeqo/post-kafka-rewind-consumer-offset&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;basic-concepts&#34;&gt;Basic Concepts&lt;/h2&gt;

&lt;h3 id=&#34;topics-and-offsets&#34;&gt;Topics and Offsets&lt;/h3&gt;

&lt;p&gt;First thing to understand to achieve Consumer Rewind, is: rewind over what?
Because &lt;code&gt;topics&lt;/code&gt; are divided into &lt;code&gt;partitions&lt;/code&gt;. Records sent from &lt;code&gt;Producers&lt;/code&gt;
are balanced between them, so each partition has its own &lt;code&gt;offset&lt;/code&gt; index.&lt;/p&gt;

&lt;p&gt;Each &lt;code&gt;record&lt;/code&gt; has its own &lt;code&gt;offset&lt;/code&gt; that will be used by &lt;code&gt;consumers&lt;/code&gt; to define
which messages has been consumed from the &lt;strong&gt;log&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;consumers-and-consumer-groups&#34;&gt;Consumers and Consumer Groups&lt;/h3&gt;

&lt;p&gt;Once we understand that &lt;code&gt;topics&lt;/code&gt; have &lt;code&gt;partitions&lt;/code&gt; and &lt;code&gt;offsets&lt;/code&gt; by &lt;code&gt;partition&lt;/code&gt;
we can now understand how &lt;code&gt;consumers&lt;/code&gt; and &lt;code&gt;consumer groups&lt;/code&gt; work.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Consumers&lt;/code&gt; are grouped by &lt;code&gt;group.id&lt;/code&gt;. This property identify you as a
&lt;code&gt;consumer group&lt;/code&gt;, so the &lt;code&gt;broker&lt;/code&gt; knows which was the last &lt;code&gt;record&lt;/code&gt; you have
consumed by &lt;code&gt;offset&lt;/code&gt;, by &lt;code&gt;partition&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This partitions allows &lt;em&gt;parallelism&lt;/em&gt;, because members from a &lt;code&gt;consumer group&lt;/code&gt;
can consume &lt;code&gt;records&lt;/code&gt; from &lt;code&gt;partitions&lt;/code&gt; independently, in parallel.&lt;/p&gt;

&lt;p&gt;Before continue, let&amp;rsquo;s check a simple Kafka Producer implemented with Java:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;KafkaSimpleProducer.java&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
    Properties properties &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Properties&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    properties&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ProducerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;BOOTSTRAP_SERVERS_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; bootstrapServers&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    properties&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ProducerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;KEY_SERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; StringSerializer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
    properties&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ProducerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;VALUE_SERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; StringSerializer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;

    Producer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; producer &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; KafkaProducer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;properties&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    IntStream&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;rangeClosed&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(1,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;100)&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;boxed&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;number &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; ProducerRecord&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;topic-1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                    number&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt;
                    number&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()))&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;record &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; producer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;send&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;record&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;forEach&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;result &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; printMetadata&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;result&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;
    producer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create 100 &lt;code&gt;records&lt;/code&gt; in topic &lt;code&gt;topic-1&lt;/code&gt;, with &lt;code&gt;offsets&lt;/code&gt; from 0-99&lt;/p&gt;

&lt;h2 id=&#34;from-command-line&#34;&gt;From Command-Line&lt;/h2&gt;

&lt;p&gt;In this first scenario, we will see how to manage offsets from &lt;em&gt;command-line&lt;/em&gt;
so it will give us an idea of how to implement it in our application.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re working from the terminal, you can use &lt;code&gt;kafka-console-consumer&lt;/code&gt; without
&lt;code&gt;group.id&lt;/code&gt;, a new &lt;code&gt;group.id&lt;/code&gt; is generated using:
&lt;code&gt;console-consumer-${new Random().nextInt(100000)}&lt;/code&gt;.
So unless you use the same &lt;code&gt;group.id&lt;/code&gt; afterwards, it would be as you create a
new consumer group each time.&lt;/p&gt;

&lt;p&gt;By default, when you connect to a &lt;code&gt;topic&lt;/code&gt; as a &lt;code&gt;consumer&lt;/code&gt;, you
go to the &lt;em&gt;latest&lt;/em&gt; &lt;code&gt;offset&lt;/code&gt;, so you won&amp;rsquo;t see any new message until new records
arrive after you connect.&lt;/p&gt;

&lt;p&gt;In this case, going back to the beginning of the topic will as easy as add
&lt;code&gt;--from-beginning&lt;/code&gt; option to the command line:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/101246.js&#34; id=&#34;asciicast-101246&#34; async&gt;&lt;/script&gt;

&lt;p&gt;But, what happen if you use &lt;code&gt;group.id&lt;/code&gt; property, it will only work the first time,
but &lt;code&gt;offset&lt;/code&gt; gets commited to cluster:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/101248.js&#34; id=&#34;asciicast-101248&#34; async&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/101250.js&#34; id=&#34;asciicast-101250&#34; async&gt;&lt;/script&gt;

&lt;p&gt;So, how to go back to the beginning?&lt;/p&gt;

&lt;p&gt;We can use &lt;code&gt;--offset&lt;/code&gt; option to with three alternatives:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--offset &amp;lt;String: consume offset&amp;gt;        The offset id to consume from (a non-  
                                           negative number), or &#39;earliest&#39;      
                                           which means from beginning, or       
                                           &#39;latest&#39; which means from end        
                                           (default: latest)
&lt;/code&gt;&lt;/pre&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/101252.js&#34; id=&#34;asciicast-101252&#34; async&gt;&lt;/script&gt;

&lt;h2 id=&#34;from-java-clients&#34;&gt;From Java Clients&lt;/h2&gt;

&lt;p&gt;So, from &lt;code&gt;command-line&lt;/code&gt; is pretty easy to go back in time in the log. But
how to do it from your application?&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using Kafka Consumers in your applications, you have to options
(with Java):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kafka.apache.org/documentation/#consumerapi&#34;&gt;Kafka Consumer API&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://kafka.apache.org/documentation/#streamsapi&#34;&gt;Kafka Streams API&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Long story short: If you need stateful and stream processing capabilities,
go with Kafka Streams.
If you need simple one-by-one consumption of messages by topics, go with
Kafka Consumer.&lt;/p&gt;

&lt;p&gt;At this moment this are the options to rewind offsets with these APIs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Kafka Consumer API support go back to the beginning of the topic, go back
to a specific offset, and go back to a specific offset by timestamps.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kafka Streams API only support to go back to the earliest offset of the
&lt;code&gt;input topics&lt;/code&gt;, and is well explained by &lt;a href=&#34;https://github.com/mjsax&#34;&gt;Matthias J. Sax&lt;/a&gt;
in his post
&lt;a href=&#34;https://www.confluent.io/blog/data-reprocessing-with-kafka-streams-resetting-a-streams-application/&#34;&gt;[1]&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I will focus in options available in &lt;code&gt;Kafka Consumer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A simple Consumer will look something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    Properties props &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Properties&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    props&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;BOOTSTRAP_SERVERS_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; bootstrapServers&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    props&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;GROUP_ID_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    props&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;ENABLE_AUTO_COMMIT_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    props&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;KEY_DESERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;org.apache.kafka.common.serialization.StringDeserializer&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    props&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerConfig&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;VALUE_DESERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;org.apache.kafka.common.serialization.StringDeserializer&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    KafkaConsumer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; consumer &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; KafkaConsumer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;props&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;subscribe&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Arrays&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;asList&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;topic-1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;));&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        ConsumerRecords&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; records &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;poll&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(100);&lt;/span&gt;

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; records&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
            System&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;offset = %d, key = %s, value = %s%n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will poll by &lt;code&gt;100ms&lt;/code&gt; for records and print them out.  In this case
it should print 100 records.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s check how to rewind &lt;code&gt;offsets&lt;/code&gt; in different scenarios. Consumer API has
add &lt;code&gt;#seek&lt;/code&gt; operations to achieve this behavior. I will show a naive way to use
these operations using flags but it shows the point:&lt;/p&gt;

&lt;h3 id=&#34;rewind-to-earliest-offset&#34;&gt;Rewind to earliest &lt;code&gt;offset&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The most common options is to go back to the beginning of the topic, that not
always will be &lt;code&gt;offset=0&lt;/code&gt;. This will depends on the &lt;code&gt;retention&lt;/code&gt; policy
option that will be clean up old records based on time or size; but
this also deserves its own post.&lt;/p&gt;

&lt;p&gt;To go to the beginning we can use &lt;code&gt;#seekToBeginning(topicPartition)&lt;/code&gt;
operation to go back to earliest offset:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;boolean&lt;/span&gt; flag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    ConsumerRecords&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; records &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;poll&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(100);&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;flag&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;seekToBeginning&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
            Stream&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; TopicPartition&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;topic-1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0)).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;toList&lt;span style=&#34;color: #666666&#34;&gt;()));&lt;/span&gt;
        flag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; records&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//Consume record&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the seek to beginnning is done, it will reprocess all records from
&lt;code&gt;topic=topic-1&lt;/code&gt; and &lt;code&gt;partition=0&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;rewind-to-specific-offset&#34;&gt;Rewind to specific &lt;code&gt;offset&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;If we can recognized the specific &lt;code&gt;record&lt;/code&gt; (by &lt;code&gt;partition&lt;/code&gt;)
from where we need to reprocess all the log,
we can use &lt;code&gt;#seek(topicPartition, offset)&lt;/code&gt; directly.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;boolean&lt;/span&gt; flag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    ConsumerRecords&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; records &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;poll&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(100);&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;flag&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;seek&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; TopicPartition&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;topic-1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0),&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;90);&lt;/span&gt;
        flag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; records&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
        System&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;offset = %d, key = %s, value = %s%n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, we will consume from &lt;code&gt;record&lt;/code&gt; with &lt;code&gt;offset=90&lt;/code&gt;from
&lt;code&gt;topic=topic-1&lt;/code&gt; and &lt;code&gt;partition=0&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;NOTE: It could be cumbersome to map all offsets in case that you have
several partitions. Thats why addition of timestamps helps a lot with this.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;rewind-to-offset-by-timestamps&#34;&gt;Rewind to offset by timestamps&lt;/h3&gt;

&lt;p&gt;What if you don&amp;rsquo;t know exactly the &lt;code&gt;offset id&lt;/code&gt; to go back to, but you know
you want to go back 1 hour or 10 min?&lt;/p&gt;

&lt;p&gt;For these, since release &lt;code&gt;0.10.1.0&lt;/code&gt;, there are a couple of
improvements &lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-32+-+Add+timestamps+to+Kafka+message&#34;&gt;[2]&lt;/a&gt;
&lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-33+-+Add+a+time+based+log+index&#34;&gt;[3]&lt;/a&gt;
were added and a new operation was added to &lt;code&gt;Kafka Consumer API&lt;/code&gt;: &lt;code&gt;#offsetsForTimes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is how to use it:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #B00040&#34;&gt;boolean&lt;/span&gt; flag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    ConsumerRecords&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; records &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;poll&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(100);&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;flag&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        Map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;TopicPartition&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Long&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; query &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        query&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; TopicPartition&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;simple-topic-1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0),&lt;/span&gt;
                Instant&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;minus&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(10,&lt;/span&gt; MINUTES&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;toEpochMilli&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;

        Map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;TopicPartition&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; OffsetAndTimestamp&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;offsetsForTimes&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;query&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

        result&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;entrySet&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;forEach&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;entry &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; consumer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;seek&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;entry&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getKey&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; entry&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()));&lt;/span&gt;

        flag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ConsumerRecord&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; record &lt;span style=&#34;color: #666666&#34;&gt;:&lt;/span&gt; records&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
        System&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;offset = %d, key = %s, value = %s%n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, we are using a query first to get the offset inside a timestamp (10 minutes ago)
and then using that offset to go back with &lt;code&gt;#seek&lt;/code&gt; operation.&lt;/p&gt;

&lt;p&gt;As you can see, for each operation I have to define the specific &lt;code&gt;topic partition&lt;/code&gt;
to go back to, so this can get tricky if you have more than one partition, so I
would recommend to use &lt;code&gt;#offsetsForTimes&lt;/code&gt; in those cases to get an aligned result
and avoid inconsistencies in your consumers.&lt;/p&gt;

&lt;p&gt;In the source code, I&amp;rsquo;ve added the steps to get partitions by topic that will
help us to reproduce this steps when you have several topics.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.confluent.io/blog/data-reprocessing-with-kafka-streams-resetting-a-streams-application/&#34;&gt;https://www.confluent.io/blog/data-reprocessing-with-kafka-streams-resetting-a-streams-application/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-32+-+Add+timestamps+to+Kafka+message&#34;&gt;https://cwiki.apache.org/confluence/display/KAFKA/KIP-32+-+Add+timestamps+to+Kafka+message&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-33+-+Add+a+time+based+log+index&#34;&gt;https://cwiki.apache.org/confluence/display/KAFKA/KIP-33+-+Add+a+time+based+log+index&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/FAQ#FAQ-HowcanIrewindtheoffsetintheconsumer&#34;&gt;https://cwiki.apache.org/confluence/display/KAFKA/FAQ#FAQ-HowcanIrewindtheoffsetintheconsumer&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;</description>
        </item>
        
        <item>
            <title>Scaling Kafka with Docker Containers</title>
            <link>https://jeqo.github.io/post/2017-01-15-scale-kafka-containers/</link>
            <pubDate>Sun, 15 Jan 2017 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2017-01-15-scale-kafka-containers/</guid>
            <description>&lt;p&gt;In this post I will show how to use Docker containers to create and scale
a Kafka cluster, and also how to create, scale and move &lt;code&gt;topics&lt;/code&gt; inside
the cluster.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Repository: &lt;a href=&#34;https://github.com/jeqo/post-scale-kafka-containers&#34;&gt;https://github.com/jeqo/post-scale-kafka-containers&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;single-node-cluster&#34;&gt;Single-Node Cluster&lt;/h1&gt;

&lt;p&gt;First of all, let&amp;rsquo;s start with the most simple way to run Docker, that
could be useful for some development scenarios: &lt;strong&gt;Single-Node Cluster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apache Kafka architecture is based in 2 main components: The &lt;em&gt;Apache
Kafka server&lt;/em&gt; itself, and the &lt;em&gt;Apache Zookeeper server&lt;/em&gt; used for internal
coordination.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why a Kafka single-node cluster requires at least a
couple of processes.&lt;/p&gt;

&lt;p&gt;If we talk in Container terms and practices, these processes should be
run in 2 different containers.&lt;/p&gt;

&lt;p&gt;The easiest way to do this is defining these processes as
Docker Compose services is a &lt;code&gt;kafka-cluster/docker-compose.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I will use a couple of Docker images. These are fairly simple
and you can find their source code here:
&lt;a href=&#34;https://github.com/jeqo/docker-image-apache-kafka&#34;&gt;Apache Kafka&lt;/a&gt;,
&lt;a href=&#34;https://github.com/jeqo/docker-image-apache-zookeeper&#34;&gt;Apache Zookeeper&lt;/a&gt;, and
&lt;a href=&#34;https://github.com/jeqo/docker-image-confluent-platform&#34;&gt;Confluent Platform&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;version: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;2.1&amp;quot;&lt;/span&gt;
services:
  kafka:
    image: jeqo/apache-kafka:0.10.1.0-2.11
    links:
      - zookeeper
  zookeeper:
    image: jeqo/apache-zookeeper:3.4.8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This configuration defines 2 services: &lt;code&gt;kafka&lt;/code&gt; and &lt;code&gt;zookeeper&lt;/code&gt;. The &lt;code&gt;kafka&lt;/code&gt;
service &lt;code&gt;link&lt;/code&gt; and environment variable &lt;code&gt;ZOOKEEPER_CONNECT&lt;/code&gt; configure the access
from &lt;code&gt;kafka&lt;/code&gt; to &lt;code&gt;zookeeper&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;If we try to start these configuration with &lt;code&gt;docker-compose up -d&lt;/code&gt;,
Docker Compose will create a &lt;code&gt;network&lt;/code&gt; where these service can communicate.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;jeqo@jeqo-Oryx-Pro:.../single-node-kafka-cluster$ docker-compose up -d
Creating network &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;kafkacluster_default&amp;quot;&lt;/span&gt; with the default driver
Creating kafkacluster_zookeeper_1
Creating kafkacluster_kafka_1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to communicate with the cluster from your application&amp;rsquo;s
docker-compose configuration, you can do it as follows:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;version: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;2.1&amp;quot;&lt;/span&gt;
services:
  kafka:
    image: jeqo/apache-kafka-client:0.10.1.0-2.11
    command: sleep infinity
    networks:
      - default
      - kafkacluster_default &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;#(2)&lt;/span&gt;
networks: &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;#(1)&lt;/span&gt;
  kafkacluster_default:
    external: true
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we define first an &lt;code&gt;external network&lt;/code&gt; called &lt;code&gt;singlenodekafkacluster_default&lt;/code&gt;
that will give us access to the kafka cluster network. Then we add this network
to the service network.&lt;/p&gt;

&lt;p&gt;To test our client, start it up running &lt;code&gt;docker-compose up -d&lt;/code&gt; and then connect
to the cluster with the following command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ docker-compose &lt;span style=&#34;color: #008000&#34;&gt;exec&lt;/span&gt; kafka bash
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# bin/kafka-console-producer.sh --broker-list kafka:9092 --topic topic1&lt;/span&gt;
&lt;span style=&#34;color: #008000&#34;&gt;test&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# bin/kafka-topics.sh --zookeeper zookeeper:2181 --list      &lt;/span&gt;
topic1
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;multi-node-cluster&#34;&gt;Multi-Node Cluster&lt;/h1&gt;

&lt;p&gt;To scale a container using Docker Compose is as simple as using the &lt;code&gt;scale&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;docker-compose scale &lt;span style=&#34;color: #19177C&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create 2 more containers:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ docker-compose scale &lt;span style=&#34;color: #19177C&#34;&gt;kafka&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;3
Creating and starting kafkacluster_kafka_2 ... &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;done&lt;/span&gt;
Creating and starting kafkacluster_kafka_3 ... &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You, as an application developer, only need to know one of the &lt;code&gt;broker&lt;/code&gt; IPs, or use the service
name to connect to the cluster. As the documentation specifies, the client (eg. producer or consumer)
will use it only once to get the Kafka &lt;code&gt;broker&lt;/code&gt; IPs from the same cluster. This means that
Kafka scaling will be transparent to your application.&lt;/p&gt;

&lt;p&gt;To validate that all brokers are part of the cluster let&amp;rsquo;s use Zookeeper client to check. From
client container:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ docker-compose &lt;span style=&#34;color: #008000&#34;&gt;exec&lt;/span&gt; kafka bash
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# bin/zookeeper-shell.sh zookeeper:2181&lt;/span&gt;
ls /brokers/ids
&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;1003, 1002, 1001&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;scaling-topics&#34;&gt;Scaling Topics&lt;/h1&gt;

&lt;p&gt;In Kafka, &lt;code&gt;Topics&lt;/code&gt; are distributed in &lt;code&gt;Partitions&lt;/code&gt;. &lt;code&gt;Partitions&lt;/code&gt; allows &lt;strong&gt;scalability&lt;/strong&gt;, enabling &lt;code&gt;Topics&lt;/code&gt;
to fit in several nodes, and &lt;strong&gt;parallelism&lt;/strong&gt;, allowing different instances from the same &lt;code&gt;Consumer Group&lt;/code&gt; to
consume messages in parallel.&lt;/p&gt;

&lt;p&gt;Apart from this, Kafka manage how this &lt;code&gt;Partitions&lt;/code&gt; are replicated, to achieve high availability. In
this case, if you have many &lt;code&gt;replicas&lt;/code&gt; from one &lt;code&gt;partition&lt;/code&gt;, one will be the &lt;code&gt;leader&lt;/code&gt; and there will
be zero o more &lt;code&gt;followers&lt;/code&gt; spread on different nodes.&lt;/p&gt;

&lt;p&gt;How do we configure this using this simple container configuration? Let&amp;rsquo;s evaluate some scenarios:&lt;/p&gt;

&lt;h2 id=&#34;adding-new-topics-to-the-cluster&#34;&gt;Adding new topics to the cluster&lt;/h2&gt;

&lt;p&gt;Once you scale your cluster, Kafka won&amp;rsquo;t use these new nodes unless new &lt;code&gt;topics&lt;/code&gt; are created.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s test it following these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start a single node cluster&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/9xzqgicktaqhzp1fofjk9ejgm.js&#34; id=&#34;asciicast-9xzqgicktaqhzp1fofjk9ejgm&#34; async&gt;&lt;/script&gt;

&lt;ol&gt;
&lt;li&gt;Then start client, create a topic &lt;code&gt;topic1&lt;/code&gt;, and describe the topic to check the broker&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/2schnuetb24mjx6txopew51hc.js&#34; id=&#34;asciicast-2schnuetb24mjx6txopew51hc&#34; async&gt;&lt;/script&gt;

&lt;ol&gt;
&lt;li&gt;Scale your cluster to 3 nodes&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/ahibdzz7xt67q53sc5ert6qdp.js&#34; id=&#34;asciicast-ahibdzz7xt67q53sc5ert6qdp&#34; async&gt;&lt;/script&gt;

&lt;ol&gt;
&lt;li&gt;Add topics to occupy other brokers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using multiple partitions:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/enq2czkpgdf0tbf3u6fwir3ml.js&#34; id=&#34;asciicast-enq2czkpgdf0tbf3u6fwir3ml&#34; async&gt;&lt;/script&gt;

&lt;p&gt;Or using a replication factor:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/f0u67h5ufiz4zkup84a1t8t5g.js&#34; id=&#34;asciicast-f0u67h5ufiz4zkup84a1t8t5g&#34; async&gt;&lt;/script&gt;

&lt;p&gt;To decide what &lt;code&gt;replication factor&lt;/code&gt; or how many &lt;code&gt;partitions&lt;/code&gt; to use, depends
on your use case. This deserves its own blog post.&lt;/p&gt;

&lt;h2 id=&#34;expanding-topics-in-your-cluster&#34;&gt;Expanding topics in your cluster&lt;/h2&gt;

&lt;p&gt;Expanding topics in your cluster means move &lt;code&gt;topics&lt;/code&gt; and &lt;code&gt;partitions&lt;/code&gt; once
you have more &lt;code&gt;brokers&lt;/code&gt; in your &lt;code&gt;cluster&lt;/code&gt;, because, as show before,
your new &lt;code&gt;brokers&lt;/code&gt; won&amp;rsquo;t store any data, once they are created, unless
you create new &lt;code&gt;topics&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can do this 3 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Identify which topics do you want to move.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Generate a candidate reassignment. This could be done automatically, or
you can decide how to redistribute your topics.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Execute your reassignment plan.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can do this following the documentation here: &lt;a href=&#34;http://kafka.apache.org/documentation/#basic_ops_cluster_expansion&#34;&gt;http://kafka.apache.org/documentation/#basic_ops_cluster_expansion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The steps described in the documentation are automated a bit with Ansible:&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;playbooks/prepare-reassignment.yml&lt;/code&gt; file you have 2 variables:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;vars:
  topics:
    - topic1
  broker_list: 1003
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will prepare a recipe to move your topic &lt;code&gt;topic1&lt;/code&gt; to &lt;code&gt;broker&lt;/code&gt; with id &lt;code&gt;1003&lt;/code&gt;.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/c6332x8t7yumpj65ie4qudgem.js&#34; id=&#34;asciicast-c6332x8t7yumpj65ie4qudgem&#34; async&gt;&lt;/script&gt;

&lt;p&gt;You can paste the JSON file generated into &lt;code&gt;playbooks/reassign-topic-plan.json&lt;/code&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;partitions&amp;quot;&lt;/span&gt;:[{&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;topic&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;topic1&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;partition&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;replicas&amp;quot;&lt;/span&gt;:[&lt;span style=&#34;color: #666666&#34;&gt;1003&lt;/span&gt;]}]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then run this plan with the another playbook: &lt;code&gt;playbooks/execute-reassignment.yml&lt;/code&gt;&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/99308.js&#34; id=&#34;asciicast-99308&#34; async&gt;&lt;/script&gt;

&lt;h1 id=&#34;confluent-platform-images&#34;&gt;Confluent Platform images&lt;/h1&gt;

&lt;p&gt;All these could be done in the same way with &lt;a href=&#34;https://www.confluent.io/&#34;&gt;Confluent Platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is a couple of directories &lt;code&gt;confluent-cluster&lt;/code&gt; and &lt;code&gt;confluent-client&lt;/code&gt; to test this out:&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://asciinema.org/a/a446bixdfn3l8xqoiolmsmlqg.js&#34; id=&#34;asciicast-a446bixdfn3l8xqoiolmsmlqg&#34; async&gt;&lt;/script&gt;

&lt;p&gt;Hope this post help you to understand Kafka &lt;code&gt;topics&lt;/code&gt; and how &lt;code&gt;containers&lt;/code&gt; can
help you to run clusters in seconds :)&lt;/p&gt;

&lt;p&gt;And, you know, run &amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;es&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;.&lt;a href=&#34;https://twitter.com/apachekafka&#34;&gt;@apachekafka&lt;/a&gt; everywhere :) &lt;a href=&#34;https://t.co/AcEmkRBCpv&#34;&gt;pic.twitter.com/AcEmkRBCpv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Gwen (Chen) Shapira (@gwenshap) &lt;a href=&#34;https://twitter.com/gwenshap/status/777660752626851840&#34;&gt;19 de septiembre de 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Speed up your Oracle Database provisioning with Docker and Ansible</title>
            <link>https://jeqo.github.io/post/2016-05-26-speed-up-oracle-database-provisioning-ansible-docker/</link>
            <pubDate>Thu, 26 May 2016 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2016-05-26-speed-up-oracle-database-provisioning-ansible-docker/</guid>
            <description>&lt;p&gt;Warming up before &lt;a href=&#34;http://www.amis-conference.com/Program&#34;&gt;AMIS 25th Conference&lt;/a&gt;
event where I will be presenting with my friend
and colleague Arturo Viveros (@gugalnikov)
&lt;a href=&#34;http://www.amis-conference.com/Session-Catalog#session1168&#34;&gt;about Oracle SOA Suite provisioning&lt;/a&gt;,
I want to share some practices that help us to provide Oracle Database instances
between developers and improve our productivity.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Since I started working with Oracle technologies, almost 7 years ago, provide
Oracle Database instances has been always a &lt;em&gt;not so easy&lt;/em&gt; process. It demands
configuring the operating system with the right packages and kernel params,
then prepare user and groups, and after that install the Database engine.
Once you have your engine installed, you can start creating database instances.&lt;/p&gt;

&lt;p&gt;Now that you have a running Database instance, you are able to
start your database development: creating schemas, running SQL scripts,
and connect your applications to store data.&lt;/p&gt;

&lt;p&gt;So, should I repeat this process on each developer workstation?&lt;/p&gt;

&lt;p&gt;There are several options to improve this process: share one database between
all developers, creating and share a VM image between developers, or
actually use an automation tool like Vagrant and Packer to create images,
or just provide the installation automated a tool like Puppet/Chef.&lt;/p&gt;

&lt;p&gt;I will share how we are doing it now in a current project using Docker
as Container platform, and Ansible as our automation tool.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get started&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;defining-the-process&#34;&gt;Defining the process&lt;/h1&gt;

&lt;p&gt;After several months working with automation tools, I understand a key principle
about automate provisioning: &lt;strong&gt;&amp;ldquo;divide and conquer&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Because provision some type of systems is not always a simple process as:
&lt;em&gt;download, unzip and run&lt;/em&gt;, in some cases you need to define your
provisioning process in steps, so you can define this steps as checkpoints,
and don&amp;rsquo;t get bored re-running process from scratch. I mean: from configuring
your OS for running Oracle Database to actually run your SQL scripts is a
long way right? Even if you automate it or do it manually.&lt;/p&gt;

&lt;p&gt;In this case, as I explained before, we have 3 major steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prepare your OS and install database software&lt;/li&gt;
&lt;li&gt;Create database instance&lt;/li&gt;
&lt;li&gt;Run scripts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And each step will become a checkpoint, i.e. a Docker image.&lt;/p&gt;

&lt;p&gt;I won&amp;rsquo;t go into every detail about installing Oracle Database, because there
are plenty information about this. At Sysco, we have developed several
Ansible roles to automate installation and configuration of Oracle software:
&lt;a href=&#34;http://github.com/sysco-middleware&#34;&gt;http://github.com/sysco-middleware&lt;/a&gt;. Therefore, I will cover only how do we
separate this process into steps using Docker and Ansible.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you need to check more about how Docker integrates with Ansible,
take a lot to my previous post:
&lt;a href=&#34;http://jeqo.github.io/blog/devops/ansible-agentless-provisioning/&#34;&gt;http://jeqo.github.io/blog/devops/ansible-agentless-provisioning/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;step-1-install-oracle-database&#34;&gt;Step 1: Install Oracle Database&lt;/h1&gt;

&lt;p&gt;Go to the first repository called: docker-image-oracle-database
&lt;a href=&#34;http://github.com/sysco-middleware/docker-image-oracle-database&#34;&gt;http://github.com/sysco-middleware/docker-image-oracle-database&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is how we create an image with Oracle Database 11g (or 12c) installed
using Ansible:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;- hosts: 127.0.0.1 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# &amp;gt;&amp;gt;&amp;gt; (1)&lt;/span&gt;
  connection: local
  vars_files:
    - vars/main.yml
  tasks:
    - name: create container
      docker:
        name: tmp-oracle-database
        image: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{{&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;base_image&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;}}&amp;quot;&lt;/span&gt;
        command: sleep infinity
        volumes:
          - &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/installers/oracle/db/11.2/database/11.2.0.4:/srv/files&amp;quot;&lt;/span&gt;
        state: started

    - add_host:
        name: tmp-oracle-database
        groups: docker
        ansible_connection: docker

- hosts: tmp-oracle-database &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# &amp;gt;&amp;gt;&amp;gt; (2)&lt;/span&gt;
  connection: docker
  roles:
    - role: sysco-middleware.oracle-database
      oracle_database_version: 11g
      oracle_database_edition: SE
      oracle_database_installer: /srv/files/database/runInstaller

- hosts: 127.0.0.1 &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# &amp;gt;&amp;gt;&amp;gt; (3)&lt;/span&gt;
  connection: local
  vars_files:
    - vars/main.yml
  tasks:
    - name: docker commit
      command: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;docker&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;commit&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;tmp-oracle-database&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;image_name&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;}}:{{&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;item&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;}}&amp;quot;&lt;/span&gt;
      with_items: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{{&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;tags&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;}}&amp;quot;&lt;/span&gt;

    - name: docker kill
      command: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;docker&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;kill&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;tmp-oracle-database&amp;quot;&lt;/span&gt;

    - name: docker rm
      command: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;docker&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;rm&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;tmp-oracle-database&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have 3 main steps here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First we create the containers using a variable that contains the base
image: &amp;ldquo;syscomiddleware/oraclelinux:6.7&amp;rdquo; that is based in Oracle Linux official
image, with some packages installed. And then we add the running docker container
as an Ansible host.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Second, we connect to the running docker container, and run our
Oracle Database role (&lt;a href=&#34;https://github.com/sysco-middleware/ansible-role-oracle-database&#34;&gt;https://github.com/sysco-middleware/ansible-role-oracle-database&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Finally, after installing Oracle database software, I create a checkpoint:
commit container as an image, kill and remove running container, and
optionally (and if you have a private repository) push your image.
(check this issue about sharing
Oracle software inside container images:
&lt;a href=&#34;https://github.com/oracle/docker-images/issues/97)&#34;&gt;https://github.com/oracle/docker-images/issues/97)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To run this process you just need:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ ansible-playbook main.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To check that our &amp;ldquo;oracle-database&amp;rdquo; image is created successfully, just run&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ docker images
REPOSITORY                        TAG                    IMAGE ID            CREATED             SIZE
syscomiddleware/oracle-database   oraclelinux-11.2.0.4   15eb5554debd        &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; hours ago         6.301 GB
syscomiddleware/oracle-database   latest                 ab59ccd81cba        &lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; hours ago         6.301 GB 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The main goal here is that we have a checkpoint that represents a container
with Database engine installed. This is a unique image that can be reused to
move forward.&lt;/p&gt;

&lt;h1 id=&#34;step-2-create-database-instance&#34;&gt;Step 2: Create database instance&lt;/h1&gt;

&lt;p&gt;Once we have the Oracle Database image, we won&amp;rsquo;t have to reinstall it again! :)
&amp;hellip;as far as we keep using Docker and at least until we find out how to
improve the installation process.&lt;/p&gt;

&lt;p&gt;So, we can move forward from this point up to the next stage: create a database
instance.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s go and checkout this repository:
&lt;a href=&#34;https://github.com/sysco-middleware/docker-image-oracle-database-instance&#34;&gt;https://github.com/sysco-middleware/docker-image-oracle-database-instance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we follow the same approach as previous step: prepare temporal containers,
run Ansible roles and commit image.&lt;/p&gt;

&lt;p&gt;You can check the main.yml file here: &lt;a href=&#34;https://github.com/sysco-middleware/docker-image-oracle-database-instance/blob/master/main.yml&#34;&gt;https://github.com/sysco-middleware/docker-image-oracle-database-instance/blob/master/main.yml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And as you see, we are using another Ansible role called &amp;ldquo;oracle-database-instance&amp;rdquo;
that is used to create an instance and prepare listener:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;- hosts: tmp-oracle-db-instance
  connection: docker
  roles:
    - role: sysco-middleware.oracle-database-instance
      oracle_database_version: 11g
      oracle_database_sid: orcl
      oracle_database_global_name: orcl
      oracle_database_template_name: General_Purpose.dbc
      oracle_database_admin_password: welcome1
      oracle_database_auto_memory_mgnt: TRUE
      oracle_database_memory_percentage: 80
      oracle_database_memory_total: 1024
      oracle_database_type: MULTIPURPOSE
      oracle_database_listener_name: LISTENER
      oracle_database_listener_port: 1521
      oracle_database_init_params: JAVA_JIT_ENABLED=FALSE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After running this Ansible playbook, we will have a new image called:
&lt;em&gt;oracle-database-instance&lt;/em&gt; tagged with its corresponding OS and version.&lt;/p&gt;

&lt;p&gt;But this process is a little bit different from previous case:
As you can see in this main.yml file, there is an additional step:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;- name: build image
  command: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;docker&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;-t&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;image_name&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;docker&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is an important step, because it involves the usage of Dockerfile to
prepare a Docker image.&lt;/p&gt;

&lt;p&gt;To give a small background about this: Docker is prepared to isolate
process and files, and by convention you should run only 1 process by
container. To define this process, you will use a Dockerfile to specify
which command should be run, and this process should persist over time, because
if it ends, your container will be stopped.&lt;/p&gt;

&lt;p&gt;In our case, we need to start our database instance. And to do this we will use a
Dockerfile. But, as you know, we don&amp;rsquo;t have a out-of-the-box script that starts
the instance and keep this process alive and printing logging messages.
But we can create something similar:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #19177C&#34;&gt;LISTENERS_ORA&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;$ORACLE_HOME/network/admin/listener.ora

cp &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;LISTENERS_ORA&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;.tmpl&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;$&lt;span style=&#34;color: #BA2121&#34;&gt;LISTENERS_ORA&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
sed -i &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;s/%hostname%/&lt;/span&gt;$&lt;span style=&#34;color: #BA2121&#34;&gt;HOSTNAME/g&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;LISTENERS_ORA&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
sed -i &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;s/%port%/1521/g&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;LISTENERS_ORA&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
bin/lsnrctl start &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
bin/dbstart $ORACLE_HOME
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Thanks to GitHub user &amp;ldquo;wnameless&amp;rdquo; that share how to do this in its Docke Image
for Oracle XE: &lt;a href=&#34;https://github.com/wnameless/docker-oracle-xe-11g&#34;&gt;https://github.com/wnameless/docker-oracle-xe-11g&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here, we not only start and read a log file, but update our listener file. Why?
Because, also by convention, every time a container starts, container&amp;rsquo;s hostname
gets updated.
So, to keep our database instance consistent, we have to update our listener.ora accordingly.&lt;/p&gt;

&lt;p&gt;Here is our Dockerfile:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;FROM tmp&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;oracle&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;db&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;instance

MAINTAINER Jorge Quilcate &amp;lt;jorge.quilcate&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;@&lt;/span&gt;sysco.no&amp;gt;

USER oracle

ENV ORACLE_HOME &lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;home&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;oracle&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;product&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;oracle_home
ENV ORACLE_SID orcl

WORKDIR &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;ORACLE_HOME

ADD listener.ora.tmpl network&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;admin&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;listener.ora.tmpl
ADD startup.sh .

CMD sh startup.sh &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tail &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;f startup.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, I start the process and tail the startup log file to keep our
container running.&lt;/p&gt;

&lt;p&gt;And each time we want to run this image, this process will be executed, unless
you override it in your &lt;em&gt;&amp;ldquo;docker run&amp;rdquo;&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;You can test this image by running:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ docker run -it syscomiddleware/oracle-database-instance:oraclelinux-11.2.0.4 
LSNRCTL &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; Linux: Version 11.2.0.4.0 - Production on 25-MAY-2016 17:00:37

Copyright &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;c&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; 1991, 2013, Oracle.  All rights reserved.

Starting /home/oracle/product/oracle_home/bin/tnslsnr: please wait...

TNSLSNR &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; Linux: Version 11.2.0.4.0 - Production
System parameter file is /home/oracle/product/oracle_home/network/admin/listener.ora
Log messages written to /home/oracle/product/diag/tnslsnr/02b9ae1e3ab1/listener/alert/log.xml
Listening on: &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;ADDRESS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;PROTOCOL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;ipc&lt;span style=&#34;color: #666666&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;KEY&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;EXTPROC1521&lt;span style=&#34;color: #666666&#34;&gt;)))&lt;/span&gt;
Listening on: &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;ADDRESS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;PROTOCOL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;tcp&lt;span style=&#34;color: #666666&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;HOST&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;02b9ae1e3ab1&lt;span style=&#34;color: #666666&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;PORT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;1521&lt;span style=&#34;color: #666666&#34;&gt;)))&lt;/span&gt;

Connecting to &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;ADDRESS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;PROTOCOL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;IPC&lt;span style=&#34;color: #666666&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;KEY&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;EXTPROC1521&lt;span style=&#34;color: #666666&#34;&gt;)))&lt;/span&gt;
STATUS of the LISTENER
------------------------
Alias                     LISTENER
Version                   TNSLSNR &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; Linux: Version 11.2.0.4.0 - Production
Start Date                25-MAY-2016 17:00:42
Uptime                    &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; days &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; hr. &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; min. &lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt; sec
Trace Level               off
Security                  ON: Local OS Authentication
SNMP                      OFF
Listener Parameter File   /home/oracle/product/oracle_home/network/admin/listener.ora
Listener Log File         /home/oracle/product/diag/tnslsnr/02b9ae1e3ab1/listener/alert/log.xml
Listening Endpoints Summary...
  &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;ADDRESS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;PROTOCOL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;ipc&lt;span style=&#34;color: #666666&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;KEY&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;EXTPROC1521&lt;span style=&#34;color: #666666&#34;&gt;)))&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;DESCRIPTION&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;ADDRESS&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;PROTOCOL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;tcp&lt;span style=&#34;color: #666666&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;HOST&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;02b9ae1e3ab1&lt;span style=&#34;color: #666666&#34;&gt;)(&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;PORT&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;1521&lt;span style=&#34;color: #666666&#34;&gt;)))&lt;/span&gt;
The listener supports no services
The &lt;span style=&#34;color: #008000&#34;&gt;command&lt;/span&gt; completed successfully
Processing Database instance &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;orcl&amp;quot;&lt;/span&gt;: log file /home/oracle/product/oracle_home/startup.log
Total System Global Area  &lt;span style=&#34;color: #666666&#34;&gt;801701888&lt;/span&gt; bytes
Fixed Size		    &lt;span style=&#34;color: #666666&#34;&gt;2257520&lt;/span&gt; bytes
Variable Size		  &lt;span style=&#34;color: #666666&#34;&gt;276827536&lt;/span&gt; bytes
Database Buffers	  &lt;span style=&#34;color: #666666&#34;&gt;515899392&lt;/span&gt; bytes
Redo Buffers		    &lt;span style=&#34;color: #666666&#34;&gt;6717440&lt;/span&gt; bytes
Database mounted.
Database opened.
SQL&amp;gt; Disconnected from Oracle Database 11g Release 11.2.0.4.0 - 64bit Production

bin/dbstart: Database instance &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;orcl&amp;quot;&lt;/span&gt; warm started.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From other terminal you can check container name and inspect for its IP address:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ docker ps
CONTAINER ID        IMAGE                                      COMMAND                  CREATED              STATUS              PORTS               NAMES
21713e2f2c59        syscomiddleware/oracle-database-instance   &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/bin/sh -c &amp;#39;sh start&amp;quot;&lt;/span&gt;   About a minute ago   Up About a minute                       adoring_yalow
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a minute to understand the process: We will have images by steps
from our provisioning process, and each step can be tagged by version and OS
(and any other relevant information). This will create a group of images that
will be reusable, and if we have issues, we can identify and solve specific
tasks, instead of re-run everything from scratch.&lt;/p&gt;

&lt;p&gt;As learning any other technology, this will take some time at the beginning
of the process, but as we understand and collaborate to improve this images,
it will worth our effort.&lt;/p&gt;

&lt;p&gt;First, you can see that a container name is assigned randomly: &amp;ldquo;adoring_yalow&amp;rdquo;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ docker inspect adoring_yalow
...
&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Networks&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;bridge&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;IPAMConfig&amp;quot;&lt;/span&gt;: null,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Links&amp;quot;&lt;/span&gt;: null,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Aliases&amp;quot;&lt;/span&gt;: null,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;NetworkID&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;c72c01d764b3aa7f30ffa220ed91a15aa1bb2f7c3396008601cc0137512612cb&amp;quot;&lt;/span&gt;,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;EndpointID&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;ea1e3277916bcebaa6fbba42ab6cdea6ebd597a2ce20c274b415f4ad89f05bee&amp;quot;&lt;/span&gt;,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Gateway&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;172.17.0.1&amp;quot;&lt;/span&gt;,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;IPAddress&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;172.17.0.2&amp;quot;&lt;/span&gt;,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;IPPrefixLen&amp;quot;&lt;/span&gt;: 16,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;IPv6Gateway&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;GlobalIPv6Address&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;GlobalIPv6PrefixLen&amp;quot;&lt;/span&gt;: 0,
                    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;MacAddress&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;02:42:ac:11:00:02&amp;quot;&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And test to connect from your favorite IDE using a JDBC URL like:&lt;/p&gt;

&lt;p&gt;jdbc:oracle:thin:@172.17.0.2:1521:orcl&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jeqo.github.io/images/2016-05-24-speed-up-oracle-database-provisioning-ansible-docker/jdbc-test.png&#34; alt=&#34;NetBeans JDBC Connection&#34; title=&#34;NetBeans JDBC Connection&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;step-3-run-sql-scripts&#34;&gt;Step 3: Run SQL scripts&lt;/h1&gt;

&lt;p&gt;This is a more &amp;ldquo;custom&amp;rdquo; step as you can use now use this images for different
purposes (e.g: create a schema, run SQL scripts, add more configurations, or
if you are working with Fusion Middleware products, you can create RCU schemas).&lt;/p&gt;

&lt;p&gt;Depending on your use-case it will be easier, or more efective, to use
Dockerfile than Ansible playbooks.&lt;/p&gt;

&lt;p&gt;In this case, I will show you how to create an schema to start your Java
application development, for instance.&lt;/p&gt;

&lt;p&gt;I will recommend you to use Docker Compose (&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;https://docs.docker.com/compose/&lt;/a&gt;)
just to simplify the execution of Docker command, and link containers together.&lt;/p&gt;

&lt;p&gt;I have created a repository (&lt;a href=&#34;https://github.com/jeqo/post-oracle-database-docker&#34;&gt;https://github.com/jeqo/post-oracle-database-docker&lt;/a&gt;)
to host this sample.&lt;/p&gt;

&lt;p&gt;You can check that there is a directory called &amp;ldquo;sample&amp;rdquo; that will be assumed as
the &lt;em&gt;project name&lt;/em&gt; by Docker Compose.&lt;/p&gt;

&lt;p&gt;Inside is a file called &amp;ldquo;docker-compose.yml&amp;rdquo; that defines &lt;em&gt;container services&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;version: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;
services:
  db:
    build: db
    ports:
      - &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;10521:1521&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case, it defines a service (a container), that will be built from
a Dockerfile inside a &amp;ldquo;db&amp;rdquo; directory, and will forward its 1521 port
to your hosts port 10521, so you can use it from a local application.&lt;/p&gt;

&lt;p&gt;This Dockerfile contains instructions to create an schema called &amp;ldquo;test&amp;rdquo;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;FROM syscomiddleware&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;oracle&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;database&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;instance:oraclelinux&lt;span style=&#34;color: #666666&#34;&gt;-11.2.0.4&lt;/span&gt;

MAINTAINER Jorge Quilcate &amp;lt;jorge.quilcate&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;@&lt;/span&gt;sysco.no&amp;gt;

ADD create&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;schema.sql .

RUN sh startup.sh &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    while ! grep &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;bin/dbstart: Database instance \&amp;quot;orcl\&amp;quot; warm started.&amp;quot;&lt;/span&gt; startup.log; do sleep &lt;span style=&#34;color: #666666&#34;&gt;10&lt;/span&gt;; done &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    echo exit | bin&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;sqlplus system&lt;span style=&#34;color: #666666&#34;&gt;/&lt;/span&gt;welcome1 &lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;@&lt;/span&gt;create&lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;schema.sql

CMD sh startup.sh &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    tail &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt;f startup.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, just execute &amp;ldquo;docker-compose up -d&amp;rdquo; and this container will be built and
started.&lt;/p&gt;

&lt;p&gt;To check its execution, run &amp;ldquo;docker-compose logs -f&amp;rdquo; and that&amp;rsquo;s it.&lt;/p&gt;

&lt;p&gt;You can customize your Docker Compose file, or just start building more layers on
top of the database instance image.&lt;/p&gt;

&lt;p&gt;At AMIS25, we will show how to use this instance to build a SOA Suite database
and then provide customs SOA Suite Domains, but also show different experiences
with different &amp;ldquo;DevOps&amp;rdquo; technologies. Hope to see you there!&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Ansible - an agentless provisioning</title>
            <link>https://jeqo.github.io/post/2016-03-30-ansible-agentless-provisioning/</link>
            <pubDate>Wed, 30 Mar 2016 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2016-03-30-ansible-agentless-provisioning/</guid>
            <description>&lt;p&gt;Ansible is an automation tool that is recognized for be simple and
powerful at the same time. From my experience, I can say this is mainly
because of its scripting language: YAML, and its agentless architecture.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;yaml-and-ansible-components&#34;&gt;YAML and Ansible components&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;YAML is a human friendly data serialization standard for all programming
  languages&amp;rdquo; (Source: &lt;a href=&#34;http://yaml.org/&#34;&gt;http://yaml.org/&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that is actually really easy to understand and start working
with it. For example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;- hosts: webserver
  tasks:
    - package: apache
        state: latest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This &lt;strong&gt;&amp;ldquo;playbook&amp;rdquo;&lt;/strong&gt; says that a &lt;em&gt;webserver&lt;/em&gt; host have 1 task: install latest
Apache package, using a package &lt;strong&gt;&amp;ldquo;module&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Pretty simple eh?&lt;/p&gt;

&lt;p&gt;To check how powerful Ansible can be, take a look on their Module Index:
&lt;a href=&#34;http://docs.ansible.com/ansible/modules_by_category.html&#34;&gt;http://docs.ansible.com/ansible/modules_by_category.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To achieve reusability: These tasks can be grouped
as &lt;strong&gt;&amp;ldquo;roles&amp;rdquo;&lt;/strong&gt;, that are a compilation of tasks
to execute a common goal. e.g: a Java role to install Java SDK on your
node.&lt;/p&gt;

&lt;p&gt;Those are the main components of Ansible: Playbooks, Modules, and Roles.&lt;/p&gt;

&lt;h2 id=&#34;agentless-architecture&#34;&gt;Agentless architecture&lt;/h2&gt;

&lt;p&gt;This means that you don&amp;rsquo;t need a &amp;ldquo;ansible-client&amp;rdquo; in your node to run
tasks, you can have a master that says what you need to run on your nodes.
This is an important feature compared to other tools where
you need a &amp;ldquo;***-client&amp;rdquo; to make your node translate and run commands:
&lt;a href=&#34;https://www.ansible.com/benefits-of-agentless-architecture&#34;&gt;https://www.ansible.com/benefits-of-agentless-architecture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t need a client but you need some packages. But this packages
are ssh and python-related and they are very common:
&lt;a href=&#34;http://docs.ansible.com/ansible/intro_installation.html#managed-node-requirements&#34;&gt;http://docs.ansible.com/ansible/intro_installation.html#managed-node-requirements&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ansible also have a default &amp;ldquo;push&amp;rdquo; approach, where a master sends commands
to your nodes. This is also different from other tools that are based on a
&amp;ldquo;pull&amp;rdquo; approach, where the node asks for commands, although this is also
possible with Ansible:
&lt;a href=&#34;http://docs.ansible.com/ansible/playbooks_intro.html#ansible-pull&#34;&gt;http://docs.ansible.com/ansible/playbooks_intro.html#ansible-pull&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a final feature I would like to mention: Connection Type.
By default Ansible relies on SSH to send commands to your nodes, but
there are cases where SSH is not an option or you don&amp;rsquo;t need it:
local commands, Windows, Docker.&lt;/p&gt;

&lt;p&gt;In these cases, connection type option enables your playbook to run
commands using WinRM in the case of Windows,
or Docker execute commands on Docker containers, or just run local
commands in your workstation.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check some code:&lt;/p&gt;

&lt;p&gt;I have implemented a Ansible Role to install Java some time ago:
&lt;a href=&#34;https://github.com/jeqo/ansible-role-java&#34;&gt;https://github.com/jeqo/ansible-role-java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just to explain what it does, let&amp;rsquo;s check the main task file:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  - debug:
      msg: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;This&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;Java&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;Provider&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;will&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;be&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;installed:&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;java_provider&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;}}&amp;quot;&lt;/span&gt;

  - include: install-{{ java_provider }}.yml

  - include: set-java-home.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will show a message, include a task depending on &amp;ldquo;java_provider&amp;rdquo;
variable and finally set JAVA_HOME variable.&lt;/p&gt;

&lt;p&gt;Also this role has a &amp;ldquo;tests&amp;rdquo; directory where you can add playbooks
to test your role:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;- name: test install openjdk jdk 8 on centos 7
  hosts: test01
  roles:
    - role: java
      java_provider: openjdk
      java_version: 8
      java_type: jdk
- name: test install openjdk jre 8 on centos 7
  hosts: test02
  roles:
    - role: java
      java_provider: openjdk
      java_version: 8
      java_type: jre
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# more tests...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And I test this playbooks using Vagrant and VirtualBox:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #880000&#34;&gt;Vagrant&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;configure(&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;config&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;

  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;provision &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;ansible&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;ansible&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
    ansible&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;playbook &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;test.yml&amp;quot;&lt;/span&gt;
    ansible&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;galaxy_role_file &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;roles.yml&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;

  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;define &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;test01&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;node&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
    node&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;box &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;jeqo/ansible-centos7&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;

  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;define &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;test02&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;node&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
    node&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;box &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;jeqo/ansible-centos7&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# more test nodes...&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, lets test that OpenJDK 8 is running OK in Centos:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;vagrant up test01
...

PLAY &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;test&lt;/span&gt; install openjdk jdk &lt;span style=&#34;color: #666666&#34;&gt;8&lt;/span&gt; on centos 7&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; **********************************

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;setup&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; *******************************************************************
ok: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;test01&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : debug&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; ************************************************************
ok: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;test01&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;This Java Provider will be installed: openjdk&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : include&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; **********************************************************
included: /home/jeqo/dev/jeqo/ansible-role-java/tests/roles/java/tasks/install-openjdk.yml &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; test01

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : set_fact&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; *********************************************************
skipping: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;test01&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : set_fact&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; *********************************************************
ok: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;test01&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : set_fact&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; *********************************************************
skipping: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;test01&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : set_fact&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; *********************************************************
ok: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;test01&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : install openjdk &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;debian&lt;span style=&#34;color: #666666&#34;&gt;)]&lt;/span&gt; *****************************************
skipping: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;test01&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;java : install openjdk &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;redhat&lt;span style=&#34;color: #666666&#34;&gt;)]&lt;/span&gt; *****************************************
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But one thing I always want is to reuse this roles on Docker containers,
without prepare a Container with SSH, that is recognized as an
anti-pattern: &lt;a href=&#34;https://jpetazzo.github.io/2014/06/23/docker-ssh-considered-evil/&#34;&gt;https://jpetazzo.github.io/2014/06/23/docker-ssh-considered-evil/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, since Ansible 2.0 a Docker connection type is included OOTB, and
I give it a try: &lt;a href=&#34;https://github.com/jeqo/poc-ansible-docker&#34;&gt;https://github.com/jeqo/poc-ansible-docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I added a playbook to create a container:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;- hosts: 127.0.0.1
  connection: local
  tasks:
    - name: my container
      docker:
        name: poccontainer
        image: centos
        command: sleep infinity
        state: started
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I&amp;rsquo;m using &amp;ldquo;connection: local&amp;rdquo; to execute commands locally.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
a5e49bd032be        centos              &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;sleep infinity&amp;quot;&lt;/span&gt;    About an hour ago   Up About an hour                        poccontainer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And once I have a container running, I can run this playbook:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;- hosts: poccontainer
  connection: docker
  pre_tasks:
    - package: name=sudo
    - command: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;sed&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;-i&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;-e&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;\&amp;quot;s/Defaults&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;requiretty.*/&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;#Defaults&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;requiretty/g\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;/etc/sudoers&amp;quot;&lt;/span&gt;
  roles:
    - role: java
      java_provider: openjdk
      java_type: jdk
      java_version: 8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pre-tasks are required to install sudo package and configure tty. And
then run role as usual:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ ansible-playbook provisioning.yml -vvvv
Using /home/jeqo/dev/jeqo/poc-ansible-docker/ansible.cfg as config file
Loaded callback default of &lt;span style=&#34;color: #008000&#34;&gt;type&lt;/span&gt; stdout, v2.0
&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt; plays in provisioning.yml

PLAY ***************************************************************************

TASK &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;setup&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; *******************************************************************
ESTABLISH DOCKER CONNECTION FOR USER: None
&amp;lt;poccontainer&amp;gt; EXEC &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;/usr/bin/docker&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;-i&amp;#39;&lt;/span&gt;, u&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;poccontainer&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;/bin/sh&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;/bin/sh -c \&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;umask&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;22&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
mkdir -p &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;` echo &lt;/span&gt;$&lt;span style=&#34;color: #BA2121&#34;&gt;HOME/.ansible/tmp/ansible-tmp-1459355431.02-32251179247729 `&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
&lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;` echo &lt;/span&gt;$&lt;span style=&#34;color: #BA2121&#34;&gt;HOME/.ansible/tmp/ansible-tmp-1459355431.02-32251179247729 `&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;]&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;lt;poccontainer&amp;gt; PUT /tmp/tmpNCOaxi TO /root/.ansible/tmp/ansible-tmp-1459355431.02-32251179247729/setup&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;lt;poccontainer&amp;gt; EXEC [&amp;#39;&lt;/span&gt;/usr/bin/docker&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;exec&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;-i&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;, u&amp;#39;&lt;/span&gt;poccontainer&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;/bin/sh&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt;-c&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;, u&amp;#39;&lt;/span&gt;/bin/sh -c &lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;LANG&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;en_US.UTF-8 
&lt;span style=&#34;color: #19177C&#34;&gt;LC_ALL&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;en_US.UTF-8 &lt;span style=&#34;color: #19177C&#34;&gt;LC_MESSAGES&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;en_US.UTF-8 /usr/bin/python /root/.ansible/tmp/ansible-tmp-1459355431.02-32251179247729/setup; 
rm -rf &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/root/.ansible/tmp/ansible-tmp-1459355431.02-32251179247729/&amp;quot;&lt;/span&gt; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
ok: &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;poccontainer&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This samples show how versatile Ansible is, using roles and connection
type. But there are more platforms where Ansible can fit, as with AWS:
&lt;a href=&#34;https://aws.amazon.com/blogs/apn/getting-started-with-ansible-and-dynamic-amazon-ec2-inventory-management/&#34;&gt;https://aws.amazon.com/blogs/apn/getting-started-with-ansible-and-dynamic-amazon-ec2-inventory-management/&lt;/a&gt;
and other Cloud platforms: &lt;a href=&#34;http://docs.ansible.com/ansible/list_of_cloud_modules.html&#34;&gt;http://docs.ansible.com/ansible/list_of_cloud_modules.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;One question can be: Is this a replacement of Dockerfile? Maybe,
depends on you. Dockerfile are very simple and only works with Docker.
Dockerfile also has a nice feature to create an image each step, so
you can distribute images easily. This is missing in Ansible, where
you execute commands on a running Docker container. Also Ansible
is missing commit and push tasks to put containers on Docker Hub,
but you can replace it with local commands as here:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;- hosts: 127.0.0.1
  connection: local
  tasks:
    - name: commit
      command: docker commit poccontainer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Although Ansible also have a module to run Dockerfiles: &lt;a href=&#34;http://docs.ansible.com/ansible/docker_image_module.html&#34;&gt;http://docs.ansible.com/ansible/docker_image_module.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this helps you to get started with Ansible and Docker.&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Oracle SOA Suite 12c Docker Image</title>
            <link>https://jeqo.github.io/post/2015-09-04-oracle-soa-12c-packer-docker-hub/</link>
            <pubDate>Fri, 04 Sep 2015 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2015-09-04-oracle-soa-12c-packer-docker-hub/</guid>
            <description>&lt;p&gt;After find some limitations on building SOA Docker image using Dockerfile
(as volume access, default size image) I researched on how to improve
building process and I found &lt;a href=&#34;https://packer.io/&#34;&gt;Packer&lt;/a&gt;
(from the same guy that creates Vagrant).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;To check why using Packer instead of Dockerfiles, &lt;a href=&#34;http://mmckeen.net/blog/2013/12/27/advanced-docker-provisioning-with-packer/&#34;&gt;go here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also moved &lt;a href=&#34;https://github.com/jeqo/oracle-docker/tree/master/OracleSOA&#34;&gt;OracleSOA directory&lt;/a&gt;
from my forked &lt;a href=&#34;https://github.com/oracle/docker&#34;&gt;oracle-docker repository&lt;/a&gt; to
an independent repository: &lt;a href=&#34;https://github.com/jeqo/oracle-soa-12c-docker&#34;&gt;github.com/jeqo/oracle-soa-12c-docker&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;improvements&#34;&gt;Improvements&lt;/h2&gt;

&lt;p&gt;Basically Dockerfile scripts were moved to shell scripts and are called
from Packer.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;provisioners&amp;quot;&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;:&lt;/span&gt; [
    {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;: [
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;scripts/create-user.sh&amp;quot;&lt;/span&gt;
      ]
    },
    {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;source&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;./files/&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;destination&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/u01/&amp;quot;&lt;/span&gt;
    },
    {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;: [
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;scripts/install-java.sh&amp;quot;&lt;/span&gt;
      ],
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;environment_vars&amp;quot;&lt;/span&gt;: [
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;JAVA_RPM=/data/{{user `java_rpm`}}&amp;quot;&lt;/span&gt;
      ]
    },
    {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;: [
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;scripts/install-soa.sh&amp;quot;&lt;/span&gt;
      ],
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;environment_vars&amp;quot;&lt;/span&gt;: [
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;SOA_ZIP=/data/{{user `soa_zip`}}&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;SOA_PKG={{user `soa_pkg`}}&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;SOA_PKG2={{user `soa_pkg2`}}&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;JAVA_HOME=/usr/java/default&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;MW_HOME=/u01/oracle/soa&amp;quot;&lt;/span&gt;
      ]
    }
  ]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After provisioning, you can save your image, and if
you want push it to Docker Hub:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;post-processors&amp;quot;&lt;/span&gt;&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;:&lt;/span&gt; [
    [
      {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;docker-tag&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;repository&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;jeqo/oracle-soa-12c&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;12.1.3-dev&amp;quot;&lt;/span&gt;
      },
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;docker-push&amp;quot;&lt;/span&gt;
    ]
  ]
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Very simple and straightforward JSON configuration.&lt;/p&gt;

&lt;p&gt;Now you have a Docker image with SOA installer, ready
to create your domain as &lt;a href=&#34;https://github.com/jeqo/oracle-soa-12c-docker/tree/master/samples/12c-domain&#34;&gt;this sample&lt;/a&gt; explained
on &lt;a href=&#34;http://jeqo.github.io/blog/devops/docker-image-oracle-soa/&#34;&gt;my previous post&lt;/a&gt;.&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Integrate Java EE 7 and Kafka using Avro and RxJava</title>
            <link>https://jeqo.github.io/post/2015-07-31-java-ee-rxjava-kafka-avro/</link>
            <pubDate>Fri, 31 Jul 2015 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2015-07-31-java-ee-rxjava-kafka-avro/</guid>
            <description>&lt;p&gt;I decided to implement a naive integration between Java EE applications and
RxJava/Kafka/Avro, to publish and subscribe to events.&lt;/p&gt;

&lt;p&gt;You can go directly to that &lt;a href=&#34;https://github.com/jeqo/java-ee-rxjava-kafka-avro&#34;&gt;code&lt;/a&gt;, or check my approach:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;I have been playing with &lt;a href=&#34;http://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt; recently, seduced by its benefits (fast, scalable,
and durable event source) to spread event using Publish/Subscribe pattern.&lt;/p&gt;

&lt;p&gt;I realized that Kafka APIs are still evolving and getting better, and it was not
easy to find an easy introduction related with the current released version.
I am using &lt;strong&gt;0.8.2.1 release&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I tested its APIs to &lt;em&gt;produce&lt;/em&gt; and &lt;em&gt;subscribe&lt;/em&gt; to messages using this &lt;a href=&#34;https://github.com/mdkhanga/my-blog-code&#34;&gt;tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kafka support 2 types of messages: &lt;em&gt;Strings&lt;/em&gt; and &lt;em&gt;byte[]&lt;/em&gt;. So, after testing sample
String messages, I required to send POJO as messages. I came out with
another interesting Apache project: &lt;a href=&#34;https://avro.apache.org&#34;&gt;Avro&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using Avro tutorials (&lt;a href=&#34;https://avro.apache.org/docs/current/gettingstartedjava.html&#34;&gt;https://avro.apache.org/docs/current/gettingstartedjava.html&lt;/a&gt;) and
another sources (&lt;a href=&#34;https://github.com/wpm/AvroExample&#34;&gt;https://github.com/wpm/AvroExample&lt;/a&gt;) I found how to Serialize/Deserialize POJO, but without
persisting files on disk, just keeping them as ByteStreams. So, now I have
Events, defined by &lt;a href=&#34;https://avro.apache.org/docs/current/spec.html#schema_record&#34;&gt;Avro schemas&lt;/a&gt;, and Kafka APIs ready to publish and subscribe
to these events.&lt;/p&gt;

&lt;p&gt;Finally, I wanted to add these cool features to my Java EE 7 apps. First,
using CDI was simple to inject Producer and publish messages when your application
produces events, but when it comes to consume events the approach is different.
You are no longer producing events, but working with &amp;ldquo;streams&amp;rdquo; of data. So, I
decided to use &lt;a href=&#34;https://github.com/ReactiveX/RxJava&#34;&gt;RxJava&lt;/a&gt; that applies concepts as
&lt;a href=&#34;http://reactivex.io/documentation/observable.html&#34;&gt;&lt;strong&gt;Observables&lt;/strong&gt;&lt;/a&gt; and &lt;strong&gt;Subscribers&lt;/strong&gt; that
fits smoothly with my requirements: each Kafka topic will be &amp;ldquo;observable&amp;rdquo; stream and each
Consumer will subscribe to that &amp;ldquo;observable&amp;rdquo;. Let&amp;rsquo;s check the code:&lt;/p&gt;

&lt;h2 id=&#34;sample-java-ee-app&#34;&gt;Sample Java EE App&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jeqo/java-ee-rxjava-kafka-avro/releases/tag/v0.0.1&#34;&gt;Tag: v0.0.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First step is just having a couple of RESTful services, implemented with JAX-RS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clients Resource: List (GET) and Add (POST) Clients&lt;/li&gt;
&lt;li&gt;Events Resource: List (GET) Client Added Events&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Path&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;clients&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ClientsResource&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; clients &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@GET&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Produces&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;MediaType&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;getClients&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; clients&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@POST&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;addClient&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String client&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        clients&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;client&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, Clients Resource is implemented. So, how can I do to propagate
ClientAddedEvent and list them on Events resource?&lt;/p&gt;

&lt;h2 id=&#34;serializing-and-deserializing-events&#34;&gt;Serializing and Deserializing Events&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jeqo/java-ee-rxjava-kafka-avro/releases/tag/v0.0.2&#34;&gt;Tag: v0.0.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I decided to use Kafka, I realized that I can only send String and Byte
Array messages, so Avro is able to serialize POJO into byte[] and vice versa:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    ClientAddedEvent event &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; ClientAddedEvent&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;newBuilder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;jeqo&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setCreated&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getTime&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; eventSerialized &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; serializer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;serialize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;event&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    ClientAddedEvent eventDeserialized &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; deserializer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;deserialize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;eventSerialized&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    assertEquals&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;event&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; eventDeserialized&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ClientAddedEvent event is defined using Avro JSON format:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;namespace&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;com.jeqo.samples.eventsource.event&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;record&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;ClientAddedEvent&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;fields&amp;quot;&lt;/span&gt;: [
        {&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;},
        {&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;created&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;long&amp;quot;&lt;/span&gt;}
    ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adding a Maven Plugin, you will generate &lt;em&gt;ClientAddedEvent&lt;/em&gt; each time you build
your project:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.avro&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;avro-maven-plugin&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.7.7&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;generate-sources&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;schema&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;sourceDirectory&amp;gt;&lt;/span&gt;${project.basedir}/src/main/avro/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/sourceDirectory&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;outputDirectory&amp;gt;&lt;/span&gt;${project.basedir}/src/main/java/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To serialize Avro records, from POJO to Byte Array:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;EventSerializer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; SpecificRecordBase&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;serialize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;T record&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ByteArrayOutputStream out &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; ByteArrayOutputStream&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            Encoder encoder &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; EncoderFactory&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;binaryEncoder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;out&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SpecificDatumWriter&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;record&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSchema&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;record&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; encoder&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
            encoder&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;flush&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; out&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;toByteArray&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;IOException ex&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Error serializing event&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; ex&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And to deserialize:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;EventDeserializer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; SpecificRecordBase&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Class&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; type&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;EventDeserializer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Class&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; type&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; type&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; T &lt;span style=&#34;color: #0000FF&#34;&gt;deserialize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&lt;/span&gt; recordSerialized&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; SpecificDatumReader&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;read&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                    DecoderFactory&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
                    &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;binaryDecoder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;recordSerialized&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;IOException ex&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Error deserializing event&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; ex&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;publishing-and-consuming-events-from-kafka-rxjava&#34;&gt;Publishing and Consuming Events from Kafka/RxJava&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jeqo/java-ee-rxjava-kafka-avro/releases/tag/v0.0.3&#34;&gt;Tag: v0.0.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that Event serialization is done with Avro, let&amp;rsquo;s publish and subscribe
those events on Kafka:&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s define a couple of interfaces, EventServer:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;EventServer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; Observable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;consume&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and EventProducer:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;EventProducer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;publish&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;T message&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, let&amp;rsquo;s implement them with Kafka. I will focus on main functionality first:&lt;/p&gt;

&lt;p&gt;To publish messages:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;publish&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;T message&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Produce a new Kafka record&lt;/span&gt;
    ProducerRecord&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&amp;gt;&lt;/span&gt; data &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; ProducerRecord&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
            message&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSimpleName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt;
            serializer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;serialize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;message&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Publish this new record, waiting for acknowledge from Kafka&lt;/span&gt;
    Future&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;RecordMetadata&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; rs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; producerProvider&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;producer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;send&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;RecordMetadata recordMetadata&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Exception e&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                LOGGER&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Level&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Received ack for partition={0} offset = {1}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Object&lt;span style=&#34;color: #666666&#34;&gt;[]{&lt;/span&gt;recordMetadata&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;partition&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; recordMetadata&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()});&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        RecordMetadata rm &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; rs&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

        LOGGER&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Level&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Kafka Record Metadata: partition = {0} offset ={1}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Object&lt;span style=&#34;color: #666666&#34;&gt;[]{&lt;/span&gt;rm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;partition&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; rm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;offset&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()});&lt;/span&gt;

    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;InterruptedException &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt; ExecutionException e&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And on KafkaEventServer, to instantiate an RxJava observable:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; Observable&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;consume&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; Observable&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;subscriber &lt;span style=&#34;color: #666666&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            LOGGER&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Level&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Preparing Server for Event {0}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; type&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// It will observe one Topic&lt;/span&gt;
            Map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; Integer&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; topicCountMap &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            topicCountMap&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSimpleName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1);&lt;/span&gt;

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// consumerProvider will instantiate a consumer that will create a KafkaStream&lt;/span&gt;
            Map&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;KafkaStream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[],&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; consumerMap
                    &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; consumerProvider&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;consumer&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
                    &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;createMessageStreams&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;topicCountMap&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// then I will ask for the Stream from my topic, defined by Avro Record Class name&lt;/span&gt;
            List&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;KafkaStream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[],&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&amp;gt;&amp;gt;&lt;/span&gt; streams &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; consumerMap
                    &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;type&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getSimpleName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;

            KafkaStream&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[],&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&amp;gt;&lt;/span&gt; stream &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; streams&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(0);&lt;/span&gt;

            ConsumerIterator&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[],&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[]&amp;gt;&lt;/span&gt; it &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; stream&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;iterator&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// on each message published on topic, I will let the subscriber receive the new message&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;it&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;hasNext&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
                subscriber&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onNext&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
                        deserializer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;deserialize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;it&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Exception ex&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
            subscriber&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;onError&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ex&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could check *Provider class to validate how to generate a connection to Kafka
for both Publisher and Subscriber.&lt;/p&gt;

&lt;p&gt;On tag v0.0.3, you could run each class (KafkaEventServer and KafkaEventProducer)
to check that it&amp;rsquo;s working Ok with your Kafka server.&lt;/p&gt;

&lt;h2 id=&#34;putting-all-together&#34;&gt;Putting all together&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jeqo/java-ee-rxjava-kafka-avro/releases/tag/v0.1.0&#34;&gt;Tag: v0.1.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, let&amp;rsquo;s integrate this Event Sourcing engine with our Java EE app:&lt;/p&gt;

&lt;p&gt;First, create instantiate a publisher and a subscriber:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@ApplicationScoped&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ClientAddedEventProducer&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; KafkaEventProducer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ClientAddedEvent&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This means that ClientAddedEventProducer will be a &lt;em&gt;&amp;ldquo;singleton&amp;rdquo;&lt;/em&gt; and I could inject it
on my service that generates events:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ClientsResource&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Inject&lt;/span&gt;
    ClientAddedEventProducer eventProducer&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//code&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@POST&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;addClient&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String client&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        clients&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;client&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//Publishing events&lt;/span&gt;
        eventProducer&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;publish&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
                ClientAddedEvent&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;newBuilder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;client&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;setCreated&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getTime&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, instantiate a Subscriber (I think this is the most interesting part:
  how we will &lt;strong&gt;react&lt;/strong&gt; to events? ):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Extending Subscriber RxJava class to listen Observables&lt;/span&gt;
&lt;span style=&#34;color: #AA22FF&#34;&gt;@ApplicationScoped&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ClientAddedEventSubscriber&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; Subscriber&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;ClientAddedEvent&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;final&lt;/span&gt; Logger LOGGER &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; Logger&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getLogger&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ClientAddedEventSubscriber&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// This will add a new thread to our pool, to subscribe to our Observable&lt;/span&gt;
    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Resource&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;DefaultManagedExecutorService&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; ManagedExecutorService executor&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Inject&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; KafkaConsumerProvider consumerProvider&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; Subscription subscription&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// Run this on server startup, using CDI annotations&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Observes&lt;/span&gt; &lt;span style=&#34;color: #AA22FF&#34;&gt;@Initialized&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ApplicationScoped&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; Object init&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        LOGGER&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Level&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Starting subscription&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        subscription &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; KafkaEventServer&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;
                ClientAddedEvent&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                consumerProvider&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
                executor
        &lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;consume&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;subscribe&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;destroy&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@Observes&lt;/span&gt; &lt;span style=&#34;color: #AA22FF&#34;&gt;@Destroyed&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ApplicationScoped&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; Object init&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        subscription&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;unsubscribe&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onCompleted&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Not supported yet.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onError&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Throwable e&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; UnsupportedOperationException&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Not supported yet.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #AA22FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;onNext&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ClientAddedEvent t&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        LOGGER&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;Level&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Event received {0}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; t&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// How we will react to events:&lt;/span&gt;
        EventsResource&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;events&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
                &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Client Added: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; t&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot; at &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; Date&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;t&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #7D9029&#34;&gt;getCreated&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;())&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
        <item>
            <title>Oracle Fusion Middleware Chef Cookbook - New Release!</title>
            <link>https://jeqo.github.io/post/2015-07-21-chef-cookbook-oracle-fmw-0-2-0/</link>
            <pubDate>Tue, 21 Jul 2015 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2015-07-21-chef-cookbook-oracle-fmw-0-2-0/</guid>
            <description>&lt;p&gt;Yesterday, I released a new version (0.2.0) of my Oracle Fusion Middleware Cookbook
hosted on &lt;a href=&#34;https://supermarket.chef.io/cookbooks/oracle-fmw&#34;&gt;Chef Supermarket&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;This new release includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for Oracle SOA Suite 12c Quickstart installation&lt;/li&gt;
&lt;li&gt;Support for Oracle SOA/OSB Suite 11g installation and domain creation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can found usage examples on my Chef repository on GitHub: &lt;a href=&#34;https://github.com/jeqo/chef-repo&#34;&gt;https://github.com/jeqo/chef-repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking forward for your comments, and happy cooking!&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Docker image for Oracle SOA Suite 12c</title>
            <link>https://jeqo.github.io/post/2015-04-01-docker-image-oracle-soa/</link>
            <pubDate>Wed, 01 Apr 2015 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2015-04-01-docker-image-oracle-soa/</guid>
            <description>&lt;p&gt;Cool news came from Oracle a couple of weeks ago: &lt;a href=&#34;https://blogs.oracle.com/WebLogicServer/entry/oracle_weblogic_server_now_running&#34;&gt;Oracle WebLogic Server is now supported on Docker!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;es&#34;&gt;&lt;p&gt;I&amp;#39;m glad we announced support for &lt;a href=&#34;https://twitter.com/OracleWebLogic&#34;&gt;@OracleWebLogic&lt;/a&gt; on &lt;a href=&#34;https://twitter.com/docker&#34;&gt;@Docker&lt;/a&gt; last week, not today :-) &lt;a href=&#34;https://t.co/6E9UxrgY3n&#34;&gt;https://t.co/6E9UxrgY3n&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bruno Borges  (@brunoborges) &lt;a href=&#34;https://twitter.com/brunoborges/status/583252433343758336&#34;&gt;abril 1, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This is very cool. &lt;strong&gt;Docker&lt;/strong&gt; is a disruptive platform that ship everything inside a container (OS, Configurations, Platform, Application) and let you run it (almost) everywhere! To &lt;a href=&#34;https://www.docker.com/whatisdocker/&#34;&gt;learn more about Docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, WebLogic on Docker is great, but I&amp;rsquo;d like to go further and &lt;em&gt;Dockerize&lt;/em&gt; &lt;strong&gt;SOA&lt;/strong&gt; and &lt;strong&gt;BPM&lt;/strong&gt; products (as &lt;a href=&#34;https://guidoschmutz.wordpress.com/2015/03/29/installing-oracle-stream-explorer-in-a-docker-image/&#34;&gt;Guido Schmitz made with Oracle Stream Explorer&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;es&#34;&gt;&lt;p&gt;Just published my latest blog “Providing Oracle Stream Explorer environment using Docker”. &lt;a href=&#34;https://twitter.com/hashtag/oracle?src=hash&#34;&gt;#oracle&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/StreamExplorer?src=hash&#34;&gt;#StreamExplorer&lt;/a&gt; &lt;a href=&#34;http://t.co/WNFGCmFVca&#34;&gt;http://t.co/WNFGCmFVca&lt;/a&gt;&lt;/p&gt;&amp;mdash; gschmutz (@gschmutz) &lt;a href=&#34;https://twitter.com/gschmutz/status/582232826772357120&#34;&gt;marzo 29, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&#34;http://github.com/oracle/docker&#34;&gt;Oracle&amp;rsquo;s Docker repository&lt;/a&gt; as a base to create a Oracle SOA Suite 12c image (with the product installed - no domain included), and a sample Docker configuration to create a Docker image with a domain with SOA and OSB.&lt;/p&gt;

&lt;h2 id=&#34;get-the-repository&#34;&gt;Get the repository&lt;/h2&gt;

&lt;p&gt;To try this post you should have &lt;a href=&#34;https://docs.docker.com/&#34;&gt;a machine with Docker installed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get started you can download the repository: &lt;a href=&#34;http://github.com/jeqo/oracle-docker&#34;&gt;http://github.com/jeqo/oracle-docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The repository includes images for MySQL, WebLogic and Coherence. These images comes from Oracle repository.&lt;/p&gt;

&lt;p&gt;My contribution is into the &lt;a href=&#34;https://github.com/jeqo/oracle-docker/tree/master/OracleSOA&#34;&gt;&amp;lsquo;OracleSOA&amp;rsquo; directory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to fork and create &amp;ldquo;pull-requests&amp;rdquo;!&lt;/p&gt;

&lt;h2 id=&#34;creating-the-soa-suite-12c-image&#34;&gt;Creating the SOA Suite 12c image&lt;/h2&gt;

&lt;p&gt;Now you should &lt;a href=&#34;http://www.oracle.com/technetwork/middleware/soasuite/downloads/index.html&#34;&gt;download Oracle SOA Suite 12c Quick Start installer&lt;/a&gt;, and put it into OracleSOA/dockerfiles/12.1.3. Also, you should &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html&#34;&gt;download Java Development Kit 7&lt;/a&gt;, and put it in the same folder.&lt;/p&gt;

&lt;p&gt;Open a terminal into &lt;em&gt;OracleSOA&lt;/em&gt; directory, go to dockerfiles, run the script &lt;em&gt;buildDockerImage.sh&lt;/em&gt; with the &lt;em&gt;-d&lt;/em&gt; argument because we are installing the Quick Start version of SOA Suite 12c:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;sh buildDockerImage.sh -d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates a Docker image called: &lt;strong&gt;oracle/soa:12.1.3-dev&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;dockerize-a-soa-suite-domain&#34;&gt;Dockerize a SOA Suite Domain&lt;/h2&gt;

&lt;p&gt;So, now we have a Docker image with Oracle SOA Suite 12c installed. What we can do now is create a domain with WLST.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s what I did, and I add it to the &lt;em&gt;OracleSOA/samples&lt;/em&gt; directory.&lt;/p&gt;

&lt;p&gt;To run it, go to the &lt;em&gt;OracleSOA/samples/12c-domain&lt;/em&gt; and run the following commands:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;docker build -t mysoa .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And this should create an image called &lt;em&gt;mysoa&lt;/em&gt; that contains a Compact Domain into this directory: &lt;em&gt;/u01/oracle/work/domains/soa-domain&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it! When you want to run a SOA Suite 12c Domain, just run:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;docker run -i -t mysoa
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;next-steps&#34;&gt;Next steps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;BPM on Docker&lt;/li&gt;
&lt;li&gt;Publish images on Docker Hub Registry&lt;/li&gt;
&lt;li&gt;Extended Domain on Docker: Use an external Oracle Database for Oracle SOA/BPM Schemas&lt;/li&gt;
&lt;li&gt;SOA/BPM Cluster on Docker containers&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
        <item>
            <title>Running Oracle BPM 12c on AWS using Vagrant and Chef</title>
            <link>https://jeqo.github.io/post/2014-12-11-run-bpm-12c-aws/</link>
            <pubDate>Thu, 11 Dec 2014 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2014-12-11-run-bpm-12c-aws/</guid>
            <description>&lt;p&gt;In this post, I will show how to create an AWS EC2 Instance with an Oracle BPM 12c Quickstart Domain created. And I will use previous post for related tasks.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Lets see how to achieve this and make this process reusable. These are the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create an AWS EC2 instance (with Vagrant)&lt;/li&gt;
&lt;li&gt;Connect to an NFS instance to get the installer (with Chef)&lt;/li&gt;
&lt;li&gt;Install Oracle BPM 12c Quickstart and create a Domain (with Chef)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GitHub repository: &lt;a href=&#34;https://github.com/jeqo/oracle-bpm-12c-aws&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;create-an-aws-ec2-instance&#34;&gt;Create an AWS EC2 instance&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve created a Red Hat instance using Vagrant. This instance should be connected to my NFS instance that has all the Oracle&amp;rsquo;s installers (to create an NFS instance on AWS EC2: &lt;a href=&#34;http://jeqo.github.io/blog/devops/create-nfs-instance-aws/&#34;&gt;go here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is the NFS instance:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jeqo.github.io/images/2014-12-11-run-bpm-12c-aws/2014-12-11_0836.png&#34; alt=&#34;NFS instance&#34; title=&#34;NFS Instance&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the &amp;ldquo;/data&amp;rdquo; directory is shared. It includes Oracle XE and Oracle FMW installers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jeqo.github.io/images/2014-12-11-run-bpm-12c-aws/2014-12-11_0841.png&#34; alt=&#34;NFS directories&#34; title=&#34;NFS directories&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;vagrant-configuration&#34;&gt;Vagrant configuration&lt;/h3&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #880000&#34;&gt;VAGRANTFILE_API_VERSION&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #880000&#34;&gt;Vagrant&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;configure(&lt;span style=&#34;color: #880000&#34;&gt;VAGRANTFILE_API_VERSION&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;config&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
	&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Load properties files&lt;/span&gt;
	box_props &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #880000&#34;&gt;YAML&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;load_file(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;box.properties&amp;quot;&lt;/span&gt;)
	aws_props &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #880000&#34;&gt;YAML&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;load_file(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;aws.properties&amp;quot;&lt;/span&gt;)

	&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Basic metadata&lt;/span&gt;
	config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;box &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;box_props&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;box&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;
	config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;box_url &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;file://&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;box_props&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;box&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;base_location&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;

	&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# AWS Configuration&lt;/span&gt;
	config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;provider &lt;span style=&#34;color: #19177C&#34;&gt;:aws&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;aws, override&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
		aws&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;access_key_id &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;aws_props&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;access_key_id&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;
		aws&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;secret_access_key &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;aws_props&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;secret_access_key&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;
		aws&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;keypair_name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;jeqo&amp;quot;&lt;/span&gt;

		aws&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;instance_type &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;m3.medium&amp;quot;&lt;/span&gt;
		aws&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;region &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;sa-east-1&amp;quot;&lt;/span&gt;
		aws&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;availability_zone &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;sa-east-1a&amp;quot;&lt;/span&gt;
		aws&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;ami &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;ami-0511a418&amp;quot;&lt;/span&gt;

		override&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;ssh&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;username &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;ec2-user&amp;quot;&lt;/span&gt;
		override&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;ssh&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;private_key_path &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;aws_props&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;key_pair_location&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;

		aws&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;tags &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
		  &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; box_props&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;box&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
		}

		aws&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;block_device_mapping &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;{
			&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;DeviceName&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;/dev/sda1&amp;#39;&lt;/span&gt;,
			&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Ebs.VolumeSize&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; box_props&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;box&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;disk_size&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
		}&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

		aws&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;security_groups &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;jeqo-group&amp;quot;&lt;/span&gt;

		config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;ssh&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;pty &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;true&lt;/span&gt;
	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;

	&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Install Chef Client&lt;/span&gt;
	config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;omnibus&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;chef_version &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;:latest&lt;/span&gt;

	&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Increase Swap size&lt;/span&gt;
	config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;provision &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;s&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
		s&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;path	&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;increase_swap.sh&amp;quot;&lt;/span&gt;
		s&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;args   &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;box_props&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;box&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;additional_swap&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;

	&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Run Provisioning with Chef&lt;/span&gt;
	config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;provision &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chef_client&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;chef&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
		chef&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;chef_server_url &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;https://api.opscode.com/organizations/jeqo&amp;quot;&lt;/span&gt;
		chef&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;validation_client_name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;jeqo-validator&amp;quot;&lt;/span&gt;
		chef&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;validation_key_path &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;box_props&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;chef&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;repo_location&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;/.chef/jeqo-validator.pem&amp;quot;&lt;/span&gt;
		chef&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;node_name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;box_props&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;box&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;
		chef&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add_role &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;nfs-client&amp;quot;&lt;/span&gt;
		chef&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add_role &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;oracle_db-xe&amp;quot;&lt;/span&gt;
		chef&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add_role &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;demo-bpm_bam-12c&amp;quot;&lt;/span&gt;
		chef&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;json &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
			&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;nfs-client&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; {
				&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;server-host&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
			},
			&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;oracle-xe&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; {
				&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;file:///data/oracle-xe/oracle-xe-11.2.0-1.0.x86_64.rpm&amp;quot;&lt;/span&gt;
			},
			&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;bpm_qs-12c&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; {
				&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;file:///data/oracle-fmw/bpm_qs-12c/fmw_12.1.3.0.0_bpmqs_Disk1_1of1.zip&amp;quot;&lt;/span&gt;
			}
		}
	&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running this file with:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;vagrant up --provider&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;aws
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;You will create a new instance on AWS EC2.&lt;/p&gt;

&lt;h2 id=&#34;connect-to-an-nfs-instance&#34;&gt;Connect to an NFS instance&lt;/h2&gt;

&lt;p&gt;The first recipe that will be executed is:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
  chef&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add_role &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;nfs-client&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This call the following Chef role:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;nfs-client&amp;quot;&lt;/span&gt;,
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Role applied to the system that should be an NFS client tools.&amp;quot;&lt;/span&gt;,
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;json_class&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Chef::Role&amp;quot;&lt;/span&gt;,
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;default_attributes&amp;quot;&lt;/span&gt; : {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;nfs-client&amp;quot;&lt;/span&gt; : {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;server-host&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;local-directory&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/data&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;remote-directory&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/data&amp;quot;&lt;/span&gt;
    }
  },
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt; : [
    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;recipe[nfs-utils::nfs-client]&amp;quot;&lt;/span&gt;
  ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To update the server-host from your Vagrant configuration, add these lines:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
chef&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;json &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;nfs-client&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;server-host&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;123.1.1.12&amp;quot;&lt;/span&gt;
  },
  &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And when your instance started, a new directory &amp;ldquo;/data&amp;rdquo; will sync the NFS shared directories.&lt;/p&gt;

&lt;h2 id=&#34;install-oracle-bpm-12c-quickstart&#34;&gt;Install Oracle BPM 12c Quickstart&lt;/h2&gt;

&lt;p&gt;To install BPM, you can download my shared &lt;a href=&#34;https://supermarket.chef.io/cookbooks/oracle-fmw&#34;&gt;&amp;ldquo;oracle-fmw&amp;rdquo; cookbook&lt;/a&gt; from Chef Supermarket. It is explained in &lt;a href=&#34;http://jeqo.github.io/blog/devops/chef-cookbook-oracle-fmw-12c/&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vagrant configuration calls this Chef role:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;{
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;demo-bpm_bam-12c&amp;quot;&lt;/span&gt;,
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;json_class&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Chef::Role&amp;quot;&lt;/span&gt;,
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;default_attributes&amp;quot;&lt;/span&gt; : {
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;domain-12c&amp;quot;&lt;/span&gt;: {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;demo-bpm_bam-domain&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Compact&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;apps&amp;quot;&lt;/span&gt;: [
        {&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;SOA&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;},
        {&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;BPM&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;},
        {&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;BAM&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;},
        {&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;OSB&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;}
      ],
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;machines&amp;quot;&lt;/span&gt;: [
      ],
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;admin_server&amp;quot;&lt;/span&gt;: {
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;base_name&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;AdminServer&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;new_name&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;bpm_bpm-server&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;port&amp;quot;&lt;/span&gt; : &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;7001&amp;quot;&lt;/span&gt;
      },
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;managed_servers&amp;quot;&lt;/span&gt;: [
      ],
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;db_repo_host&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;db_repo_port&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;1521&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;db_repo_sid&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;xe&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;db_repo_prefix&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;DEMO&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;db_repo_password&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;welcome1&amp;quot;&lt;/span&gt;
    },
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;rcu-12c&amp;quot;&lt;/span&gt;: {
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;db_schema_prefix&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;DEMO&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;db_dba_user&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;SYS&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;db_dba_role&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;SYSDBA&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;db_dba_password&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;welcome1&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;db_schemas_password&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;welcome1&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;db_hostname&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;db_port&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;1521&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;db_service&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;xe&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;components&amp;quot;&lt;/span&gt;: [
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;SOAINFRA&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;OPSS&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;IAU&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;MDS&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;WLS&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;UCSUMS&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;IAU_APPEND&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;IAU_VIEWER&amp;quot;&lt;/span&gt;
      ]
    }
  },
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt; : [
    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;recipe[oracle-fmw::install-bpm_qs-12c]&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;recipe[oracle-fmw::create-rcu_repository-12c]&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;recipe[oracle-fmw::create-domain-12c]&amp;quot;&lt;/span&gt;
  ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This includes will run three recipes: &amp;ldquo;install-bpm_qs-12c&amp;rdquo; , &amp;ldquo;create-rcu_repository-12c&amp;rdquo;, &amp;ldquo;create-domain-12c&amp;rdquo;. And includes Domain information (&amp;ldquo;domain-12c&amp;rdquo;), and RCU info (&amp;ldquo;rcu-12c&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;These process takes 30 min. approx. And now we can login with &amp;ldquo;oracle-fmw&amp;rdquo; user (password: welcome1), and start the server:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jeqo.github.io/images/2014-12-11-run-bpm-12c-aws/2014-12-11_0930.png&#34; alt=&#34;Start server&#34; title=&#34;Stating WebLogic Server&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jeqo.github.io/images/2014-12-11-run-bpm-12c-aws/2014-12-11_0931.png&#34; alt=&#34;Server started&#34; title=&#34;WebLogic Server with BPM started&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it.&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Chef Cookbook for Oracle Fusion Middleware 12c</title>
            <link>https://jeqo.github.io/post/2014-12-09-chef-cookbook-oracle-fmw-12c/</link>
            <pubDate>Tue, 09 Dec 2014 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2014-12-09-chef-cookbook-oracle-fmw-12c/</guid>
            <description>&lt;p&gt;Provisioning tools have change the way we create software environments: How much time we spend installing OS, databases, configuring platforms, applications? Now you can translate this steps into code, getting the software development benefits and challenges into infrastructure: versioning, reuse, continuous improvement.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In this post, I will show you how to provision Oracle SOA Suite 12c using a Chef cookbook that I created and shared it on &lt;a href=&#34;http://supermarket.chef.io&#34;&gt;Chef Supermarket&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;provisioning-with-chef&#34;&gt;Provisioning with Chef&lt;/h2&gt;

&lt;p&gt;Chef is a provisioning tool, based on Ruby. Let you organize your &amp;ldquo;infrastructure&amp;rdquo; recipes on &lt;em&gt;Cookbooks&lt;/em&gt;. Here you can find the &lt;a href=&#34;https://supermarket.chef.io&#34;&gt;Chef Supermarket&lt;/a&gt;. For a Chef tutorial &lt;a href=&#34;http://learn.chef.io/&#34;&gt;go here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;chef-cookbooks-and-recipes&#34;&gt;Chef Cookbooks and Recipes&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Chef Cookbooks&lt;/strong&gt; are groups of &lt;strong&gt;Recipes&lt;/strong&gt;, and a &lt;strong&gt;Recipe&lt;/strong&gt; is a sequence of instructions called &lt;strong&gt;Resources&lt;/strong&gt;. &lt;em&gt;Directory, Execute, Service, Package&lt;/em&gt; are some resources.&lt;/p&gt;

&lt;p&gt;For instance: If you want to install an HTTP Server, first you should install a &lt;em&gt;Package&lt;/em&gt;, and then start HTTP &lt;em&gt;Service&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;oracle-fusion-middleware-cookbook&#34;&gt;Oracle Fusion Middleware Cookbook&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve created this cookbook: &lt;a href=&#34;https://supermarket.chef.io/cookbooks/oracle-fmw&#34;&gt;oracle-fmw&lt;/a&gt;. The idea is to have a group of recipes to provide Fusion Middleware environments with different products like: SOA, BPM, BAM, OSB, and so on.&lt;/p&gt;

&lt;p&gt;In the first release, this cookbook includes the following recipes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;prepare-infrastructure-12c&lt;/strong&gt;: Creates the required OS user and group, installs the required OS packages and execute some scripts to set required parameters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;install-bpm_qs-12c&lt;/strong&gt;: Installs Oracle BPM 12c which includes the following products (12.1.3): JDeveloper, Oracle SOA, Oracle OSB, Oracle BAM, Oracle BAM and others.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;create-rcu_repository-12c&lt;/strong&gt;: Creates RCU repositories on Oracle Database instance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;create-domain-12c&lt;/strong&gt;: Creates a WebLogic Domain with these (optional) products: SOA, BAM, BPM, OSB.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a following post I will show you how to use this cookbook. In the mind time you can download it, use it and improve it from &lt;a href=&#34;https://supermarket.chef.io/cookbooks/oracle-fmw&#34;&gt;Chef Supermarket&lt;/a&gt; and &lt;a href=&#34;https://github.com/jeqo/oracle-fmw&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Create a NFS instance on AWS using Vagrant and Chef</title>
            <link>https://jeqo.github.io/post/2014-11-30-create-nfs-instance-aws/</link>
            <pubDate>Sun, 30 Nov 2014 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2014-11-30-create-nfs-instance-aws/</guid>
            <description>&lt;p&gt;I was creating AWS EC2 instances to install Oracle Fusion Middleware products, and I found an issue: How to download Oracle&amp;rsquo;s installers if I want to use installers on several instances? This could consume a lot of network bandwith and I want to make this process repeatable, so I don&amp;rsquo;t want to wait 1 hour each installation only downloading files.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;So, I found this solution: &lt;a href=&#34;https://theredblacktree.wordpress.com/2013/05/23/how-to-setup-a-amazon-aws-ec2-nfs-share/&#34;&gt;How to setup an Amazon AWS EC2 NFS Share&lt;/a&gt;. But to make it more reusable, I create a Vagrant &amp;amp; Chef configuration to replicate and share this method here: &lt;a href=&#34;https://github.com/jeqo/vagrant-aws-chef-nfs&#34;&gt;Git repository&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-are-the-steps&#34;&gt;What are the steps?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;You need to install Vagrant (vagrant-aws and vagrant-omnibus) and Chef SDK&lt;/li&gt;
&lt;li&gt;You have to create &lt;a href=&#34;https://manage.opscode.com/&#34;&gt;Chef Server&lt;/a&gt; account and upload the cookbooks&lt;/li&gt;
&lt;li&gt;You need to create &lt;a href=&#34;http://aws.amazon.com/&#34;&gt;AWS account&lt;/a&gt; to create instances remotly.&lt;/li&gt;
&lt;li&gt;You have to create a Vagrant configuration and customize it to create an AWS EC2 instance&lt;/li&gt;
&lt;li&gt;Test it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Well, I&amp;rsquo;ve created a configuration on GitHub and I&amp;rsquo;ll show you how to use it:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/gqhY82kdHh4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I hope you find it useful. Feel free to share your comments!&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Book Review - Applied SOA Patterns on the Oracle Platform</title>
            <link>https://jeqo.github.io/post/2014-11-28-review-soa-patterns-oracle-platform/</link>
            <pubDate>Fri, 28 Nov 2014 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2014-11-28-review-soa-patterns-oracle-platform/</guid>
            <description>&lt;p&gt;I&amp;rsquo;ve had the opportunity to present a review of this book &lt;a href=&#34;https://www.packtpub.com/application-development/applied-soa-patterns-oracle-platform&#34;&gt;Applied SOA Patterns on the Oracle Platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Once I started to read the chapters, I found it quite interesting because of these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Great introduction to SOA  principles, and Oracle SOA Suite evolution&lt;/li&gt;
&lt;li&gt;Align AIA Concepts with SOA patterns&lt;/li&gt;
&lt;li&gt;A key topic for SOA success: Service Repository&lt;/li&gt;
&lt;li&gt;An extensive and complete description of Security and Error Handling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It looks like a really long book (572 pages), and it is. But this is justified because it takes a great approach from concepts to examples combined with experiences and source code. This could help you to feel more confident about your SOA design decisions.&lt;/p&gt;

&lt;h2 id=&#34;must-read-parts&#34;&gt;&amp;ldquo;Must Read&amp;rdquo; parts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 1 - SOA Frameworks&lt;/strong&gt;: I think these frameworks are quite important to apply on SOA design, for example: &lt;em&gt;Object and XML Modeling&lt;/em&gt;, if they are not designed well, could generate an implementation hell: huge and heavy data types, rare and indescribable names. Also gives an introduction to AIA that can give you a easy-to-learn guide about SOA layers, components, and common terms (Application Business Connector Services, Enterprise Business Flows and Services, and so on).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 2 - Oracle SOA Roadmap&lt;/strong&gt;: Owesome timeline about SOA Suite and related technologies. First time I found this information really well summarized. In general, this chapter makes a great technical specification about Oracle SOA Foundation: artifacts, technologies, code examples, specifications.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 3 - Oracle Enterprise Business Flow SOA Patterns&lt;/strong&gt;: Great distinction between BPEL and Mediator use cases, and I share the idea that telecommunications is a great industry to take examples about service orchestration.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 4&lt;/strong&gt;: This chapter contains really well explained tutorial: Implementing a basic Proxy on OSB is one of them, a Oracle E-Business Suite case turning a Message Broker into a Service Broker applying &amp;ldquo;Receive-Transform-Deliver&amp;rdquo; implementation pattern, and great examples about &amp;ldquo;VETRO&amp;rdquo; (or &amp;ldquo;VETO&amp;rdquo;) pattern on OSB: &lt;em&gt;Validate, Enrich, Transform and Operate&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 5&lt;/strong&gt;: A great &amp;ldquo;Getting-started&amp;rdquo; with SOA Governance using Oracle Enterprise Repository. &lt;em&gt;&amp;ldquo;Open standards for the SOA Taxonomy&amp;rdquo;, &amp;ldquo;Entity Types&amp;rdquo;&lt;/em&gt;, and &lt;em&gt;&amp;ldquo;Creating a lightweight taxonomy for dynamic service invocations&amp;rdquo;&lt;/em&gt; are definitely &lt;em&gt;must read&lt;/em&gt; parts: they include Service Discovery taxonomy, Entity relationships and how they impact in your architecture.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 6&lt;/strong&gt;: There is a note, on &amp;ldquo;Optimizing the Adapter Framework&amp;rdquo;, about SOAP and REST that you could find very interested, and I&amp;rsquo;m agree with it: &amp;ldquo;SOAP versus REST is a pointless discussion&amp;rdquo;. This is followed by a technical description of how to use different technologies like REST, JSON, EJB, DB Adapter, PL-SQL and Oracle XDK. &lt;em&gt;&amp;ldquo;After all, it doesn&amp;rsquo;t matter if it is modern or not, all that matters is if it works according to our principles or not. The color of the cat does not matter, as long as it catches the mice.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 7&lt;/strong&gt;:  &lt;em&gt;&amp;ldquo;Initial Analysis&amp;rdquo;&lt;/em&gt; including common SOA vulnerabilities and risks, and &lt;em&gt;&amp;ldquo;Risk mitigation design rules&amp;rdquo;&lt;/em&gt;, are all recommendations well explained and quite important in SOA projects.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 8&lt;/strong&gt; - Error-handling design rules is also a &amp;ldquo;must-read&amp;rdquo;: 15 rules related with OSB, BPEL, Enterprise Manager,  to follow and apply a right exception handling on your project. Follower by a technical approach first with JMX and SOA Composites.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Chapter 9&lt;/strong&gt;: This chapter includes an nice summary about Event Processing followed by a practitioner approach to implement CEP with Oracle Event Processing. Also includes 3 more important topics: High Availability with Coherence (How to integrated with OSB and CEP),  Monitoring Business Services with Oracle BAM ( How to use it from BPEL, JMS and Web Service API), and finally SOA as a Cloud Foundation (that&amp;rsquo;s where 12&amp;rdquo;c&amp;rdquo; comes from).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In conclusion you will find in this book a bunch of real experience aligned with SOA patterns and a mix of principles, frameworks, technical issues and product mapping. I believe you will find it very useful. You can find it &lt;a href=&#34;http://bit.ly/1uqK9dq&#34;&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;For me, this book will be my new handbook for comming SOA projects (with &lt;a href=&#34;http://www.oracle.com/technetwork/topics/entarch/itso-165161.html&#34;&gt;IT Strategies from Oracle&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you have comments about this book, please share! :)&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Vagrant and Chef Quickstart</title>
            <link>https://jeqo.github.io/post/2014-11-26-vagrant-quickstart/</link>
            <pubDate>Wed, 26 Nov 2014 00:00:00 UTC</pubDate>
            <author>Jorge Quilcate Otoya</author>
            <guid>https://jeqo.github.io/post/2014-11-26-vagrant-quickstart/</guid>
            <description>&lt;p&gt;I have some months working with Vagrant and I think it&amp;rsquo;s owesome! Integration with almost all kind of virtualization platforms: VirtalBox, VMware, Docker, AWS EC2, Hyper-V and so on. Also it&amp;rsquo;s able to use differente Provisioners: Chef, Puppet, bash, Docker, Ansible. I really like it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;So, when I start working with Vagrant I choose VirtualBox as my virtualization platform and Chef as my provisioner, and when trying different configurations I start finding some tips to share:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First step: Should I create my base box? or should I use a base box already created?&lt;/li&gt;
&lt;li&gt;Can I increase my disk space? how?&lt;/li&gt;
&lt;li&gt;Can I increase my swap memory? how?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, I decide to create a post to start creating Vagrant boxes and resolve this issues. Let&amp;rsquo;s start:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;First of all, install &lt;a href=&#34;https://www.vagrantup.com/downloads.html&#34;&gt;Vagrant&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;create-a-vagrant-box&#34;&gt;Create a Vagrant Box&lt;/h2&gt;

&lt;p&gt;If you read Vagrant documentation, you will find everything is based in a &lt;strong&gt;box&lt;/strong&gt;. What&amp;rsquo;s a box? In my opinion, a box is an abstraction from a base virtual environment: It has an OS installed, some basic configuration, and packaged to be reused. And what&amp;rsquo;s a &lt;strong&gt;base box&lt;/strong&gt;? A base box is a template to create boxes. For instance: A VirtualBox &lt;em&gt;base box&lt;/em&gt; is a VirtualBox VM with an OS installed, a disk space defined, and a basic configuration, and a &lt;em&gt;box&lt;/em&gt; is a Virtual Machine up and running. An Amazon Web Service EC2 &lt;em&gt;box&lt;/em&gt; is an instance and a &lt;em&gt;base box&lt;/em&gt; is a &lt;a href=&#34;https://github.com/mitchellh/vagrant-aws/tree/master/example_box&#34;&gt;file containing an AMI id&lt;/a&gt;, that is a Virtual Machine template from AWS.&lt;/p&gt;

&lt;p&gt;Now that I know what is a box, how can I created? You can created by yourself: creating a simple VM, installing a base OS, and running a Vagrant command to create a &amp;ldquo;base box&amp;rdquo;. The process to do this depends on what virtualization platform you are using, for example: on VirtualBox you can do &lt;a href=&#34;https://docs.vagrantup.com/v2/virtualbox/boxes.html&#34;&gt;this&lt;/a&gt; (official documentation) or a &lt;a href=&#34;http://www.skoblenick.com/vagrant/creating-a-custom-box-from-scratch/&#34;&gt;more detailed way&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This process is easy, but what if you want to use a cloud base box to be sure that anyone will change a package or configuration? There are two sites that I found where you can search, use directly or download base boxes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vagrantbox.es/&#34;&gt;Vagrantbox.es&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vagrantcloud.com/&#34;&gt;Vagrant Cloud&lt;/a&gt; the Vagrant&amp;rsquo;s official site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you can search an specific distribution and use it whenever you want.&lt;/p&gt;

&lt;p&gt;Ok, I have a base box, how can I use it to create a new box? The basic artifact you need is a Vagrant file:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;mkdir vagrant-box
vagrant init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running this creates a &lt;em&gt;Vagrantfile&lt;/em&gt; that contains the information to create a new box.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #880000&#34;&gt;VAGRANTFILE_API_VERSION&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #880000&#34;&gt;Vagrant&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;configure(&lt;span style=&#34;color: #880000&#34;&gt;VAGRANTFILE_API_VERSION&lt;/span&gt;) &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;config&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;box &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;base&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This &lt;em&gt;ruby&lt;/em&gt; script starts a &lt;em&gt;method&lt;/em&gt; where you have a variable &lt;em&gt;config&lt;/em&gt; from &lt;em&gt;Vagrant.configure(&amp;ldquo;2&amp;rdquo;)&lt;/em&gt;. This variable is what you use to start defining your &lt;em&gt;box&lt;/em&gt; properties.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;First important command: &lt;strong&gt;vagrant init&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is not enough to create a box. You need two more attributes:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# URL or path to base box file&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# config.vm.box_url = &amp;quot;https://storage.us2.oraclecloud.com/v1/istoilis-istoilis/vagrant/oel65-64.box&amp;quot;&lt;/span&gt;
  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;box_url &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;file://c:/boxes/oel65-64.box&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this you can execute &lt;em&gt;vagrant up&lt;/em&gt; to run the script. This will create a VM on VirtualBox with the same configuration as &lt;em&gt;base box&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Second important command: &lt;strong&gt;vagrant up [&amp;ndash;provider=virtualbox]&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can validate a new VM is created from VirtualBox. Depending on your base box you will have certain ammount of RAM memory, disk space and cpu&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;Great! so if you only want to clone your VM, this is enough.&lt;/p&gt;

&lt;h2 id=&#34;customize-a-vagrant-box&#34;&gt;Customize a Vagrant Box&lt;/h2&gt;

&lt;p&gt;What if I want to change my VM name? What if I want more memory? What if I want to create two instances?&lt;/p&gt;

&lt;p&gt;All these customizations are possible from &lt;em&gt;Vagrantfile&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start changing VM resources:&lt;/p&gt;

&lt;p&gt;As this is a virtualization platform specific requirement, you have to make these changes on an embedded method:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;provider &lt;span style=&#34;color: #19177C&#34;&gt;:virtualbox&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;vb&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
    vb&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;customize &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;modifyvm&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #19177C&#34;&gt;:id&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;--memory&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;2048&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
    vb&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;customize &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;modifyvm&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #19177C&#34;&gt;:id&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;--name&amp;quot;&lt;/span&gt;  , &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;basemachine&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
    vb&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;customize &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;modifyvm&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #19177C&#34;&gt;:id&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;--cpus&amp;quot;&lt;/span&gt;  , &lt;span style=&#34;color: #666666&#34;&gt;2]&lt;/span&gt;
    vb&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;customize &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;modifyvm&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #19177C&#34;&gt;:id&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;--chipset&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;ich9&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In VirtualBox, these are the most important parameters: RAM memory (in MB), VM name, CPUs number, and chipset.&lt;/p&gt;

&lt;p&gt;Ok, let&amp;rsquo;s try it&amp;hellip; wait, I already have a Vagrant box started&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Third important command: &lt;strong&gt;vagrant destroy&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For me, this is the greatest benefit of using Vagrant, you can destroy you box and you don&amp;rsquo;t care! Well,
you care if it&amp;rsquo;s a box in production, but when you are creating your environment you can destroy and
recreate over and over again, fast and easy.&lt;/p&gt;

&lt;p&gt;Run: &lt;em&gt;vagrant destroy&lt;/em&gt;, and &lt;em&gt;vagrant up&lt;/em&gt; again.&lt;/p&gt;

&lt;p&gt;Now you know how to create and parametrize your Vagrant Box on VirtualBox.&lt;/p&gt;

&lt;p&gt;Two more important parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: By default your box use a NAT network that VirtualBox creates out-of-the-box. But, what if you (obviously) want to connect to your box? You need to use the &amp;ldquo;Host-only&amp;rdquo; network:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;network &lt;span style=&#34;color: #19177C&#34;&gt;:private_network&lt;/span&gt;, &lt;span style=&#34;color: #19177C&#34;&gt;ip&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;192.168.56.XYZ&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Normally this is the network IP: 192.168.56.1, so your VMs use this IP as gateway.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shared Directories&lt;/strong&gt;: Using VirtualBox utility to create shared directories is annoying! With Vagrant is as easy as add thit to your script:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Mount c:\data directory to /data directory on box. mount_options is optional&lt;/span&gt;
  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;synced_folder &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/data&amp;quot;&lt;/span&gt; , &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/data&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #19177C&#34;&gt;:mount_options&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;dmode=777&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;fmode=777&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some other parameters:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Hostname&lt;/span&gt;
  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;hostname &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;basemachine&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more information: &lt;a href=&#34;https://docs.vagrantup.com/v2/vagrantfile/index.html&#34;&gt;Vagrant Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;resolving-some-common-issues&#34;&gt;Resolving some common issues&lt;/h2&gt;

&lt;p&gt;Excellent! you can create and parametrized Vagrant boxes. If your base box have enough disk and swap size, perfect!
But, what if your base box have 10GB as disk space and your swap space is 512MB or less?&lt;/p&gt;

&lt;p&gt;Well these issues took me a couple of days to resolve, so this is how to handle it:&lt;/p&gt;

&lt;h3 id=&#34;increase-disk-space&#34;&gt;Increase Disk space&lt;/h3&gt;

&lt;p&gt;Normally (sadly), cloud base box comes with VMDK disks formats. If you are lucky and your disk format is VDI,
you can solve this directly &lt;a href=&#34;http://derekmolloy.ie/resize-a-virtualbox-disk/&#34;&gt;like this&lt;/a&gt;. But, VMDK can&amp;rsquo;t be expanded,
so you need to add another disk to your VM. If making this manually is hard, can you imaging doing this from Vagrant?
Well, now that I solved is not that difficult:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an script called &lt;em&gt;&amp;ldquo;bootstrap.sh&amp;rdquo;&lt;/em&gt; on your working directory, and add these lines:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;pvcreate /dev/sdb
vgextend VolGroup /dev/sdb
lvextend /dev/VolGroup/lv_root /dev/sdb
resize2fs /dev/VolGroup/lv_root
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;VolGroup and lv_root can change on different distributions. But it works for me on Ubuntu also.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then add this code to your &lt;em&gt;Vagrantfile&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;provider &lt;span style=&#34;color: #19177C&#34;&gt;:virtualbox&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;vb&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Validate this should be run it once&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #880000&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[0]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;up&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt; &lt;span style=&#34;color: #880000&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;exist?(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;./disk1.vdi&amp;quot;&lt;/span&gt;)
    vb&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;customize &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;createhd&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;--filename&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;./disk1.vdi&amp;quot;&lt;/span&gt;,
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;--format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;VDI&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# 100GB&lt;/span&gt;
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;--size&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1024&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;

    vb&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;customize &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;storageattach&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #19177C&#34;&gt;:id&lt;/span&gt;,
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;--storagectl&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;SATA Controller&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;--port&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;--device&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;,
      &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;--type&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;hdd&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;--medium&amp;#39;&lt;/span&gt;,
      file_to_disk
    &lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #880000&#34;&gt;ARGV&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[0]&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;up&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt; &lt;span style=&#34;color: #880000&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;exist?(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;./disk1.vdi&amp;quot;&lt;/span&gt;)
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Run script to map new disk&lt;/span&gt;
    config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;provision &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #19177C&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;bootstrap.sh&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Run script to increase swap memory&lt;/span&gt;
    config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;provision &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #19177C&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;increase_swap.sh&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates a VDI disk file with 100GB of capacity. And is attached to your OS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This problem is solved when you create cloud Vagrant boxes, like AWS EC2 instances with Vagrant :D&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;increase-swap-memory&#34;&gt;Increase Swap Memory&lt;/h3&gt;

&lt;p&gt;As I install Oracle Fusion Middleware products, they require some amount of swap memory, but &lt;em&gt;base box&lt;/em&gt; comes with a small amount of swap.&lt;/p&gt;

&lt;p&gt;To resolve this, add this script called &lt;em&gt;&amp;ldquo;increase_swap.sh&amp;rdquo;&lt;/em&gt; on your working directory:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;#!/bin/sh&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# size of swapfile in megabytes&lt;/span&gt;
&lt;span style=&#34;color: #19177C&#34;&gt;swapsize&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;8000

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# does the swap file already exist?&lt;/span&gt;
grep -q &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;swapfile&amp;quot;&lt;/span&gt; /etc/fstab

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# if not then create it&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$?&lt;/span&gt; -ne &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;then&lt;/span&gt;
  &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;swapfile not found. Adding swapfile.&amp;#39;&lt;/span&gt;
  fallocate -l &lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;swapsize&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;M /swapfile
  chmod &lt;span style=&#34;color: #666666&#34;&gt;600&lt;/span&gt; /swapfile
  mkswap /swapfile
  swapon /swapfile
  &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;/swapfile none swap defaults 0 0&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /etc/fstab
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
  &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;swapfile found. No changes made.&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# output results to terminal&lt;/span&gt;
df -h
cat /proc/swaps
cat /proc/meminfo | grep Swap
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you destroy and up your box now, you will have a new box with 8GB of swap memory added and 100GB of additional disk space.&lt;/p&gt;

&lt;h2 id=&#34;additional-tricks&#34;&gt;Additional tricks&lt;/h2&gt;

&lt;h3 id=&#34;get-started-with-chef-provisioning&#34;&gt;Get Started with Chef (Provisioning!)&lt;/h3&gt;

&lt;p&gt;What if you want to install some package or service? You can do this with a bash (as we increase memory and disk) but is not flexible and can take a lot of effort. At this days provisioning is a trend and products as Docker, Puppet and Chef are getting very popular, so I will use Chef to show you how to install Apache and start HTTP service:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To learn more about chef: &lt;a href=&#34;http://learn.getchef.com&#34;&gt;Learn Chef&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create the following directories and create a file:&lt;/p&gt;

&lt;p&gt;chef/cookbooks/http/recipes/install-httpd.rb&lt;/p&gt;

&lt;p&gt;Chef base artifacts are Cookbooks that group common Recipes. For example you can create a Cookbook called &amp;ldquo;java&amp;rdquo; and add recipes to install different versions.&lt;/p&gt;

&lt;p&gt;Add this code to the file:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;package &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;httpd&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
  action &lt;span style=&#34;color: #19177C&#34;&gt;:install&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;

service &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;httpd&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
  action &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;:start&lt;/span&gt;, &lt;span style=&#34;color: #19177C&#34;&gt;:enable&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This recipe &lt;em&gt;install&lt;/em&gt; &amp;ldquo;httpd&amp;rdquo; package and ensure service &amp;ldquo;httpd&amp;rdquo; is &lt;em&gt;started&lt;/em&gt; and will be started when the machine is restarted.&lt;/p&gt;

&lt;p&gt;To call this simple recipe from Vagrant you need to add this to your file:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;provision &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;chef_solo&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;chef&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
    chef&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;cookbooks_path &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;../chef/cookbooks&amp;quot;&lt;/span&gt;
    chef&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add_recipe &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;http::install-httpd&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;chef-solo&lt;/em&gt; is when you use your client independently, and &lt;em&gt;chef-client&lt;/em&gt; is when you use a Chef Server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now if you destroy and re-create your Vagrant box again you could test that your HTTP server is up and running&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ip or host&#34;&gt;http://ip or hostname&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;properties-file&#34;&gt;Properties file&lt;/h3&gt;

&lt;p&gt;The last trick I want to share is how to create a properties file for your Vagrant configuration.&lt;/p&gt;

&lt;p&gt;What if you want to repeat this process to create another box? You can parametrized your Vagrantfile with a properties file.&lt;/p&gt;

&lt;p&gt;To do this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a file like this one called &amp;ldquo;vagrant.rb&amp;rdquo;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;box:
  name: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;base-machine&amp;quot;&lt;/span&gt;
  disk_path: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;./disk1.vdi&amp;quot;&lt;/span&gt;
  url: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;file://c:/boxes/oel65-64.box&amp;quot;&lt;/span&gt;
  ip: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;192.168.56.20&amp;quot;&lt;/span&gt;
  shared_directory: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;/data&amp;quot;&lt;/span&gt;
  disk_size: 40
  ram_memory: 2048
  cpus: 2
  swap_memory: 4096
chef:
  repo_location: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;C:/dev/jeqo/chef-repo&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add the &amp;ldquo;yaml&amp;rdquo; library:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  &lt;span style=&#34;color: #008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;yaml&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Then read and use properties:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
  props &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #880000&#34;&gt;YAML&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;load_file(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;vagrant.rb&amp;quot;&lt;/span&gt;)

  config&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;vm&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;box &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;#{&lt;/span&gt;props&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;box&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, it&amp;rsquo;s a long but (i hope) an easy post. I hope you enjoyed :)&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&#34;https://github.com/jeqo/vagrant-quickstart&#34;&gt;Git repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to send your comments and question!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclosure: I&amp;rsquo;m not a Ruby developer (yet), so if I&amp;rsquo;m using a wrong term about ruby code sorry :)  I just trying to describe the source code, that I think is enough for Vagrant files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;resources&#34;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Vagrant Docs: &lt;a href=&#34;https://docs.vagrantup.com/v2/&#34;&gt;https://docs.vagrantup.com/v2/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Increase Swap: &lt;a href=&#34;http://programmaticponderings.wordpress.com/2013/12/19/scripting-linux-swap-space/&#34;&gt;http://programmaticponderings.wordpress.com/2013/12/19/scripting-linux-swap-space/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a new disk to VirtualBox VM with Vagrant: &lt;a href=&#34;https://gist.github.com/leifg/4713995&#34;&gt;https://gist.github.com/leifg/4713995&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Getting started with Chef: &lt;a href=&#34;https://learn.getchef.com&#34;&gt;https://learn.getchef.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;VirtualBox API documentation: &lt;a href=&#34;https://www.virtualbox.org/manual/ch08.html&#34;&gt;https://www.virtualbox.org/manual/ch08.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
