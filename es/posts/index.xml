<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on @jeqo</title>
    <link>https://jeqo.github.io/es/posts/</link>
    <description>Recent content in Posts on @jeqo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <copyright>&amp;copy; Copyright @jeqo</copyright>
    <lastBuildDate>Thu, 01 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://jeqo.github.io/es/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cómo mejorar el sitio web del Congreso de Perú?</title>
      <link>https://jeqo.github.io/es/posts/2020-10-02-peru-congreso/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/es/posts/2020-10-02-peru-congreso/</guid>
      <description>Si bien nos podemos seguir quejando (y con muchas razones) sobre las deficiencias del Congreso, no sirve de mucho si no va de la mano de con propuestas de como apoyar a solucionarlo.
En teoría el Congreso literalmente trabaja para nosotros (los ciudadanos). Si como ciudadanos no somos capaces de entender y fiscalizar que es lo que el Congreso hace, no hay manera de controlarlos.
hashtag-outline &amp;nbsp;Sitio web del Congreso El actual sitio web si bien tiene una apariencia renovada, la información expuesta aún no es facilmente accessible, ni procesable.</description>
    </item>
    
    <item>
      <title>Retroceder Offsets de Consumidores de Kafka</title>
      <link>https://jeqo.github.io/es/posts/2017-01-31-kafka-rewind-consumers-offset/</link>
      <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/es/posts/2017-01-31-kafka-rewind-consumers-offset/</guid>
      <description>&lt;p&gt;Una de las características más importantes de &lt;em&gt;Apache Kafka&lt;/em&gt; es el manejo
de múltiples consumidores. Cada &lt;code&gt;consumer group&lt;/code&gt; tiene un &lt;code&gt;offset&lt;/code&gt;, que
determina hasta que punto del &lt;code&gt;topic&lt;/code&gt; se encuentra consumido por &lt;code&gt;consumer group&lt;/code&gt;.
Así, cada &lt;code&gt;consumer group&lt;/code&gt; puede manejar los &lt;code&gt;offset&lt;/code&gt; independientemente, por
partición.&lt;/p&gt;
&lt;p&gt;Esto ofrece la posibilidad de retroceder en el tiempo y reprocesar mensaje desde
el inicio de un &lt;code&gt;topic&lt;/code&gt; y regenerar el estado actual del sistema.&lt;/p&gt;
&lt;p&gt;Pero, cómo realizar esto de forma programática?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Escalando Kafka con Docker Containers</title>
      <link>https://jeqo.github.io/es/posts/2017-01-15-scale-kafka-containers/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/es/posts/2017-01-15-scale-kafka-containers/</guid>
      <description>&lt;p&gt;En este post mostraré como utilizar contenedores Docker para crear y escalar
un clúster de Kafka, y también como crear, escalar y mover &lt;code&gt;topics&lt;/code&gt; dentro del
clúster.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ansible - Provisionamiento sin agentes</title>
      <link>https://jeqo.github.io/es/posts/2016-03-30-ansible-agentless-provisioning/</link>
      <pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/es/posts/2016-03-30-ansible-agentless-provisioning/</guid>
      <description>Ansible es una herramienta de automatización reconocida por ser sencilla y potente a la vez. Según mi experiencia, puedo decir que esto se debe principalmente al lenguaje que utiliza: YAML, y a tener una arquitectura sin agentes o &amp;ldquo;agentless&amp;rdquo;.
hashtag-outline &amp;nbsp;YAML y los componentes de Ansible &amp;ldquo;YAML is a human friendly data serialization standard for all programming languages&amp;rdquo; (Source: http://yaml.org/)
Esto signifíca que es verdaderamente fácil de entender y comenzar a trabajar con YAML.</description>
    </item>
    
    <item>
      <title>Imagen de Oracle SOA Suite 12c en Docker</title>
      <link>https://jeqo.github.io/es/posts/2015-09-04-oracle-soa-12c-packer-docker-hub/</link>
      <pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/es/posts/2015-09-04-oracle-soa-12c-packer-docker-hub/</guid>
      <description>Luego de encontrar algunas limitaciones en la construcción de una imagen en Docker con Oracle SOA Suite 12c instalado usando Dockerfiles (como acceso a volumenes, tamaño de filesystem por defecto), he investigado como mejorar este proceso, y he encontrado Packer (del mismo equipo que creo Vagrant, Hashicorp).
Para obtener mayor información sobre porqué utilizar Packer en vez de Dockerfiles, ir aquí.
También he movido el directory OracleSOA que cree sobre el repositorio de Oracle Docker oracle-docker hacia un repositorio independiente: github.</description>
    </item>
    
    <item>
      <title>Integrar Java EE 7 y Kafka usando Avro y RxJava</title>
      <link>https://jeqo.github.io/es/posts/2015-07-31-java-ee-rxjava-kafka-avro/</link>
      <pubDate>Fri, 31 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/es/posts/2015-07-31-java-ee-rxjava-kafka-avro/</guid>
      <description>Hace poco decidi probar una rápida implementación entre aplicaciones Java EE y RxJava/Kafka/Avro, para publicar/subscribirse a &amp;ldquo;topic messages&amp;rdquo;.
Puedes ir directamente al código, o revisar el enfoque que apliqué:
hashtag-outline &amp;nbsp;TL;DR He estado realizando alguna pruebas de concepto con Kafka seducido por los beneficios que propone (rapidez, escalabilidad, y funcionar como una fuente de eventos durable) para implementar una propagación de eventos usando el patrón &amp;ldquo;Publish/Subscribe&amp;rdquo;.
En estos momentos que estoy escribiendo esta entrada del blog, me he dado cuenta que las APIs para acceder a Kafka están en constante evolución y volviéndose más simples de utilizar, y no ha sido fácil encontrar un ejemplo con la versión actual.</description>
    </item>
    
    <item>
      <title>Oracle Fusion Middleware Chef Cookbook - Nueva versión!</title>
      <link>https://jeqo.github.io/es/posts/2015-07-21-chef-cookbook-oracle-fmw-0-2-0/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/es/posts/2015-07-21-chef-cookbook-oracle-fmw-0-2-0/</guid>
      <description>Ayer cargué una nueva versión (0.2.0) de mi Oracle Fusion Middleware Cookbook compartido en Chef Supermarket
Este nuevo release incluye:
Soporte para la instalación de Oracle SOA Suite 12c Quickstart Soporte para la instalación y creación de dominios con Oracle SOA/OSB Suite 11g Pueden encontrar ejemplos de uso en este repositorio: https://github.com/jeqo/chef-repo</description>
    </item>
    
    <item>
      <title>Oracle SOA Suite 12c sobre Docker</title>
      <link>https://jeqo.github.io/es/posts/2015-04-01-docker-image-oracle-soa/</link>
      <pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/es/posts/2015-04-01-docker-image-oracle-soa/</guid>
      <description>Buenas noticias llegaron desde Oracle hace un par de semanas: Oracle WebLogic Server es ahora soportado en Docker!.
Esto es muy emocionante. Docker es una nueva tecnología que propone una nueva forma de virtualización a través de contenedores (OS, Configurations, Platform, Application) Para más información acerca de Docker
Bueno, WebLogic sobre Docker es genial, pero me he propuesto ir unos pasos más adelante y Dockerize los productos de SOA y BPM (como Guido Schmitz hizo con Oracle Stream Explorer)</description>
    </item>
    
    <item>
      <title>Oracle BPM 12c sobre AWS EC2 usando Vagrant y Chef</title>
      <link>https://jeqo.github.io/es/posts/2014-12-11-run-bpm-12c-aws/</link>
      <pubDate>Thu, 11 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/es/posts/2014-12-11-run-bpm-12c-aws/</guid>
      <description>En esta entrada mostraré el procedimiento que utilicé para crear instancias en Amazon Web Service EC2, con Oracle BPM 12c instalado y un dominio provisionado.
Este procedimiento se realizo en los siguientes pasos:
Crear una instancia en AWS EC2 (con Vagrant) Conectarse a una instancia NFS para obtener instaladores (con Chef) Instalar Oracle BPM 12c Quickstart y crear Dominio (con Chef) GitHub: https://github.com/jeqo/oracle-bpm-12c-aws
hashtag-outline &amp;nbsp;Crear una instancia en AWS EC2 He creado una instancia Red Hat usando Vagrant.</description>
    </item>
    
    <item>
      <title>Chef Cookbook para Oracle Fusion Middleware 12c</title>
      <link>https://jeqo.github.io/es/posts/2014-12-09-chef-cookbook-oracle-fmw-12c/</link>
      <pubDate>Tue, 09 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/es/posts/2014-12-09-chef-cookbook-oracle-fmw-12c/</guid>
      <description>Las herramientas de provisionamiento de software han cambiado la forma de crear ambientes: Cuánto tiempo que se toma para instalar Sistema Operativo, base de datos, configurar la plataforma, desplegar aplicaciones? Pueden ser días, hasta semanas. Ahora que se pueden transladar estos pasos en código, este proceso se ve transformado en horas, hasta minutos.
En esta entrada voy a mostrar como provisionar un Dominio WebLogic con Oracle SOA Suite 12c, utilizando un Chef cookbook que he compartido en Chef Supermarket.</description>
    </item>
    
    <item>
      <title>Crear una instancia NFS en AWS usando Vagrant y Chef</title>
      <link>https://jeqo.github.io/es/posts/2014-11-30-create-nfs-instance-aws/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jeqo.github.io/es/posts/2014-11-30-create-nfs-instance-aws/</guid>
      <description>Estuve probando la creación de instancias en AWS EC2 para instalar productos de Oracle Fusion Middleware, y encontré una restricción: Cómo descargar los instaladores si quiero reutilizarlos en varias instancias? Cómo evitar un consumo alto de ancho de banda? Y cómo hacer este procedimiento repetitivo?
Entre varias soluciones, en este momento decidi aplicar : How to setup an Amazon AWS EC2 NFS Share. Pero para hacerla reutilizable cree una configuración en Vagrant y Chef para provisionar una instancia en AWS con NFS configurado: Git repository</description>
    </item>
    
  </channel>
</rss>
